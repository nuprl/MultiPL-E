{
  "name": "mbpp_748_capital_words_spaces",
  "language": "swift",
  "prompt": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.insert(\" \", at: index)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmp_1nl3ohi/tmp_1nl3ohi.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23b09edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23b06e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23b06e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23b06e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_1nl3ohi                        0x000055ee7627d747 <unavailable> + 5959\n5    libc.so.6                          0x00002b23b0bd9460 __libc_start_main + 245\n6    tmp_1nl3ohi                        0x000055ee7627d389 <unavailable> + 5001\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    var result = \"\"\n    for word in words {\n        if word.characters.first! >= \"A\" && word.characters.first! <= \"Z\" {\n            result += \" \\(word)\"\n        } else {\n            result += \" \\(word)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpgi2jdow6.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = str1.components(separatedBy: \" \")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for char in str {\n        if char.isUppercase {\n            result += \" \" + String(char)\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpxxv15yzt/tmpxxv15yzt.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b26933e2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b26930d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b26930d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b26930d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxxv15yzt                        0x000055efddb43507 <unavailable> + 5383\n5    libc.so.6                          0x00002b26935ce460 __libc_start_main + 245\n6    tmpxxv15yzt                        0x000055efddb43149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpm13y6818/tmpm13y6818.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88aa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88799b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88799988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa887987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm13y6818                        0x0000560d11b7b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002afa88c8e460 __libc_start_main + 245\n6    tmpm13y6818                        0x0000560d11b7b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (index, char) in str1.enumerated() {\n        if index == 0 {\n            str2.append(char)\n        } else {\n            let prev_char = str1[str1.index(str1.startIndex, offsetBy: index - 1)]\n            if prev_char.isUppercase && char.isLowercase {\n                str2.append(\" \")\n            }\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmprcuem6ms/tmprcuem6ms.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3f485c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb3f17cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb3f17c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb3f17b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprcuem6ms                        0x000055944d93a7f7 <unavailable> + 6135\n5    libc.so.6                          0x00002aeb3f671460 __libc_start_main + 245\n6    tmprcuem6ms                        0x000055944d93a439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpnn55h4dw/tmpnn55h4dw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c3bff6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c3bcedb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c3bced988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c3bcec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnn55h4dw                        0x0000556cf33567c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b2c3c1e2460 __libc_start_main + 245\n6    tmpnn55h4dw                        0x0000556cf3356409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmp4a47gngz/tmp4a47gngz.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b730ee46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b730eb3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b730eb3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b730eb3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4a47gngz                        0x000055f2e4868697 <unavailable> + 5783\n5    libc.so.6                          0x00002b730f032460 __libc_start_main + 245\n6    tmp4a47gngz                        0x000055f2e48682d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2 += \" \\(c)\"\n        } else {\n            str2 += \"\\(c)\"\n        }\n    }\n    for c in str2 {\n        if c != \" \" {\n            str3 += \"\\(c)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpch5jse34/tmpch5jse34.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b502fb2ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b502f821b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b502f821988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b502f8207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpch5jse34                        0x000055dccf00d947 <unavailable> + 6471\n5    libc.so.6                          0x00002b502fd16460 __libc_start_main + 245\n6    tmpch5jse34                        0x000055dccf00d499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" && str3.last == \" \" {\n            continue\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpj1r7gpfs/tmpj1r7gpfs.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba3e9db9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba3e9ab0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba3e9ab0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3e9aaf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj1r7gpfs                        0x0000561eb8817937 <unavailable> + 6455\n5    libc.so.6                          0x00002ba3e9fa5460 __libc_start_main + 245\n6    tmpj1r7gpfs                        0x0000561eb8817579 <unavailable> + 5497\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in 0..<str1.count {\n        if i > 0 && str1[str1.index(str1.startIndex, offsetBy: i)] >= \"A\" && str1[str1.index(str1.startIndex, offsetBy: i)] <= \"Z\" && str1[str1.index(str1.startIndex, offsetBy: i - 1)] >= \"a\" && str1[str1.index(str1.startIndex, offsetBy: i - 1)] <= \"z\" {\n            str.append(\" \")\n        }\n        str.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \\(i)\"\n        } else {\n            str2 += \"\\(i)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpskm1ij2u/tmpskm1ij2u.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af77f3f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af77f0e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af77f0e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af77f0e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpskm1ij2u                        0x000055cca2616767 <unavailable> + 5991\n5    libc.so.6                          0x00002af77f5dd460 __libc_start_main + 245\n6    tmpskm1ij2u                        0x000055cca26163a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp2xeg118m.swift:7:21: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                    ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xeg118m.swift:7:38: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if i > 0 && str[i] >= \"A\" && str[i] <= \"Z\" {\n                                     ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for (index, char) in str1.enumerated() {\n        if index == 0 {\n            str2.append(char)\n        } else {\n            if str1[str1.index(str1.startIndex, offsetBy: index - 1)] == \" \" {\n                str2.append(char)\n            } else {\n                if char.isUppercase {\n                    str2.append(\" \")\n                    str2.append(char)\n                } else {\n                    str2.append(char)\n                }\n            }\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            result.append(\" \")\n        }\n        result.append(str[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpg_lj1j61/tmpg_lj1j61.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad4b038c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad4ad2fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad4ad2f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad4ad2e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg_lj1j61                        0x000055a9118b96f7 <unavailable> + 5879\n5    libc.so.6                          0x00002aad4b224460 __libc_start_main + 245\n6    tmpg_lj1j61                        0x000055a9118b9339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpm13y6818/tmpm13y6818.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88aa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88799b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88799988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa887987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm13y6818                        0x0000560d11b7b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002afa88c8e460 __libc_start_main + 245\n6    tmpm13y6818                        0x0000560d11b7b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        if i == 0 {\n            result.append(str[i])\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n            result.append(\" \")\n            result.append(str[i])\n        } else {\n            result.append(str[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp95vfv6hq.swift:8:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp95vfv6hq.swift:9:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp95vfv6hq.swift:9:41: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n                                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp95vfv6hq.swift:11:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp95vfv6hq.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp95vfv6hq.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \")\n                str2.append(char)\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpb5y0with/tmpb5y0with.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad64c326c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad64c01db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad64c01d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad64c01c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5y0with                        0x0000560a634044b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad64c512460 __libc_start_main + 245\n6    tmpb5y0with                        0x0000560a634040f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        if str[i] == \" \" {\n            result += \" \"\n        } else if str[i].isUppercase {\n            result += \" \\(str[i])\"\n        } else {\n            result += \"\\(str[i])\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpa_1j5qvm.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] == \" \" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa_1j5qvm.swift:9:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa_1j5qvm.swift:10:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result += \" \\(str[i])\"\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa_1j5qvm.swift:12:26: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result += \"\\(str[i])\"\n                         ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa_1j5qvm.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp410puf67/tmp410puf67.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acec3100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acec2df7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acec2df7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acec2df67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp410puf67                        0x0000557b1a81b4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002acec32ec460 __libc_start_main + 245\n6    tmp410puf67                        0x0000557b1a81b0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        str2 += String(i)\n        if i.isUppercase {\n            str2 += \" \"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpjnx4j0y2/tmpjnx4j0y2.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1c998dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1c9684b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1c9684988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1c96837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjnx4j0y2                        0x00005631f90d14b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ac1c9b79460 __libc_start_main + 245\n6    tmpjnx4j0y2                        0x00005631f90d10f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpm13y6818/tmpm13y6818.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88aa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88799b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88799988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa887987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm13y6818                        0x0000560d11b7b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002afa88c8e460 __libc_start_main + 245\n6    tmpm13y6818                        0x0000560d11b7b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpedam4nzd/tmpedam4nzd.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6b23bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6b20b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6b20b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6b20b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpedam4nzd                        0x0000557d136e75b7 <unavailable> + 5559\n5    libc.so.6                          0x00002ad6b25a7460 __libc_start_main + 245\n6    tmpedam4nzd                        0x0000557d136e71f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let index1 = str.index(str.startIndex, offsetBy: i+1)\n        if i == 0 {\n            result.append(str[index])\n        } else {\n            if str[index].isUppercase && str[index1].isLowercase {\n                result.append(\" \")\n                result.append(str[index])\n            } else {\n                result.append(str[index])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for (index, char) in str1.enumerated() {\n        if index == 0 {\n            str.append(char)\n        } else {\n            if str1[str1.index(str1.startIndex, offsetBy: index - 1)] == \" \" {\n                str.append(char)\n            } else {\n                if char.isUppercase {\n                    str.append(\" \")\n                    str.append(char)\n                } else {\n                    str.append(char)\n                }\n            }\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    str = str.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp3gt92_7k.swift:5:15: error: value of type 'String' has no member 'replacingOccurrences'\n    str = str.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n          ~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3gt92_7k.swift:5:74: error: cannot infer contextual base in reference to member 'regularExpression'\n    str = str.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                        ~^~~~~~~~~~~~~~~~~\n/tmp/tmp3gt92_7k.swift:5:100: error: 'nil' requires a contextual type\n    str = str.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                                                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count - 1 {\n        let index = str.index(str.startIndex, offsetBy: i)\n        let nextIndex = str.index(str.startIndex, offsetBy: i + 1)\n        if str[index].isUppercase && str[nextIndex].isLowercase {\n            str.insert(\" \", at: nextIndex)\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmp4we4kmzh/tmp4we4kmzh.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32c9c64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32c995bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32c995b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32c995a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4we4kmzh                        0x0000556703d73617 <unavailable> + 5655\n5    libc.so.6                          0x00002b32c9e50460 __libc_start_main + 245\n6    tmp4we4kmzh                        0x0000556703d73259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count - 1 {\n        if str[i].isUppercase && str[i + 1].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0snqumax.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0snqumax.swift:7:34: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var last_char_was_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_was_capital {\n                str2.append(\" \")\n            }\n            last_char_was_capital = true\n        } else {\n            last_char_was_capital = false\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp6qgczrc_/tmp6qgczrc_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6ff528c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6ff21fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6ff21f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6ff21e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6qgczrc_                        0x000055fcefcc95a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab6ff714460 __libc_start_main + 245\n6    tmp6qgczrc_                        0x000055fcefcc90f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var index = 0\n    while index < str.count {\n        if str[index].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: index))\n            index += 1\n        }\n        index += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpoi101fxj.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[index].isUppercase {\n           ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            result.append(str[i])\n            i += 1\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n            result.append(\" \")\n            result.append(str[i])\n            i += 1\n        } else {\n            result.append(str[i])\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp9ut69bmg.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ut69bmg.swift:11:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ut69bmg.swift:11:41: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase && str[i-1].isLowercase {\n                                        ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ut69bmg.swift:13:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ut69bmg.swift:16:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9ut69bmg.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \\(i)\"\n        } else {\n            str2 += \"\\(i)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpskm1ij2u/tmpskm1ij2u.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af77f3f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af77f0e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af77f0e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af77f0e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpskm1ij2u                        0x000055cca2616767 <unavailable> + 5991\n5    libc.so.6                          0x00002af77f5dd460 __libc_start_main + 245\n6    tmpskm1ij2u                        0x000055cca26163a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            if i > 0 {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n            if i < str.count - 1 {\n                if str[i + 1].isUppercase {\n                    str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n                    i += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp3yw3dt80.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3yw3dt80.swift:13:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str[i + 1].isUppercase {\n                   ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        } else {\n            if str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)] != \" \" {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp5cnf24n6/tmp5cnf24n6.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8679ccec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b86799c5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b86799c5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86799c47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5cnf24n6                        0x000055bcccbb2617 <unavailable> + 5655\n5    libc.so.6                          0x00002b8679eba460 __libc_start_main + 245\n6    tmp5cnf24n6                        0x000055bcccbb2259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpguox0qzb/tmpguox0qzb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c0d998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c0d68fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c0d68f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c0d68e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguox0qzb                        0x00005611270777c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b7c0db84460 __libc_start_main + 245\n6    tmpguox0qzb                        0x0000561127077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp410puf67/tmp410puf67.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acec3100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acec2df7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acec2df7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acec2df67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp410puf67                        0x0000557b1a81b4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002acec32ec460 __libc_start_main + 245\n6    tmp410puf67                        0x0000557b1a81b0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \\(i)\")\n        } else {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpxs3xdh2b.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2 += String(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp410puf67/tmp410puf67.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acec3100c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acec2df7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acec2df7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acec2df67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp410puf67                        0x0000557b1a81b4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002acec32ec460 __libc_start_main + 245\n6    tmp410puf67                        0x0000557b1a81b0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2 += \" \"\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmp277tex8i/tmp277tex8i.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b83d59c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b83a50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b83a50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b83a4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp277tex8i                        0x000055f0ce07f697 <unavailable> + 5783\n5    libc.so.6                          0x00002b7b83f45460 __libc_start_main + 245\n6    tmp277tex8i                        0x000055f0ce07f2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase && i != 0 {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpslz4wx6n.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && i != 0 {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase && !prev_char_is_capital {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev_char_is_capital = char.isUppercase\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmp3rd2jlq0/tmp3rd2jlq0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9f09fdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9f06f4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9f06f4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9f06f37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3rd2jlq0                        0x000055c2af0bc4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ba9f0be9460 __libc_start_main + 245\n6    tmp3rd2jlq0                        0x000055c2af0bc0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \")\n        }\n        result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp788r6_6a/tmp788r6_6a.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b153eab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b153e7a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b153e7a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b153e7a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp788r6_6a                        0x00005643bcbbc4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b153ec9c460 __libc_start_main + 245\n6    tmp788r6_6a                        0x00005643bcbbc0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 2\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp519w_a5w.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \\(char)\")\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpa7y_pzm6/tmpa7y_pzm6.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1496dfac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1496af1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1496af1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1496af07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa7y_pzm6                        0x0000560afa4a37c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b1496fe6460 __libc_start_main + 245\n6    tmpa7y_pzm6                        0x0000560afa4a3409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var prev_char = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev_char.isLowercase {\n            result.append(\" \")\n        }\n        result.append(char)\n        prev_char = char\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n    return str1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "/tmp/tmpibtnxlnd.swift:4:21: error: value of type 'String' has no member 'replacingOccurrences'\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpibtnxlnd.swift:4:80: error: cannot infer contextual base in reference to member 'regularExpression'\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                              ~^~~~~~~~~~~~~~~~~\n/tmp/tmpibtnxlnd.swift:4:106: error: 'nil' requires a contextual type\n    let str1 = str1.replacingOccurrences(of: \"([A-Z])\", with: \" $1\", options: .regularExpression, range: nil)\n                                                                                                         ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str.append(\" \\(i)\")\n        } else {\n            str.append(i)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpnn55h4dw/tmpnn55h4dw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c3bff6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c3bcedb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c3bced988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c3bcec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnn55h4dw                        0x0000556cf33567c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b2c3c1e2460 __libc_start_main + 245\n6    tmpnn55h4dw                        0x0000556cf3356409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if last_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \\(char)\")\n            }\n            last_char_is_capital = true\n        } else {\n            result.append(char)\n            last_char_is_capital = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp2cuturfh/tmp2cuturfh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fac2ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fabfe2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fabfe2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fabfe17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2cuturfh                        0x000055e5d3f3b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b8fac4d7460 __libc_start_main + 245\n6    tmp2cuturfh                        0x000055e5d3f3b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if i > 0 && str[str.index(str.startIndex, offsetBy: i)].isUppercase && str[str.index(str.startIndex, offsetBy: i - 1)].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var prev = \"\"\n    for char in str1 {\n        if char.isUppercase && !prev.isUppercase {\n            result += \" \"\n        }\n        result.append(char)\n        prev = char\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmptk3g8uf5.swift:7:38: error: value of type 'String' has no member 'isUppercase'\n        if char.isUppercase && !prev.isUppercase {\n                                ~~~~ ^~~~~~~~~~~\n/tmp/tmptk3g8uf5.swift:11:16: error: cannot assign value of type 'Character' to type 'String'\n        prev = char\n               ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var i = 0\n    while i < str1.count {\n        let index = str1.index(str1.startIndex, offsetBy: i)\n        if str1[index].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[index])\n        i += 1\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpibemyga9/tmpibemyga9.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0e0a760c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0e0a457b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0e0a457988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0e0a4567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpibemyga9                        0x0000557131453567 <unavailable> + 5479\n5    libc.so.6                          0x00002b0e0a94c460 __libc_start_main + 245\n6    tmpibemyga9                        0x00005571314531a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var last_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if !last_char_is_capital {\n                result += \" \"\n            }\n            last_char_is_capital = true\n        } else {\n            last_char_is_capital = false\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpnz1jchs1/tmpnz1jchs1.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab50ed56c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab50ea4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab50ea4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab50ea4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnz1jchs1                        0x000055ab4918a4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ab50ef42460 __libc_start_main + 245\n6    tmpnz1jchs1                        0x000055ab4918a0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char == \" \" && str3.last == \" \" {\n            continue\n        } else {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpj1r7gpfs/tmpj1r7gpfs.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba3e9db9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba3e9ab0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba3e9ab0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3e9aaf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj1r7gpfs                        0x0000561eb8817937 <unavailable> + 6455\n5    libc.so.6                          0x00002ba3e9fa5460 __libc_start_main + 245\n6    tmpj1r7gpfs                        0x0000561eb8817579 <unavailable> + 5497\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \")\n                str2.append(char)\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpb5y0with/tmpb5y0with.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad64c326c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad64c01db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad64c01d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad64c01c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5y0with                        0x0000560a634044b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad64c512460 __libc_start_main + 245\n6    tmpb5y0with                        0x0000560a634040f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0g3d8t0d.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if i > 0 && str1[str1.index(str1.startIndex, offsetBy: i)].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for char in str {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpfvltvaqn/tmpfvltvaqn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc1d804c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc1d4fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc1d4fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc1d4fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfvltvaqn                        0x0000560f56d6b767 <unavailable> + 5991\n5    libc.so.6                          0x00002adc1d9f0460 __libc_start_main + 245\n6    tmpfvltvaqn                        0x0000560f56d6b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase && i > 0 {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpu8e5lj02.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && i > 0 {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result.append(\" \")\n        }\n        result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp788r6_6a/tmp788r6_6a.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b153eab0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b153e7a7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b153e7a7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b153e7a67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp788r6_6a                        0x00005643bcbbc4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b153ec9c460 __libc_start_main + 245\n6    tmp788r6_6a                        0x00005643bcbbc0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str.append(\" \")\n        }\n        str.append(i)\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmphx7b8tb_/tmphx7b8tb_.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad75c43c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad7593ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad7593a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad759397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphx7b8tb_                        0x000055a60b70c4b7 <unavailable> + 5303\n5    libc.so.6                          0x00002aad75e2f460 __libc_start_main + 245\n6    tmphx7b8tb_                        0x000055a60b70c0f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev = char\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpguox0qzb/tmpguox0qzb.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c0d998c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c0d68fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c0d68f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c0d68e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpguox0qzb                        0x00005611270777c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b7c0db84460 __libc_start_main + 245\n6    tmpguox0qzb                        0x0000561127077409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmprep72i2o/tmprep72i2o.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6df909cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6df8d93b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6df8d93988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6df8d927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprep72i2o                        0x00005621d87304b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6df9288460 __libc_start_main + 245\n6    tmprep72i2o                        0x00005621d87300f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev_char.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev_char = char\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2 += \" \"\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpkwjdf7pg.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            if i != 0 {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n            if i + 1 < str.count {\n                if str[i + 1].isLowercase {\n                    str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n                    i += 1\n                }\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpuf1ppnou.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuf1ppnou.swift:13:20: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n                if str[i + 1].isLowercase {\n                   ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    for char in str2 {\n        if char != \" \" {\n            str3 += \"\\(char)\"\n        }\n    }\n    return str3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "tmp51t1rgia/tmp51t1rgia.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef540f5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef53decb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef53dec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef53deb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp51t1rgia                        0x0000564a8e41f947 <unavailable> + 6471\n5    libc.so.6                          0x00002aef542e1460 __libc_start_main + 245\n6    tmp51t1rgia                        0x0000564a8e41f499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpy9nnit27/tmpy9nnit27.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b476e1c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b476debbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b476debb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b476deba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy9nnit27                        0x000055c26db464b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b476e3b0460 __libc_start_main + 245\n6    tmpy9nnit27                        0x000055c26db460f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var i = 0\n    while i < str1.count {\n        if i == 0 {\n            str2.append(str1[i])\n        } else if str1[i].isUppercase && str1[i - 1].isLowercase {\n            str2.append(\" \")\n            str2.append(str1[i])\n        } else {\n            str2.append(str1[i])\n        }\n        i += 1\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpzr0i1wzc.swift:8:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str2.append(str1[i])\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzr0i1wzc.swift:9:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str1[i].isUppercase && str1[i - 1].isLowercase {\n                  ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzr0i1wzc.swift:9:42: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str1[i].isUppercase && str1[i - 1].isLowercase {\n                                         ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzr0i1wzc.swift:11:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str2.append(str1[i])\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzr0i1wzc.swift:13:25: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            str2.append(str1[i])\n                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \\(char)\")\n            }\n            prev_is_capital = true\n        } else {\n            str2.append(char)\n            prev_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpv8l7rzew/tmpv8l7rzew.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0395dbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0392d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba0392d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba0392d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv8l7rzew                        0x00005611ce84f7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002ba0397c7460 __libc_start_main + 245\n6    tmpv8l7rzew                        0x00005611ce84f409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpm13y6818/tmpm13y6818.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88aa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88799b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88799988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa887987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm13y6818                        0x0000560d11b7b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002afa88c8e460 __libc_start_main + 245\n6    tmpm13y6818                        0x0000560d11b7b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \")\n                str2.append(char)\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpb5y0with/tmpb5y0with.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad64c326c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad64c01db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad64c01d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad64c01c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5y0with                        0x0000560a634044b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad64c512460 __libc_start_main + 245\n6    tmpb5y0with                        0x0000560a634040f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if i != 0 && str1[str1.index(str1.startIndex, offsetBy: i)].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.lowercased()\n    var result = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if i == 0 {\n            result.append(str[index])\n        } else {\n            let prevIndex = str.index(str.startIndex, offsetBy: i-1)\n            if str[index] >= \"a\" && str[index] <= \"z\" {\n                result.append(str[index])\n            } else if str[prevIndex] >= \"a\" && str[prevIndex] <= \"z\" {\n                result.append(\" \")\n                result.append(str[index])\n            } else {\n                result.append(str[index])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmps6eui92a/tmps6eui92a.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add6cb34c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add6c82bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add6c82b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add6c82a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps6eui92a                        0x000055f670e5e8a7 <unavailable> + 6311\n5    libc.so.6                          0x00002add6cd20460 __libc_start_main + 245\n6    tmps6eui92a                        0x000055f670e5e4e9 <unavailable> + 5353\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    for i in 0..<str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if i == 0 {\n            result.append(str[index])\n        } else {\n            let previousIndex = str.index(str.startIndex, offsetBy: i-1)\n            if str[index].isUppercase && str[previousIndex].isLowercase {\n                result.append(\" \")\n                result.append(str[index])\n            } else {\n                result.append(str[index])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0g3d8t0d.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev_char.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev_char = char\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str += \" \"\n        }\n        str += String(str1[i])\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpcfpkrdp9/tmpcfpkrdp9.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1eb766cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1eb7363b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1eb7363988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1eb73627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfpkrdp9                        0x000055d5d9820697 <unavailable> + 5783\n5    libc.so.6                          0x00002b1eb7858460 __libc_start_main + 245\n6    tmpcfpkrdp9                        0x000055d5d98202d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.indices {\n        if str1[i].isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(str1[i])\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpzqas1spq/tmpzqas1spq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96f57bdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96f54b4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b96f54b4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b96f54b37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzqas1spq                        0x0000556839352697 <unavailable> + 5783\n5    libc.so.6                          0x00002b96f59a9460 __libc_start_main + 245\n6    tmpzqas1spq                        0x00005568393522d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0g3d8t0d.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    var str4 = \"\"\n    var str5 = \"\"\n    var str6 = \"\"\n    var str7 = \"\"\n    var str8 = \"\"\n    var str9 = \"\"\n    var str10 = \"\"\n    var str11 = \"\"\n    var str12 = \"\"\n    var str13 = \"\"\n    var str14 = \"\"\n    var str15 = \"\"\n    var str16 = \"\"\n    var str17 = \"\"\n    var str18 = \"\"\n    var str19 = \"\"\n    var str20 = \"\"\n    var str21 = \"\"\n    var str22 = \"\"\n    var str23 = \"\"\n    var str24 = \"\"\n    var str25 = \"\"\n    var str26 = \"\"\n    var str27 = \"\"\n    var str28 = \"\"\n    var str29 = \"\"\n    var str30 = \"\"\n    var str31 = \"\"\n    var str32 = \"\"\n    var str33 = \"\"\n    var str34 = \"\"\n    var str35 = \"\"\n    var str36 = \"\"\n    var str37 = \"\"\n    var str38 = \"\"\n    var str39 = \"\"\n    var str40 = \"\"\n    var str41 = \"\"\n    var str42 = \"\"\n    var str43 = \"\"\n    var str44 = \"\"\n    var str45 = \"\"\n    var str46 = \"\"\n    var str47 = \"\"\n    var str48 = \"\"\n    var str49 = \"\"\n    var str50 = \"\"\n    var str51 = \"\"\n    var str52 = \"\"\n    var str53 = \"\"\n    var str54 = \"\"\n    var str55 = \"\"\n    var str56 = \"\"\n    var str57 = \"\"\n    var str58 = \"\"\n    var str59 = \"\"\n    var str60 = \"\"\n    var str61 = \"\"\n    var str62 = \"\"\n    var str63 = \"\"\n    var str64 = \"\"\n    var str65 = \"\"\n    var str66 = \"\"\n    var str67 = \"\"\n    var str68 = \"\"\n    var str69 = \"\"\n    var str70 = \"\"\n    var str71 = \"\"\n    var str72 = \"\"\n    var str73 = \"\"\n    var str74 = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpyidd8pih.swift:4:9: warning: initialization of variable 'str2' was never used; consider replacing with assignment to '_' or removing it\n    var str2 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:5:9: warning: initialization of variable 'str3' was never used; consider replacing with assignment to '_' or removing it\n    var str3 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:6:9: warning: initialization of variable 'str4' was never used; consider replacing with assignment to '_' or removing it\n    var str4 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:7:9: warning: initialization of variable 'str5' was never used; consider replacing with assignment to '_' or removing it\n    var str5 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:8:9: warning: initialization of variable 'str6' was never used; consider replacing with assignment to '_' or removing it\n    var str6 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:9:9: warning: initialization of variable 'str7' was never used; consider replacing with assignment to '_' or removing it\n    var str7 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:10:9: warning: initialization of variable 'str8' was never used; consider replacing with assignment to '_' or removing it\n    var str8 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:11:9: warning: initialization of variable 'str9' was never used; consider replacing with assignment to '_' or removing it\n    var str9 = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpyidd8pih.swift:12:9: warning: initialization of variable 'str10' was never used; consider replacing with assignment to '_' or removing it\n    var str10 = \"\"\n    ~~~~^~~~~\n    _\n/tmp/tmpyidd8pih.swift:13:9: warning: initialization of variable 'str11' was never used; consider replacing with assignment to '_' or removing it\n    var str11 = \"\"\n    ~~~~^~~~~\n    _\n/tmp/tmpyidd8pih.swift:14:9: warning: initialization of variable 'str12' was never used; consider replacing with assignment to '_' or removing it\n    var str12 = \"\"\n    ~~~~^~~~~\n    _\n/tmp/tmpyidd8pih.swift:15:9: warning: initi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if prev_char_is_capital {\n                str2.append(char)\n            } else {\n                str2.append(\" \")\n                str2.append(char)\n            }\n            prev_char_is_capital = true\n        } else {\n            str2.append(char)\n            prev_char_is_capital = false\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpb5y0with/tmpb5y0with.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad64c326c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad64c01db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad64c01d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad64c01c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb5y0with                        0x0000560a634044b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad64c512460 __libc_start_main + 245\n6    tmpb5y0with                        0x0000560a634040f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count - 1 {\n        if str[i].isUppercase && str[i + 1].isLowercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i + 1))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0snqumax.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0snqumax.swift:7:34: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase && str[i + 1].isLowercase {\n                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpkxot36zt/tmpkxot36zt.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1ec0bf9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1ec08f0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1ec08f0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1ec08ef7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkxot36zt                        0x0000561ff2af34b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b1ec0de5460 __libc_start_main + 245\n6    tmpkxot36zt                        0x0000561ff2af30f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if i == 0 {\n            str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n        }\n        else if str1[str1.index(str1.startIndex, offsetBy: i)] == \" \" {\n            str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n        }\n        else if str1[str1.index(str1.startIndex, offsetBy: i)] == str1[str1.index(str1.startIndex, offsetBy: i)].uppercased() {\n            str2.append(\" \")\n            str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n        }\n        else {\n            str2.append(str1[str1.index(str1.startIndex, offsetBy: i)])\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmplx6rw86e.swift:12:21: error: subscript 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n        else if str1[str1.index(str1.startIndex, offsetBy: i)] == str1[str1.index(str1.startIndex, offsetBy: i)].uppercased() {\n                    ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            if i != 0 {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.components(separatedBy: \" \")\n    var newStr = \"\"\n    for i in 0..<str.count {\n        if str[i].first?.isUppercase == true {\n            newStr += \" \"\n        }\n        newStr += str[i]\n    }\n    return newStr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpfitjdxgz.swift:4:20: error: value of type 'String' has no member 'components'\n    let str = str1.components(separatedBy: \" \")\n              ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str += \" \\(char)\"\n        } else {\n            str += \"\\(char)\"\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpqr8sut4w/tmpqr8sut4w.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2aad216c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2aacf0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2aacf0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2aacf0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqr8sut4w                        0x0000561332c2b767 <unavailable> + 5991\n5    libc.so.6                          0x00002b2aad402460 __libc_start_main + 245\n6    tmpqr8sut4w                        0x0000561332c2b3a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var result = \"\"\n    var i = 0\n    while i < str.count {\n        if i == 0 {\n            result.append(str[i])\n        } else if str[i].isUppercase {\n            result.append(\" \")\n            result.append(str[i])\n        } else {\n            result.append(str[i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpig17kmog.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpig17kmog.swift:10:19: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        } else if str[i].isUppercase {\n                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpig17kmog.swift:12:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpig17kmog.swift:14:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            result.append(str[i])\n                          ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpig17kmog.swift:4:9: warning: variable 'str' was never mutated; consider changing to 'let' constant\n    var str = str1\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    var is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if !is_capital {\n                str.append(\" \")\n            }\n            is_capital = true\n        } else {\n            is_capital = false\n        }\n        str.append(char)\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpz_dyc_tz/tmpz_dyc_tz.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad893e92c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad893b89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad893b89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad893b887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz_dyc_tz                        0x0000562053e504b7 <unavailable> + 5303\n5    libc.so.6                          0x00002ad89407e460 __libc_start_main + 245\n6    tmpz_dyc_tz                        0x0000562053e500f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.replacingOccurrences(of: \" \", with: \"\")\n    var result = \"\"\n    for char in str {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmp2ob5j2ke.swift:4:20: error: value of type 'String' has no member 'replacingOccurrences'\n    let str = str1.replacingOccurrences(of: \" \", with: \"\")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var str = str1\n    while str.count > 0 {\n        if str.first!.isUppercase {\n            result.append(\" \")\n        }\n        result.append(str.first!)\n        str.removeFirst()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpsos87ln_/tmpsos87ln_.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28cdf30c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28cdc27b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28cdc27988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28cdc267b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsos87ln_                        0x000055b8fdfab657 <unavailable> + 5719\n5    libc.so.6                          0x00002b28ce11c460 __libc_start_main + 245\n6    tmpsos87ln_                        0x000055b8fdfab299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    var prev_char = Character(\" \")\n    for char in str1 {\n        if char.isUppercase && prev_char.isLowercase {\n            str2.append(\" \")\n        }\n        str2.append(char)\n        prev_char = char\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if str2.count > 0 && char.isUppercase && str2.last!.isLetter {\n            str2.append(\" \")\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = str1\n    var i = 0\n    while i < str2.count {\n        if str2[i].isUppercase {\n            if i == 0 {\n                str2.insert(\" \", at: str2.index(str2.startIndex, offsetBy: i))\n                i += 2\n            } else if str2[i - 1].isUppercase {\n                i += 1\n            } else {\n                str2.insert(\" \", at: str2.index(str2.startIndex, offsetBy: i))\n                i += 2\n            }\n        } else {\n            i += 1\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpmogf0pu7.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str2[i].isUppercase {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmogf0pu7.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            } else if str2[i - 1].isUppercase {\n                      ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for (index, char) in str1.enumerated() {\n        if index > 0 && char.isUppercase && str1[str1.index(str1.startIndex, offsetBy: index - 1)].isLowercase {\n            result += \" \"\n        }\n        result += String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1.characters {\n        if i.isUppercase {\n            str2.append(\" \")\n        }\n        str2.append(i)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp0g3d8t0d.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(\" \\(char)\")\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpogn87vx2/tmpogn87vx2.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00f0c11c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00f0908b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00f0908988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00f09077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpogn87vx2                        0x0000562fd16b27c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b00f0dfd460 __libc_start_main + 245\n6    tmpogn87vx2                        0x0000562fd16b2409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            result += \" \\(char)\"\n        } else {\n            result += \"\\(char)\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmpjlxif5lu/tmpjlxif5lu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7f01c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7efebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7efebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7efebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjlxif5lu                        0x0000561fd1d77767 <unavailable> + 5991\n5    libc.so.6                          0x00002ad7f03b2460 __libc_start_main + 245\n6    tmpjlxif5lu                        0x0000561fd1d773a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \"\n        }\n        str2 += \"\\(char)\"\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpvgtc73pq/tmpvgtc73pq.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b909712ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9096e25b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9096e25988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9096e247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvgtc73pq                        0x0000561332554767 <unavailable> + 5991\n5    libc.so.6                          0x00002b909731a460 __libc_start_main + 245\n6    tmpvgtc73pq                        0x00005613325543a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var previous_char_is_capital = false\n    for char in str1 {\n        if char.isUppercase {\n            if previous_char_is_capital {\n                result.append(char)\n            } else {\n                result.append(\" \\(char)\")\n            }\n            previous_char_is_capital = true\n        } else {\n            result.append(char)\n            previous_char_is_capital = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmpp4tism8i/tmpp4tism8i.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9398c6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9398965b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9398965988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93989647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp4tism8i                        0x0000560a369837c7 <unavailable> + 6087\n5    libc.so.6                          0x00002b9398e5a460 __libc_start_main + 245\n6    tmpp4tism8i                        0x0000560a36983409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    let str = str1.lowercased()\n    var result = \"\"\n    for (index, char) in str.enumerated() {\n        if index == 0 {\n            result.append(char)\n        } else {\n            if str[str.index(str.startIndex, offsetBy: index - 1)] == \" \" {\n                result.append(char)\n            } else if char.isUppercase {\n                result.append(\" \\(char)\")\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "tmp3u1cfjgv/tmp3u1cfjgv.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad0fc3ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad0fc0e3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad0fc0e3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0fc0e27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3u1cfjgv                        0x0000559093cb5be7 <unavailable> + 7143\n5    libc.so.6                          0x00002ad0fc5d8460 __libc_start_main + 245\n6    tmp3u1cfjgv                        0x0000559093cb5829 <unavailable> + 6185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            if i != 0 {\n                str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n                i += 1\n            }\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "/tmp/tmpsuf0xkth.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "tmpedam4nzd/tmpedam4nzd.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6b23bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6b20b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6b20b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6b20b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpedam4nzd                        0x0000557d136e75b7 <unavailable> + 5559\n5    libc.so.6                          0x00002ad6b25a7460 __libc_start_main + 245\n6    tmpedam4nzd                        0x0000557d136e71f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var result = \"\"\n    var isFirstCapital = true\n    for char in str1 {\n        if char.isUppercase {\n            if isFirstCapital {\n                result.append(char)\n                isFirstCapital = false\n            } else {\n                result.append(\" \\(char)\")\n            }\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += \" \\(char)\"\n        } else {\n            str2 += \"\\(char)\"\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510427,
      "stdout": "",
      "stderr": "tmppcjcsmv7/tmppcjcsmv7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac12b941c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac12b638b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac12b638988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac12b6377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppcjcsmv7                        0x00005634a59c7767 <unavailable> + 5991\n5    libc.so.6                          0x00002ac12bb2d460 __libc_start_main + 245\n6    tmppcjcsmv7                        0x00005634a59c73a9 <unavailable> + 5033\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.insert(\" \", at: str.index(str.startIndex, offsetBy: i))\n            i += 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "/tmp/tmpumhey8x_.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(\" \\(char)\")\n        } else {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(capital_words_spaces(str1: \"Python\") == \"Python\")\nassert(capital_words_spaces(str1: \"PythonProgrammingExamples\") == \"Python Programming Examples\")\nassert(capital_words_spaces(str1: \"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\")",
      "timestamp": 1665510428,
      "stdout": "",
      "stderr": "tmpm13y6818/tmpm13y6818.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa88aa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa88799b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa88799988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa887987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm13y6818                        0x0000560d11b7b7c7 <unavailable> + 6087\n5    libc.so.6                          0x00002afa88c8e460 __libc_start_main + 245\n6    tmpm13y6818                        0x0000560d11b7b409 <unavailable> + 5129\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}