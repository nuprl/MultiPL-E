{
  "name": "mbpp_281_all_unique",
  "language": "swift",
  "prompt": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    for i in test_list {\n        if test_list.filter({$0 == i}).count > 1 {\n            unique = false\n            break\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for i in test_list {\n        if test_set.contains(i) {\n            unique = false\n            break\n        } else {\n            test_set.insert(i)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_set: Set<Int> = []\n    for item in test_list {\n        if unique_set.contains(item) {\n            return false\n        }\n        unique_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var i = 0\n    while i < test_list.count {\n        var j = i + 1\n        while j < test_list.count {\n            if test_list[i] == test_list[j] {\n                unique = false\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            unique = false\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var seen = [Int: Bool]()\n    for i in test_list {\n        if seen[i] != nil {\n            unique = false\n            break\n        }\n        seen[i] = true\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in test_list {\n        if set.contains(item) {\n            return false\n        } else {\n            set.insert(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            unique = false\n            break\n        }\n        test_set.insert(item)\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for num in test_list {\n        if unique_list.contains(num) {\n            return false\n        } else {\n            unique_list.append(num)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_set = Set<Int>()\n    for i in test_list {\n        if unique_set.contains(i) {\n            return false\n        }\n        unique_set.insert(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for i in test_list {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = Set<Int>()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set: Set<Int> = Set()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_set = Set<Int>()\n    for element in test_list {\n        if unique_set.contains(element) {\n            return false\n        } else {\n            unique_set.insert(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var seen = [Int: Bool]()\n    for item in test_list {\n        if seen[item] == nil {\n            seen[item] = true\n        } else {\n            unique = false\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in test_list {\n        if set.contains(item) {\n            return false\n        }\n        set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<test_list.count {\n        for j in 0..<test_list.count {\n            if i != j && test_list[i] == test_list[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for element in test_list {\n        if !unique_list.contains(element) {\n            unique_list.append(element)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<test_list.count {\n        for j in 0..<test_list.count {\n            if i != j {\n                if test_list[i] == test_list[j] {\n                    unique = false\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            unique = false\n            break\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            unique = false\n            break\n        }\n        test_set.insert(item)\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = Set<Int>()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.insert(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in test_list {\n        if set.contains(item) {\n            return false\n        }\n        set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in test_list {\n        if seen.contains(num) {\n            return false\n        }\n        seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    for i in 0..<test_list.count {\n        for j in 0..<test_list.count {\n            if i != j {\n                if test_list[i] == test_list[j] {\n                    unique = false\n                    break\n                }\n            }\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if !unique_list.contains(element) {\n            unique_list.append(element)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            return false\n        }\n        test_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for item in test_list {\n        if seen.contains(item) {\n            return false\n        }\n        seen.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_set = Set<Int>()\n    for element in test_list {\n        if unique_set.contains(element) {\n            return false\n        }\n        unique_set.insert(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        unique_list.append(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        }\n        test_set.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list: [Int] = []\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique = true\n    var test_set = Set<Int>()\n    for element in test_list {\n        if test_set.contains(element) {\n            unique = false\n            break\n        }\n        test_set.insert(element)\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for item in test_list {\n        if test_set.contains(item) {\n            return false\n        } else {\n            test_set.insert(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        }\n        unique_list.append(element)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    return Set(test_list).count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        }\n        unique_list.append(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if unique_list.contains(i) {\n            return false\n        } else {\n            unique_list.append(i)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        }\n        else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for i in test_list {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    return unique_list.count == test_list.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var test_set = Set<Int>()\n    for i in test_list {\n        if test_set.contains(i) {\n            return false\n        }\n        test_set.insert(i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for element in test_list {\n        if unique_list.contains(element) {\n            return false\n        } else {\n            unique_list.append(element)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for item in test_list {\n        if seen.contains(item) {\n            return false\n        }\n        seen.insert(item)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list: [Int]) -> Bool {\n    var unique_list = [Int]()\n    for item in test_list {\n        if unique_list.contains(item) {\n            return false\n        } else {\n            unique_list.append(item)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(all_unique(test_list: [1, 2, 3]) == true)\nassert(all_unique(test_list: [1, 2, 1, 2]) == false)\nassert(all_unique(test_list: [1, 2, 3, 4, 5]) == true)",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}