{
  "name": "mbpp_256_count_Primes_nums",
  "language": "swift",
  "prompt": "\n/// Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunc count_Primes_nums(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Primes_nums(n: 5) == 2)\nassert(count_Primes_nums(n: 10) == 4)\nassert(count_Primes_nums(n: 100) == 25)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    guard n > 1 else { return 0 }\n    var isPrime = [Bool](repeating: true, count: n)\n    isPrime[0] = false\n    isPrime[1] = false\n    for i in 2..<n {\n        if isPrime[i] {\n            for j in stride(from: i*i, to: n, by: i) {\n                isPrime[j] = false\n            }\n        }\n    }\n    return isPrime.filter{ $0 }.count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(num: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(num: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    if n <= 2 {\n        return 0\n    }\n    for i in 2..<n {\n        if isPrime(num: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_Prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    if n < 2 {\n        return 0\n    }\n    var isPrime = [Bool](repeating: true, count: n)\n    var count = 0\n    for i in 2..<n {\n        if isPrime[i] {\n            count += 1\n            var j = 2\n            while i * j < n {\n                isPrime[i * j] = false\n                j += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_Prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_Prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_Prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if is_Prime(num: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0...n {\n        if is_Prime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 2..<n {\n        if isPrime(n: i) {\n            count += 1\n        }\n    }\n    return count"
  ]
}