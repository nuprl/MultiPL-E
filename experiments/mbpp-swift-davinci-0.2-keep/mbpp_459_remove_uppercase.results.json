{
  "name": "mbpp_459_remove_uppercase",
  "language": "swift",
  "prompt": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpuamzppsh.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuamzppsh.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for char in str1 {\n        if char.isUppercase {\n            str.remove(at: str.firstIndex(of: char)!)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char.lowercased())\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpayds98y1/tmpayds98y1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15f36e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b15f33d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b15f33d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15f33d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayds98y1                        0x0000558db4fa5517 <unavailable> + 5399\n5    libc.so.6                          0x00002b15f38cc460 __libc_start_main + 245\n6    tmpayds98y1                        0x0000558db4fa5159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isLowercase {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpyzl6rrs5/tmpyzl6rrs5.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0189539c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0189230b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0189230988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b018922f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyzl6rrs5                        0x000055e4a71a5357 <unavailable> + 4951\n5    libc.so.6                          0x00002b0189725460 __libc_start_main + 245\n6    tmpyzl6rrs5                        0x000055e4a71a4f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for char in str1 {\n        if char.isUppercase {\n            str.remove(at: str.firstIndex(of: char)!)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n            i -= 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isLowercase {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for i in 0..<str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "/tmp/tmpa0i8pv7n.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa0i8pv7n.swift:6:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpuamzppsh.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuamzppsh.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for char in str1 {\n        if char.isUppercase {\n            str.remove(at: str.firstIndex(of: char)!)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmplcus3dv3.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n            i -= 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpnzbjjlvj.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnzbjjlvj.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isLowercase {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !(char >= \"A\" && char <= \"Z\") {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.filter { $0.isLowercase }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += String(i).lowercased()\n        }\n        else {\n            str2 += String(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "tmpuv3a_ftr/tmpuv3a_ftr.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b665c625c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b665c31cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b665c31c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b665c31b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuv3a_ftr                        0x0000561f6cf47517 <unavailable> + 5399\n5    libc.so.6                          0x00002b665c811460 __libc_start_main + 245\n6    tmpuv3a_ftr                        0x0000561f6cf47159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for i in str.characters {\n        if i >= \"A\" && i <= \"Z\" {\n            str.remove(at: str.characters.index(of: i)!)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "/tmp/tmpamtfwgi_.swift:5:18: error: 'characters' is unavailable: Please use String directly\n    for i in str.characters {\n                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpamtfwgi_.swift:7:32: error: 'characters' is unavailable: Please use String directly\n            str.remove(at: str.characters.index(of: i)!)\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpamtfwgi_.swift:7:43: warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            str.remove(at: str.characters.index(of: i)!)\n                                          ^\n/tmp/tmpamtfwgi_.swift:7:43: note: use 'firstIndex(of:)' instead\n            str.remove(at: str.characters.index(of: i)!)\n                                          ^~~~~\n                                          firstIndex\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmplcus3dv3.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "/tmp/tmp3k38musx.swift:4:21: error: value of type 'String' has no member 'replacingOccurrences'\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3k38musx.swift:4:75: error: cannot infer contextual base in reference to member 'regularExpression'\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                         ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpyzl6rrs5/tmpyzl6rrs5.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0189539c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0189230b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0189230988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b018922f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyzl6rrs5                        0x000055e4a71a5357 <unavailable> + 4951\n5    libc.so.6                          0x00002b0189725460 __libc_start_main + 245\n6    tmpyzl6rrs5                        0x000055e4a71a4f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.filter { $0.isLowercase }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char.lowercased())\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpayds98y1/tmpayds98y1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15f36e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b15f33d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b15f33d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15f33d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayds98y1                        0x0000558db4fa5517 <unavailable> + 5399\n5    libc.so.6                          0x00002b15f38cc460 __libc_start_main + 245\n6    tmpayds98y1                        0x0000558db4fa5159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var new_str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            new_str += String(char).lowercased()\n        } else {\n            new_str += String(char)\n        }\n    }\n    return new_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "tmpdq7ek9p7/tmpdq7ek9p7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d02907c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d025feb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d025fe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d025fd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdq7ek9p7                        0x000056039477b517 <unavailable> + 5399\n5    libc.so.6                          0x00002b9d02af3460 __libc_start_main + 245\n6    tmpdq7ek9p7                        0x000056039477b159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2.append(c.lowercased())\n        } else {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "tmpheraznr_/tmpheraznr_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b09f9ea6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b09f9b9db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b09f9b9d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b09f9b9c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpheraznr_                        0x0000557ce6e2f517 <unavailable> + 5399\n5    libc.so.6                          0x00002b09fa092460 __libc_start_main + 245\n6    tmpheraznr_                        0x0000557ce6e2f159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            continue\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for ch in str1 {\n        if !(ch >= \"A\" && ch <= \"Z\") {\n            str2.append(ch)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmplcus3dv3.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpiec3hpjt/tmpiec3hpjt.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afeb9644c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afeb933bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afeb933b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afeb933a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiec3hpjt                        0x0000556e81787467 <unavailable> + 5223\n5    libc.so.6                          0x00002afeb9830460 __libc_start_main + 245\n6    tmpiec3hpjt                        0x0000556e817870a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2 += String(c).lowercased()\n        } else {\n            str2 += String(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "tmpps4nbt5f/tmpps4nbt5f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b635594ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6355641b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6355641988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63556407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpps4nbt5f                        0x00005578cae0a517 <unavailable> + 5399\n5    libc.so.6                          0x00002b6355b36460 __libc_start_main + 245\n6    tmpps4nbt5f                        0x00005578cae0a159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(i)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "/tmp/tmpde5f4awg.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for ch in str1 {\n        if ch.isLowercase {\n            str2.append(ch)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpa0ak8bqa.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0ak8bqa.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for char in str1 {\n        if char.isUppercase {\n            str.remove(at: str.firstIndex(of: char)!)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp42gsj9k1/tmp42gsj9k1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99d984ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99d9541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99d9541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99d95407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42gsj9k1                        0x0000564357db74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b99d9a36460 __libc_start_main + 245\n6    tmp42gsj9k1                        0x0000564357db70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.filter { $0.isLowercase }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isLowercase {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp42gsj9k1/tmp42gsj9k1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99d984ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99d9541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99d9541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99d95407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42gsj9k1                        0x0000564357db74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b99d9a36460 __libc_start_main + 245\n6    tmp42gsj9k1                        0x0000564357db70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpyzl6rrs5/tmpyzl6rrs5.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0189539c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0189230b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0189230988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b018922f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyzl6rrs5                        0x000055e4a71a5357 <unavailable> + 4951\n5    libc.so.6                          0x00002b0189725460 __libc_start_main + 245\n6    tmpyzl6rrs5                        0x000055e4a71a4f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for char in str.characters {\n        if char.isUppercase {\n            str = str.replacingOccurrences(of: String(char), with: \"\")\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "/tmp/tmpnfv7rhov.swift:5:21: error: 'characters' is unavailable: Please use String directly\n    for char in str.characters {\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnfv7rhov.swift:7:23: error: value of type 'String' has no member 'replacingOccurrences'\n            str = str.replacingOccurrences(of: String(char), with: \"\")\n                  ~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            continue\n        } else {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpe47pcq3q.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmplcus3dv3.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var result = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123148,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510184,
      "stdout": "",
      "stderr": "tmpa_19m88_/tmpa_19m88_.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab386867c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab38655eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab38655e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab38655d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa_19m88_                        0x000055a4b30de517 <unavailable> + 5399\n5    libc.so.6                          0x00002ab386a53460 __libc_start_main + 245\n6    tmpa_19m88_                        0x000055a4b30de159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}