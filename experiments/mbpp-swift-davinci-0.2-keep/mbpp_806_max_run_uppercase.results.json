{
  "name": "mbpp_806_max_run_uppercase",
  "language": "swift",
  "prompt": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpxuw0sl1y.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp2y09d6ti.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp0hx5w3hd.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmparfxo421.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            cur_run = 0\n        }\n        if cur_run > max_run {\n            max_run = cur_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp8abnuh2v.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmptwa6s3n6.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptwa6s3n6.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp1zbnhfx0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    max_run = max(max_run, cur_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmpz9wohr9l.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpvkl3i2oz.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpc1dwfo7q.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpqdu_gerf.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmpnfh7lomn.swift:7:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp7v0_7zc2.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(current_run, max_run)\n            current_run = 0\n        }\n    }\n    return max(current_run, max_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp5r0fui1m.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_count = 0\n    var count = 0\n    for char in test_str {\n        if char.isUppercase {\n            count += 1\n        } else {\n            count = 0\n        }\n        if count > max_count {\n            max_count = count\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpchn5czi0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var curr_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            curr_run += 1\n        } else {\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n        }\n    }\n    return max(max_run, curr_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwin2cszx.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp4wvl4qce.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4wvl4qce.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str {\n        if char.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpl98ryy0h.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpl98ryy0h.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwin2cszx.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp9pu57yxb.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_count = 0\n    var current_count = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_count += 1\n        } else {\n            if current_count > max_count {\n                max_count = current_count\n            }\n            current_count = 0\n        }\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmptk8ujz5b.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp7v0_7zc2.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmparfxo421.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    \n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmprohnzy7_.swift:7:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprohnzy7_.swift:8:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi9ms5wpw.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase() {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp6xxds3ht.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6xxds3ht.swift:7:17: error: cannot call value of non-function type 'Bool'\n        if char.isUppercase() {\n                ^          ~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    return max(max_run, run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmpgyem0czn.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp524l8mfn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp524l8mfn.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    max_run = max(max_run, current_run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpc1dwfo7q.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmppxjv13yr.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmppxjv13yr.swift:7:14: error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper {\n           ~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp524l8mfn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp524l8mfn.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1o47mlvz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            max_run = max(max_run, current_run)\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            run = 0\n        }\n        if run > max_run {\n            max_run = run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp1zbnhfx0.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp7v0_7zc2.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    max_run = max(max_run, run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpyv6d8j0w.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp1xkk9n8a.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            max_run = max(max_run, cur_run)\n            cur_run = 0\n        }\n    }\n    return max(max_run, cur_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp5gex48bo.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var curr_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            curr_run += 1\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n        } else {\n            curr_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpry8g8bny.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    let str_arr = Array(test_str)\n    var max_run = 0\n    var current_run = 0\n    for char in str_arr {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp524l8mfn.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp524l8mfn.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpqdu_gerf.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpry8g8bny.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_count = 0\n    var count = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            count += 1\n        } else {\n            if count > max_count {\n                max_count = count\n            }\n            count = 0\n        }\n    }\n    if count > max_count {\n        max_count = count\n    }\n    return max_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmps8lxhl2_.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpi56qjnkz.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpo2y25p2s.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmp5gex48bo.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmp_h15p862.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpt8qr28em.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for c in test_str {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            max_run = max(max_run, run)\n            run = 0\n        }\n    }\n    max_run = max(max_run, run)\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp7kne3efl.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmparfxo421.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            current_run = 0\n        }\n        if current_run > max_run {\n            max_run = current_run\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp4wvl4qce.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4wvl4qce.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    \n    for c in test_str.characters {\n        if c.isUppercase {\n            current_run += 1\n        } else {\n            max_run = max(max_run, current_run)\n            current_run = 0\n        }\n    }\n    \n    return max(max_run, current_run)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "/tmp/tmp24d8jvu4.swift:7:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510548,
      "stdout": "",
      "stderr": "/tmp/tmpe_3ot9po.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str.characters {\n        if char.isUpper {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpfiubnxgm.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpfiubnxgm.swift:7:17: error: value of type 'Character' has no member 'isUpper'\n        if char.isUpper {\n           ~~~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "tmpxwepz8fw/tmpxwepz8fw.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5a22ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5a1fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5a1fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5a1fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxwepz8fw                        0x00005616001ad41b <unavailable> + 5147\n5    libc.so.6                          0x00002ab5a24d8460 __libc_start_main + 245\n6    tmpxwepz8fw                        0x00005616001acff9 <unavailable> + 4089\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var cur_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123295,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var current_run = 0\n    for char in test_str {\n        if char.isUppercase {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for c in test_str.characters {\n        if c.isUppercase {\n            run += 1\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpqdu_gerf.swift:6:23: error: 'characters' is unavailable: Please use String directly\n    for c in test_str.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str: String) -> Int {\n    var max_run = 0\n    var run = 0\n    for char in test_str.characters {\n        if char.isUppercase {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    return max_run\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_run_uppercase(test_str: \"GeMKSForGERksISBESt\") == 5)\nassert(max_run_uppercase(test_str: \"PrECIOusMOVemENTSYT\") == 6)\nassert(max_run_uppercase(test_str: \"GooGLEFluTTER\") == 4)",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "/tmp/tmpwin2cszx.swift:6:26: error: 'characters' is unavailable: Please use String directly\n    for char in test_str.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}