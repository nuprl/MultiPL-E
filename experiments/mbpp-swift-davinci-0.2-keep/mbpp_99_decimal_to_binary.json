{
  "name": "mbpp_99_decimal_to_binary",
  "language": "swift",
  "prompt": "\n/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n: Int) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(n: 8) == \"1000\")\nassert(decimal_to_binary(n: 18) == \"10010\")\nassert(decimal_to_binary(n: 7) == \"111\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var n = n\n    var result = \"\"\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var n = n\n    var result = \"\"\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var n = n\n    var result = \"\"\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var n = n\n    var result = \"\"\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var result = \"\"\n    var n = n\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result",
    "    var n = n\n    var result = \"\"\n    while n > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    return result"
  ]
}