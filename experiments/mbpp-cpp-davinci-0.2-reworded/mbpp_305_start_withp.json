{
  "name": "mbpp_305_start_withp",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to return two words from a vector of words starting with letter 'p'.\nstd::string start_withp(std::vector<std::string> words) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = start_withp;\n    assert(candidate((std::vector<std::string>({(std::string)\"Python PHP\", (std::string)\"Java JavaScript\", (std::string)\"c c++\"}))) == std::make_tuple(\"Python\", \"PHP\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"Python Programming\", (std::string)\"Java Programming\"}))) == std::make_tuple(\"Python\", \"Programming\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"Pqrst Pqr\", (std::string)\"qrstuv\"}))) == std::make_tuple(\"Pqrst\", \"Pqr\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i];\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    int count = 0;\n    for(int i = 0; i < words.size(); i++) {\n        if(words[i][0] == 'p') {\n            result += words[i];\n            count++;\n            if(count == 2) {\n                break;\n            }\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i][0] == 'p') {\n            result += words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(std::string word : words) {\n        if(word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result+=words[i];\n            result+=\" \";\n        }\n    }\n    return result;",
    "  std::string result;\n  for(auto word: words) {\n    if(word[0] == 'p') {\n      result += word + \" \";\n    }\n  }\n  return result;",
    "\tstd::string result;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t}\n\treturn result;",
    "\tstd::vector<std::string> result;\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tif (words[i][0] == 'p') {\n\t\t\tresult.push_back(words[i]);\n\t\t}\n\t}\n\treturn result[0] + \" \" + result[1];",
    "    std::string result = \"\";\n    for (std::string word : words) {\n        if (word[0] == 'p') {\n            result += word + \" \";\n        }\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i=0;i<words.size();i++){\n        if(words[i][0]=='p'){\n            result.push_back(words[i]);\n        }\n    }\n    return result[0]+\" \"+result[1];",
    "    std::string result;\n    for(int i=0;i<words.size();i++) {\n        if(words[i][0]=='p') {\n            result = result + words[i] + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<words.size();i++)\n    {\n        if(words[i][0]=='p')\n        {\n            result+=words[i];\n            result+=\" \";\n        }\n    }\n    return result;",
    "  std::string result = \"\";\n  for (int i = 0; i < words.size(); i++) {\n    if (words[i][0] == 'p') {\n      result += words[i] + \" \";\n    }\n  }\n  return result;"
  ]
}