{
  "name": "mbpp_120_max_product_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given vector.\nlong max_product_tuple(std::vector<long> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_product_tuple;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 7), (std::tuple<long, long>)std::make_tuple(2, 6), (std::tuple<long, long>)std::make_tuple(1, 8), (std::tuple<long, long>)std::make_tuple(4, 9)}))) == (36));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 20), (std::tuple<long, long>)std::make_tuple(15, 2), (std::tuple<long, long>)std::make_tuple(5, 10)}))) == (200));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(11, 44), (std::tuple<long, long>)std::make_tuple(10, 15), (std::tuple<long, long>)std::make_tuple(20, 5), (std::tuple<long, long>)std::make_tuple(12, 9)}))) == (484));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    // Write your code here\n    long max_product = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        for(int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if(product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            list2.push_back(list1[i] * list1[j]);\n        }\n    }\n    std::sort(list2.begin(), list2.end());\n    return list2[list2.size() - 1];",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            list2.push_back(list1[i] * list1[j]);\n        }\n    }\n    std::sort(list2.begin(), list2.end());\n    return list2[list2.size() - 1];",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            list2.push_back(list1[i] * list1[j]);\n        }\n    }\n    long max = list2[0];\n    for (int i = 1; i < list2.size(); i++) {\n        if (max < list2[i]) {\n            max = list2[i];\n        }\n    }\n    return max;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        list2.push_back(list1[i] * list1[i + 1]);\n    }\n    std::sort(list2.begin(), list2.end());\n    return list2[list2.size() - 1];",
    "  long max_product = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      long product = list1[i] * list1[j];\n      if (product > max_product) {\n        max_product = product;\n      }\n    }\n  }\n  return max_product;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i+1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "  long max_product = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      long product = list1[i] * list1[j];\n      if (product > max_product) {\n        max_product = product;\n      }\n    }\n  }\n  return max_product;",
    "  long max_product = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      long product = list1[i] * list1[j];\n      if (product > max_product) {\n        max_product = product;\n      }\n    }\n  }\n  return max_product;",
    "    int n = list1.size();\n    long max_product = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            long product = std::abs(list1[i] * list1[j]);\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    long max_product = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        for (int j = i + 1; j < list1.size(); j++) {\n            if (list1[i] * list1[j] > max_product) {\n                max_product = list1[i] * list1[j];\n            }\n        }\n    }\n    return max_product;",
    "    // Write your code here\n    long max_product = 0;\n    for(int i = 0; i < list1.size(); i++) {\n        for(int j = i+1; j < list1.size(); j++) {\n            long product = list1[i] * list1[j];\n            if(product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "  long max_product = 0;\n  for (int i = 0; i < list1.size(); i++) {\n    for (int j = i + 1; j < list1.size(); j++) {\n      long product = list1[i] * list1[j];\n      if (product > max_product) {\n        max_product = product;\n      }\n    }\n  }\n  return max_product;"
  ]
}