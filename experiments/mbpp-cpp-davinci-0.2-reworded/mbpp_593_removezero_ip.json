{
  "name": "mbpp_593_removezero_ip",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove leading zeroes from an ip address.\nstd::string removezero_ip(std::string ip) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = removezero_ip;\n    assert(candidate((\"216.08.094.196\")) == (\"216.8.94.196\"));\n    assert(candidate((\"12.01.024\")) == (\"12.1.24\"));\n    assert(candidate((\"216.08.094.0196\")) == (\"216.8.94.196\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  std::string result = \"\";\n  int count = 0;\n  for(int i = 0; i < ip.size(); i++) {\n    if(ip[i] == '.') {\n      count = 0;\n    }\n    if(ip[i] == '0') {\n      count++;\n    }\n    if(ip[i] != '0') {\n      count = 0;\n    }\n    if(count < 2) {\n      result += ip[i];\n    }\n  }\n  return result;",
    "    std::stringstream ss(ip);\n    std::string temp;\n    std::string res;\n    while(std::getline(ss, temp, '.')) {\n        int num = std::stoi(temp);\n        res += std::to_string(num);\n        res += '.';\n    }\n    res.pop_back();\n    return res;",
    "    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0,1);\n        }\n        result += temp + \".\";\n    }\n    result.pop_back();\n    return result;",
    "    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    for(; i < ip.length(); i++) {\n        result.push_back(ip[i]);\n    }\n    return result;",
    "    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    return ip.substr(i);",
    "    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;",
    "    std::string res = \"\";\n    int len = ip.length();\n    int i = 0;\n    while(i < len && ip[i] == '0') {\n        i++;\n    }\n    while(i < len) {\n        res += ip[i];\n        i++;\n    }\n    return res;",
    "    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '.') {\n            count = 0;\n            res += ip[i];\n        }\n        else if(ip[i] == '0' && count == 0) {\n            continue;\n        }\n        else {\n            count++;\n            res += ip[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    int count = 0;\n    for(int i=0; i<ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for(int i=count; i<ip.length(); i++) {\n        res += ip[i];\n    }\n    return res;",
    "    std::string result = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.length(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    if(count == ip.length()) {\n        return \"0\";\n    }\n    for(int i = count; i < ip.length(); i++) {\n        result += ip[i];\n    }\n    return result;",
    "    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            token.erase(0, 1);\n        }\n        result += token + \".\";\n    }\n    result.erase(result.size() - 1, 1);\n    return result;",
    "    std::stringstream ss(ip);\n    std::string temp;\n    std::string result;\n    while(std::getline(ss, temp, '.')) {\n        if(temp.size() > 1 && temp[0] == '0') {\n            temp.erase(0, 1);\n        }\n        result += temp + \".\";\n    }\n    result.pop_back();\n    return result;",
    "    std::string res = \"\";\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    while(i < ip.size()) {\n        res += ip[i];\n        i++;\n    }\n    return res;",
    "    std::stringstream ss(ip);\n    std::string token;\n    std::string result;\n    while(std::getline(ss, token, '.')) {\n        if(token.size() > 1 && token[0] == '0') {\n            result += token.substr(1);\n        } else {\n            result += token;\n        }\n        result += '.';\n    }\n    result.pop_back();\n    return result;",
    "    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;",
    "    std::stringstream ss(ip);\n    std::string token;\n    std::string res;\n    while(std::getline(ss, token, '.')) {\n        int num = std::stoi(token);\n        res += std::to_string(num);\n        res += '.';\n    }\n    res.pop_back();\n    return res;",
    "    std::stringstream ss(ip);\n    std::string item;\n    std::string res;\n    while(std::getline(ss, item, '.')) {\n        if(item.length() > 1 && item[0] == '0') {\n            item = item.substr(1, item.length() - 1);\n        }\n        res += item;\n        res += '.';\n    }\n    res = res.substr(0, res.length() - 1);\n    return res;",
    "    std::string result;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    result = ip.substr(i);\n    return result;",
    "    std::string res = \"\";\n    int count = 0;\n    for(int i = 0; i < ip.size(); i++) {\n        if(ip[i] == '0') {\n            count++;\n        } else {\n            break;\n        }\n    }\n    for(int i = count; i < ip.size(); i++) {\n        res += ip[i];\n    }\n    return res;",
    "    std::string res;\n    int i = 0;\n    while(ip[i] == '0') {\n        i++;\n    }\n    res = ip.substr(i);\n    return res;"
  ]
}