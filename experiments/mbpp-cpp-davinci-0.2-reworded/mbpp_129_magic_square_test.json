{
  "name": "mbpp_129_magic_square_test",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to calculate whether the matrix is a magic square.\nbool magic_square_test(std::vector<std::vector<long>> my_matrix) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = magic_square_test;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7, (long)12, (long)1, (long)14}), (std::vector<long>)std::vector<long>({(long)2, (long)13, (long)8, (long)11}), (std::vector<long>)std::vector<long>({(long)16, (long)3, (long)10, (long)5}), (std::vector<long>)std::vector<long>({(long)9, (long)6, (long)15, (long)4})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)8})}))) == (true));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)6}), (std::vector<long>)std::vector<long>({(long)9, (long)5, (long)1}), (std::vector<long>)std::vector<long>({(long)4, (long)3, (long)7})}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    std::vector<long> row_sum(n, 0);\n    std::vector<long> col_sum(n, 0);\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n            col_sum[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                anti_diag_sum += my_matrix[i][j];\n            }\n        }\n    }\n    if (diag_sum != anti_diag_sum) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        if (row_sum[i] != col_sum[i] || row_sum[i] != diag_sum) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (int i = 0; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n        sum += my_matrix[0][i];\n    for(int i=0;i<n;i++){\n        int row_sum = 0;\n        for(int j=0;j<n;j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i=0;i<n;i++){\n        int col_sum = 0;\n        for(int j=0;j<n;j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum = 0;\n    for(int i=0;i<n;i++)\n        diag_sum += my_matrix[i][i];\n    if(diag_sum != sum)\n        return false;\n    diag_sum = 0;\n    for(int i=0;i<n;i++)\n        diag_sum += my_matrix[i][n-i-1];\n    if(diag_sum != sum)\n        return false;\n    return true;",
    "    // check if the matrix is a square matrix\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    sum_diag = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i=0;i<n;i++){\n        sum += my_matrix[0][i];\n    }\n    for(int i=0;i<n;i++){\n        sum2 = 0;\n        for(int j=0;j<n;j++){\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    for(int i=0;i<n;i++){\n        sum2 = 0;\n        for(int j=0;j<n;j++){\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i=0;i<n;i++){\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    sum2 = 0;\n    for(int i=0;i<n;i++){\n        sum2 += my_matrix[i][n-1-i];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for (int i = 0; i < n; i++) {\n        if (my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    // check if the sum of each row is the same\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 1; i < n; i++) {\n        long temp = 0;\n        for (int j = 0; j < n; j++) {\n            temp += my_matrix[i][j];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    // check if the sum of each column is the same\n    for (int i = 0; i < n; i++) {\n        long temp = 0;\n        for (int j = 0; j < n; j++) {\n            temp += my_matrix[j][i];\n        }\n        if (temp != sum) {\n            return false;\n        }\n    }\n    // check if the sum of the diagonal is the same\n    long temp = 0;\n    for (int i = 0; i < n; i++) {\n        temp += my_matrix[i][i];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    temp = 0;\n    for (int i = 0; i < n; i++) {\n        temp += my_matrix[i][n - i - 1];\n    }\n    if (temp != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        for (long j = 0; j < my_matrix.size(); j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (long i = 0; i < my_matrix.size(); i++) {\n        long col_sum = 0;\n        for (long j = 0; j < my_matrix.size(); j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (long i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is a square matrix\n    int n = my_matrix.size();\n    for(int i = 0; i < n; i++) {\n        if(my_matrix[i].size() != n) {\n            return false;\n        }\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for(int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if(row_sum != sum) {\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for(int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if(col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for(int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n-1-i];\n    }\n    if(diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    int sum_diag = 0;\n    int sum_rev_diag = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n - i - 1];\n    }\n    for (int i = 1; i < n; i++) {\n        int row_sum = 0;\n        int col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    if (sum_diag != sum || sum_rev_diag != sum) {\n        return false;\n    }\n    return true;",
    "    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long sum_row = 0;\n        long sum_col = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    long sum_diag1 = 0;\n    long sum_diag2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum_diag1 += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.size() - i - 1];\n    }\n    if (sum_diag1 != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;",
    "    // check if the matrix is square\n    assert(my_matrix.size() == my_matrix[0].size());\n    // check if the matrix is odd\n    assert(my_matrix.size() % 2 != 0);\n    // check if the matrix is odd\n    assert(my_matrix.size() > 1);\n    // check if the matrix is odd\n    assert(my_matrix.size() < 10);\n    // check if the matrix is odd\n    assert(my_matrix.size() > 0);\n    // check if the matrix is odd\n    assert(my_matrix.size() < 100);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -10);\n    // check if the matrix is odd\n    assert(my_matrix.size() < 0);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -100);\n    // check if the matrix is odd\n    assert(my_matrix.size() < -1);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -9);\n    // check if the matrix is odd\n    assert(my_matrix.size() < -99);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -99);\n    // check if the matrix is odd\n    assert(my_matrix.size() < -9);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -1);\n    // check if the matrix is odd\n    assert(my_matrix.size() < 0);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -100);\n    // check if the matrix is odd\n    assert(my_matrix.size() < -10);\n    // check if the matrix is odd\n    assert(my_matrix.size() > -9);\n    // check if the matrix is odd\n    assert(my_matrix.size() < -1);\n    // check if the matrix is odd\n    assert(my_matrix.size() > 1);\n    // check if the matrix is",
    "    int n = my_matrix.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < n; i++) {\n        long row_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n        }\n        if (row_sum != sum) {\n            return false;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        long col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            col_sum += my_matrix[j][i];\n        }\n        if (col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    std::vector<long> row_sum(n, 0);\n    std::vector<long> col_sum(n, 0);\n    long diag_sum = 0;\n    long anti_diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            row_sum[i] += my_matrix[i][j];\n            col_sum[j] += my_matrix[i][j];\n            if (i == j) {\n                diag_sum += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                anti_diag_sum += my_matrix[i][j];\n            }\n        }\n    }\n    if (diag_sum != anti_diag_sum) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n        if (row_sum[i] != diag_sum || col_sum[i] != diag_sum) {\n            return false;\n        }\n    }\n    return true;",
    "    int sum = 0;\n    int sum2 = 0;\n    int sum3 = 0;\n    int sum4 = 0;\n    int sum5 = 0;\n    int sum6 = 0;\n    int sum7 = 0;\n    int sum8 = 0;\n    int sum9 = 0;\n    int sum10 = 0;\n    int sum11 = 0;\n    int sum12 = 0;\n    int sum13 = 0;\n    int sum14 = 0;\n    int sum15 = 0;\n    int sum16 = 0;\n    int sum17 = 0;\n    int sum18 = 0;\n    int sum19 = 0;\n    int sum20 = 0;\n    int sum21 = 0;\n    int sum22 = 0;\n    int sum23 = 0;\n    int sum24 = 0;\n    int sum25 = 0;\n    int sum26 = 0;\n    int sum27 = 0;\n    int sum28 = 0;\n    int sum29 = 0;\n    int sum30 = 0;\n    int sum31 = 0;\n    int sum32 = 0;\n    int sum33 = 0;\n    int sum34 = 0;\n    int sum35 = 0;\n    int sum36 = 0;\n    int sum37 = 0;\n    int sum38 = 0;\n    int sum39 = 0;\n    int sum40 = 0;\n    int sum41 = 0;\n    int sum42 = 0;\n    int sum43 = 0;\n    int sum44 = 0;\n    int sum45 = 0;\n    int sum46 = 0;\n    int sum47 = 0;\n    int sum48 = 0;\n    int sum49 = 0;\n    int sum50 = 0;\n    int sum51 = 0;\n    int sum52 = 0;\n    int sum53 = 0;\n    int sum54 = 0;\n    int sum55 = 0;\n    int sum56 = 0;\n    int sum57 = 0;\n    int sum58 = 0;\n    int sum59 = 0;\n    int sum60 = 0;\n    int sum61 = 0;\n    int sum62 = 0;\n    int sum63 = 0;\n    int sum64 = 0;\n",
    "    // check if the matrix is square\n    if (my_matrix.size() != my_matrix[0].size()) {\n        return false;\n    }\n    // check if the matrix is a magic square\n    long sum = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        sum += my_matrix[0][i];\n    }\n    for (int i = 0; i < my_matrix.size(); i++) {\n        long row_sum = 0;\n        long col_sum = 0;\n        for (int j = 0; j < my_matrix[i].size(); j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    long diag_sum = 0;\n    long diag_sum_2 = 0;\n    for (int i = 0; i < my_matrix.size(); i++) {\n        diag_sum += my_matrix[i][i];\n        diag_sum_2 += my_matrix[i][my_matrix.size() - 1 - i];\n    }\n    if (diag_sum != sum || diag_sum_2 != sum) {\n        return false;\n    }\n    return true;",
    "    int n = my_matrix.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    int row_sum = 0;\n    int col_sum = 0;\n    for (int i = 0; i < n; i++) {\n        row_sum = 0;\n        col_sum = 0;\n        for (int j = 0; j < n; j++) {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if (row_sum != sum || col_sum != sum) {\n            return false;\n        }\n    }\n    int diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][i];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    diag_sum = 0;\n    for (int i = 0; i < n; i++) {\n        diag_sum += my_matrix[i][n - i - 1];\n    }\n    if (diag_sum != sum) {\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum += my_matrix[0][i];\n    }\n    for(int i = 0; i < n; i++){\n        sum2 = 0;\n        for(int j = 0; j < n; j++){\n            sum2 += my_matrix[i][j];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    for(int i = 0; i < n; i++){\n        sum2 = 0;\n        for(int j = 0; j < n; j++){\n            sum2 += my_matrix[j][i];\n        }\n        if(sum2 != sum){\n            return false;\n        }\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum2 += my_matrix[i][i];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    sum2 = 0;\n    for(int i = 0; i < n; i++){\n        sum2 += my_matrix[i][n-i-1];\n    }\n    if(sum2 != sum){\n        return false;\n    }\n    return true;",
    "    // Write your code here\n    int n = my_matrix.size();\n    int sum = 0;\n    for(int i=0;i<n;i++)\n        sum += my_matrix[0][i];\n    for(int i=0;i<n;i++)\n    {\n        int row_sum = 0;\n        for(int j=0;j<n;j++)\n            row_sum += my_matrix[i][j];\n        if(row_sum != sum)\n            return false;\n    }\n    for(int i=0;i<n;i++)\n    {\n        int col_sum = 0;\n        for(int j=0;j<n;j++)\n            col_sum += my_matrix[j][i];\n        if(col_sum != sum)\n            return false;\n    }\n    int diag_sum1 = 0;\n    for(int i=0;i<n;i++)\n        diag_sum1 += my_matrix[i][i];\n    if(diag_sum1 != sum)\n        return false;\n    int diag_sum2 = 0;\n    for(int i=0;i<n;i++)\n        diag_sum2 += my_matrix[i][n-i-1];\n    if(diag_sum2 != sum)\n        return false;\n    return true;"
  ]
}