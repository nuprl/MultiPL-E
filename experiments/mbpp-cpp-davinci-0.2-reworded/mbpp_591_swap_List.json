{
  "name": "mbpp_591_swap_List",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to interchange the first and last elements in a vector.\nstd::vector<long> swap_List(std::vector<long> newList) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = swap_List;\n    assert(candidate((std::vector<long>({(long)12, (long)35, (long)9, (long)56, (long)24}))) == (std::vector<long>({(long)24, (long)35, (long)9, (long)56, (long)12})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)3, (long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> newList1;\n    int i = 0;\n    int j = newList.size() - 1;\n    while (i < newList.size()) {\n        if (i == 0) {\n            newList1.push_back(newList[j]);\n        } else if (i == newList.size() - 1) {\n            newList1.push_back(newList[0]);\n        } else {\n            newList1.push_back(newList[i]);\n        }\n        i++;\n    }\n    return newList1;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end()-1;\n    std::swap(*it, *it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr1 = newList.end();\n    itr1--;\n    std::swap(*itr, *itr1);\n    return newList;",
    "    std::vector<long> newList1;\n    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> tempList;\n    long temp;\n    temp = newList.front();\n    newList.front() = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    for (int i = 1; i < newList.size() - 1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.insert(newList1.begin(), newList[newList.size() - 1]);\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size() - 1]);\n    return newList;",
    "  std::vector<long>::iterator it;\n  std::vector<long>::iterator it1;\n  it = newList.begin();\n  it1 = newList.end();\n  it1--;\n  std::swap(*it, *it1);\n  return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end()-1;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end() - 1;\n    std::swap(*it, *it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    newList.push_back(11);\n    newList.push_back(12);\n    newList.push_back(13);\n    newList.push_back(14);\n    newList.push_back(15);\n    newList.push_back(16);\n    newList.push_back(17);\n    newList.push_back(18);\n    newList.push_back(19);\n    newList.push_back(20);\n    newList.push_back(21);\n    newList.push_back(22);\n    newList.push_back(23);\n    newList.push_back(24);\n    newList.push_back(25);\n    newList.push_back(26);\n    newList.push_back(27);\n    newList.push_back(28);\n    newList.push_back(29);\n    newList.push_back(30);\n    newList.push_back(31);\n    newList.push_back(32);\n    newList.push_back(33);\n    newList.push_back(34);\n    newList.push_back(35);\n    newList.push_back(36);\n    newList.push_back(37);\n    newList.push_back(38);\n    newList.push_back(39);\n    newList.push_back(40);\n    newList.push_back(41);\n    newList.push_back(42);\n    newList.push_back(43);\n    newList.push_back(44);\n    newList.push_back(45);\n    newList.push",
    "    std::vector<long> newList2;\n    int size = newList.size();\n    newList2.push_back(newList[size-1]);\n    for(int i=1;i<size-1;i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    newList.push_back(11);\n    newList.push_back(12);\n    newList.push_back(13);\n    newList.push_back(14);\n    newList.push_back(15);\n    newList.push_back(16);\n    newList.push_back(17);\n    newList.push_back(18);\n    newList.push_back(19);\n    newList.push_back(20);\n    newList.push_back(21);\n    newList.push_back(22);\n    newList.push_back(23);\n    newList.push_back(24);\n    newList.push_back(25);\n    newList.push_back(26);\n    newList.push_back(27);\n    newList.push_back(28);\n    newList.push_back(29);\n    newList.push_back(30);\n    newList.push_back(31);\n    newList.push_back(32);\n    newList.push_back(33);\n    newList.push_back(34);\n    newList.push_back(35);\n    newList.push_back(36);\n    newList.push_back(37);\n    newList.push_back(38);\n    newList.push_back(39);\n    newList.push_back(40);\n    newList.push_back(41);\n    newList.push_back(42);\n    newList.push_back(43);\n    newList.push_back(44);\n    newList.push_back(45);\n    newList.push",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr2 = newList.end();\n    itr2--;\n    std::swap(*itr, *itr2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    it = newList.begin();\n    it2 = newList.end() - 1;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    newList.push_back(11);\n    newList.push_back(12);\n    newList.push_back(13);\n    newList.push_back(14);\n    newList.push_back(15);\n    newList.push_back(16);\n    newList.push_back(17);\n    newList.push_back(18);\n    newList.push_back(19);\n    newList.push_back(20);\n    newList.push_back(21);\n    newList.push_back(22);\n    newList.push_back(23);\n    newList.push_back(24);\n    newList.push_back(25);\n    newList.push_back(26);\n    newList.push_back(27);\n    newList.push_back(28);\n    newList.push_back(29);\n    newList.push_back(30);\n    newList.push_back(31);\n    newList.push_back(32);\n    newList.push_back(33);\n    newList.push_back(34);\n    newList.push_back(35);\n    newList.push_back(36);\n    newList.push_back(37);\n    newList.push_back(38);\n    newList.push_back(39);\n    newList.push_back(40);\n    newList.push_back(41);\n    newList.push_back(42);\n    newList.push_back(43);\n    newList.push_back(44);\n    newList.push_back(45);\n    newList.push",
    "  std::vector<long> newList1;\n  newList1.push_back(newList.back());\n  newList1.insert(newList1.end(), newList.begin()+1, newList.end()-1);\n  newList1.push_back(newList.front());\n  return newList1;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> list = newList;\n    long temp = list[0];\n    list[0] = list[list.size()-1];\n    list[list.size()-1] = temp;\n    return list;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr2 = newList.end() - 1;\n    std::swap(*itr, *itr2);\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end()-1;\n    long temp = *it;\n    *it = *it1;\n    *it1 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr1 = newList.end();\n    itr1--;\n    std::swap(*itr, *itr1);\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList.back());\n    newList.pop_back();\n    newList1.insert(newList1.end(), newList.begin(), newList.end());\n    newList1.push_back(newList1.front());\n    newList1.erase(newList1.begin());\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "  int size = newList.size();\n  long temp = newList[0];\n  newList[0] = newList[size-1];\n  newList[size-1] = temp;\n  return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList.back());\n    newList2.insert(newList2.end(), newList.begin() + 1, newList.end() - 1);\n    newList2.push_back(newList.front());\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end()-1;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "\tstd::vector<long> newList;\n\tint first = newList[0];\n\tint last = newList[newList.size() - 1];\n\tnewList[0] = last;\n\tnewList[newList.size() - 1] = first;\n\treturn newList;",
    "    std::vector<long> newList;\n    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    long temp = *it;\n    *it = *(newList.end() - 1);\n    *(newList.end() - 1) = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end() - 1;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end() - 1;\n    std::iter_swap(it, it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end() - 1;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long first = *it;\n    it = newList.end();\n    it--;\n    long last = *it;\n    *it = first;\n    *newList.begin() = last;\n    return newList;",
    "    std::vector<long> newList;\n    for (int i = 0; i < newList.size(); i++) {\n        if (i == 0) {\n            newList.push_back(newList[newList.size() - 1]);\n        } else if (i == newList.size() - 1) {\n            newList.push_back(newList[0]);\n        } else {\n            newList.push_back(newList[i]);\n        }\n    }\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++)\n        newList2.push_back(newList[i]);\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "  long temp = newList[0];\n  newList[0] = newList[newList.size() - 1];\n  newList[newList.size() - 1] = temp;\n  return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long> list = newList;\n    long temp = list[0];\n    list[0] = list[list.size() - 1];\n    list[list.size() - 1] = temp;\n    return list;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end()-1;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size() - 1]);\n    return newList;",
    "    std::vector<long> newList1;\n    int size = newList.size();\n    newList1.push_back(newList[size-1]);\n    for(int i = 1; i < size-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end() - 1;\n    std::swap(*it, *it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    long temp = *it;\n    *it = *(it2-1);\n    *(it2-1) = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i = 1; i < newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr1 = newList.end() - 1;\n    std::swap(*itr, *itr1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    int size = newList.size();\n    int temp = newList[0];\n    newList[0] = newList[size-1];\n    newList[size-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp;\n    temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it2;\n    it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr2 = newList.end();\n    itr2--;\n    std::swap(*itr, *itr2);\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end() - 1;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it2;\n    it2 = newList.end() - 1;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    std::vector<long>::iterator first = newList.begin();\n    std::vector<long>::iterator last = newList.end();\n    last--;\n    std::swap(*first, *last);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    int n = newList.size();\n    newList1.push_back(newList[n-1]);\n    for(int i=1; i<n-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    long temp = *it;\n    *it = *it2;\n    *it2 = temp;\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    newList.push_back(11);\n    newList.push_back(12);\n    newList.push_back(13);\n    newList.push_back(14);\n    newList.push_back(15);\n    newList.push_back(16);\n    newList.push_back(17);\n    newList.push_back(18);\n    newList.push_back(19);\n    newList.push_back(20);\n    newList.push_back(21);\n    newList.push_back(22);\n    newList.push_back(23);\n    newList.push_back(24);\n    newList.push_back(25);\n    newList.push_back(26);\n    newList.push_back(27);\n    newList.push_back(28);\n    newList.push_back(29);\n    newList.push_back(30);\n    newList.push_back(31);\n    newList.push_back(32);\n    newList.push_back(33);\n    newList.push_back(34);\n    newList.push_back(35);\n    newList.push_back(36);\n    newList.push_back(37);\n    newList.push_back(38);\n    newList.push_back(39);\n    newList.push_back(40);\n    newList.push_back(41);\n    newList.push_back(42);\n    newList.push_back(43);\n    newList.push_back(44);\n    newList.push_back(45);\n    newList.push",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    std::vector<long> newList1;\n    int size = newList.size();\n    newList1.push_back(newList[size-1]);\n    for(int i = 1; i < size-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    std::vector<long>::iterator itr;\n    itr = newList.begin();\n    std::swap(*itr, *(newList.end() - 1));\n    return newList;",
    "    std::vector<long>::iterator it;\n    long temp;\n    it = newList.begin();\n    temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    it = newList.begin();\n    it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(1);\n    newList.push_back(2);\n    newList.push_back(3);\n    newList.push_back(4);\n    newList.push_back(5);\n    newList.push_back(6);\n    newList.push_back(7);\n    newList.push_back(8);\n    newList.push_back(9);\n    newList.push_back(10);\n    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it2;\n    it2 = newList.end();\n    it2--;\n    std::swap(*it, *it2);\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it1;\n    it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i = 1; i < newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long first = newList.front();\n    long last = newList.back();\n    newList.front() = last;\n    newList.back() = first;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    std::vector<long>::iterator it1;\n    it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr2 = newList.end() - 1;\n    long temp = *itr;\n    *itr = *itr2;\n    *itr2 = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    it = newList.begin();\n    long temp = *it;\n    *it = newList.back();\n    newList.back() = temp;\n    return newList;",
    "    std::vector<long> newList;\n    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1; i<newList.size()-1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator itr = newList.begin();\n    std::vector<long>::iterator itr1 = newList.end() - 1;\n    std::swap(*itr, *itr1);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    it = newList.begin();\n    it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long> newList;\n    newList.push_back(newList[0]);\n    newList.push_back(newList[newList.size()-1]);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it2 = newList.end();\n    it2--;\n    std::iter_swap(it, it2);\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size() - 1];\n    newList[newList.size() - 1] = temp;\n    return newList;",
    "    std::vector<long> newList2;\n    newList2.push_back(newList[newList.size()-1]);\n    for(int i = 1; i < newList.size()-1; i++) {\n        newList2.push_back(newList[i]);\n    }\n    newList2.push_back(newList[0]);\n    return newList2;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size() - 1]);\n    for (int i = 1; i < newList.size() - 1; i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    int temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    long temp = newList[0];\n    newList[0] = newList[newList.size()-1];\n    newList[newList.size()-1] = temp;\n    return newList;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long> newList1;\n    newList1.push_back(newList[newList.size()-1]);\n    for(int i=1;i<newList.size()-1;i++) {\n        newList1.push_back(newList[i]);\n    }\n    newList1.push_back(newList[0]);\n    return newList1;",
    "    std::vector<long>::iterator it = newList.begin();\n    std::vector<long>::iterator it1 = newList.end();\n    it1--;\n    std::swap(*it, *it1);\n    return newList;"
  ]
}