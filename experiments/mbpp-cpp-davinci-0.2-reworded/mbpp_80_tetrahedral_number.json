{
  "name": "mbpp_80_tetrahedral_number",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth tetrahedral number.\nlong tetrahedral_number(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tetrahedral_number;\n    assert(candidate((5)) == (35));\n    assert(candidate((6)) == (56));\n    assert(candidate((7)) == (84));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return n*(n+1)*(n+2)/6;",
    "  return (n * (n + 1) * (n + 2)) / 6;",
    "  return (n*(n+1)*(n+2))/6;",
    "    return (n * (n + 1) * (n + 2)) / 6;",
    "    return (n * (n + 1) * (n + 2)) / 6;",
    "    return (n*(n+1)*(n+2))/6;",
    "    return n*(n+1)*(n+2)/6;",
    "    return (n * (n + 1) * (n + 2)) / 6;",
    "    return n*(n+1)*(n+2)/6;",
    "    return (n*(n+1)*(n+2))/6;",
    "  return n*(n+1)*(n+2)/6;",
    "    return (n * (n + 1) * (n + 2)) / 6;",
    "    return (n * (n + 1) * (n + 2)) / 6;",
    "    return n*(n+1)*(n+2)/6;",
    "    return n*(n+1)*(n+2)/6;",
    "    return n*(n+1)*(n+2)/6;",
    "    long sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;",
    "    return n * (n + 1) * (n + 2) / 6;",
    "    return n*(n+1)*(n+2)/6;",
    "    return (n * (n + 1) * (n + 2)) / 6;"
  ]
}