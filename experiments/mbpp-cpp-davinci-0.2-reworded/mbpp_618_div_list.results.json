{
  "name": "mbpp_618_div_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    if(nums1.size() != nums2.size()) {\n        return result;\n    }\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpw3m_5f1q: /tmp/tmpw3m_5f1q.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpbwkzl0aq: /tmp/tmpbwkzl0aq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0;i<nums1.size();i++){\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpjm8jbqjr: /tmp/tmpjm8jbqjr.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back((float)nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpdsdeu6ld: /tmp/tmpdsdeu6ld.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back((float)nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    assert(nums1.size() == nums2.size());\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpbovxyq1y: /tmp/tmpbovxyq1y.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    assert(nums1.size() == nums2.size());\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpdsdeu6ld: /tmp/tmpdsdeu6ld.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(float(nums1[i]) / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmp_d82gvrk: /tmp/tmp_d82gvrk.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpbwkzl0aq: /tmp/tmpbwkzl0aq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmp_d82gvrk: /tmp/tmp_d82gvrk.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back((float)nums1[i]/(float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for(int i=0;i<nums1.size();i++){\n    result.push_back(nums1[i]/nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpzzzlpr97: /tmp/tmpzzzlpr97.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpbwkzl0aq: /tmp/tmpbwkzl0aq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back((float)nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back(nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpbwkzl0aq: /tmp/tmpbwkzl0aq.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n  std::vector<float> result;\n  for (int i = 0; i < nums1.size(); i++) {\n    result.push_back((float)nums1[i] / nums2[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmp_d82gvrk: /tmp/tmp_d82gvrk.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / (float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back((float)nums1[i]/(float)nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for (int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmp_d82gvrk: /tmp/tmp_d82gvrk.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n\tstd::vector<float> result;\n\tfor (int i = 0; i < nums1.size(); i++) {\n\t\tresult.push_back(nums1[i] / nums2[i]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmp4xfmaoqu: /tmp/tmp4xfmaoqu.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i=0; i<nums1.size(); i++) {\n        result.push_back(nums1[i]/nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmpy8w85i3t: /tmp/tmpy8w85i3t.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> res;\n    for(int i = 0; i < nums1.size(); i++) {\n        res.push_back(nums1[i] / nums2[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "tmplawh0ism: /tmp/tmplawh0ism.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back((float)nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for (int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmpauuvvxwf: /tmp/tmpauuvvxwf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to divide two vectors element wise.\nstd::vector<float> div_list(std::vector<long> nums1, std::vector<long> nums2) {\n    std::vector<float> result;\n    for(int i = 0; i < nums1.size(); i++) {\n        result.push_back(nums1[i] / nums2[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = div_list;\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0})));\n    assert(candidate((std::vector<long>({(long)3, (long)2})), (std::vector<long>({(long)1, (long)4}))) == (std::vector<float>({(float)3.0, (float)0.5})));\n    assert(candidate((std::vector<long>({(long)90, (long)120})), (std::vector<long>({(long)50, (long)70}))) == (std::vector<float>({(float)1.8, (float)1.7142857142857142})));\n}\n",
      "timestamp": 1665510130,
      "stdout": "",
      "stderr": "tmp65tmeff5: /tmp/tmp65tmeff5.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4, (long)5, (long)6})), (std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<float>({(float)4.0, (float)2.5, (float)2.0}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}