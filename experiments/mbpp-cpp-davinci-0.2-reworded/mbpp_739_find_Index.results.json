{
  "name": "mbpp_739_find_Index",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong low = 1, high = 100000;\n\tlong ans = -1;\n\twhile (low <= high) {\n\t\tlong mid = (low + high) / 2;\n\t\tlong triangle = (mid * (mid + 1)) / 2;\n\t\tif (triangle >= n) {\n\t\t\tans = mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp20nf_ai3: /tmp/tmp20nf_ai3.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 1;\n    while (triangle % (long)pow(10, n) != 0) {\n        i++;\n        triangle = (i * (i + 1)) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpe6nlcphd: /tmp/tmpe6nlcphd.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2, mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (log10(mid) + 1 < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp49jyj8dg: /tmp/tmp49jyj8dg.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 0;\n    while(true) {\n        triangle = (i * (i + 1)) / 2;\n        if(triangle % 10 == 0) {\n            if(triangle / 10 == pow(10, n - 1)) {\n                return i;\n            }\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510094,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri_num = 1;\n    while(1) {\n        if(tri_num >= pow(10, n-1)) {\n            break;\n        }\n        i++;\n        tri_num = tri_num + i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (n > 0) {\n        triangular_number += ++count;\n        if (triangular_number > pow(10, n)) {\n            return count - 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp6lp3u2bm: /tmp/tmp6lp3u2bm.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long ans = high;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if(digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp4onmws0t: /tmp/tmp4onmws0t.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 0;\n    while (triangle < pow(10, n)) {\n        triangle = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpr74_hw8p: /tmp/tmpr74_hw8p.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpj4de612l: /tmp/tmpj4de612l.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, num, index;\n    while(low < high) {\n        mid = (low + high)/2;\n        num = mid*(mid+1)/2;\n        if(num < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    index = low;\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmptolzbea0: /tmp/tmptolzbea0.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n;\n    long mid;\n    long ans;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid * (mid + 1) / 2 >= pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpve1m9kvd: /tmp/tmpve1m9kvd.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = i*(i+1)/2;\n        long digits = 0;\n        while(t) {\n            digits++;\n            t /= 10;\n        }\n        if(digits == n) {\n            count++;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpn7_c1zly: /tmp/tmpn7_c1zly.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmptkhk5ypb: /tmp/tmptkhk5ypb.cpp:18: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long t = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = t;\n        while (temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if (digits == n) {\n            return i;\n        }\n        i++;\n        count = digits;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 <= pow(10, n - 1)) {\n        ++count;\n        triangularNumber = count * (count + 1) / 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp75h25lgw: /tmp/tmp75h25lgw.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1)\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmps2_lqodc: /tmp/tmps2_lqodc.cpp:18: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    long mid, num;\n    while (low < high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp0d96h990: /tmp/tmp0d96h990.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i * (i + 1)) / 2;\n        if(t < pow(10, n - 1)) {\n            i++;\n        }\n        else {\n            count++;\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n;\n    long mid;\n    long ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangular_number = (mid * (mid + 1)) / 2;\n        if(triangular_number <= n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmp70x1dcc9: /tmp/tmp70x1dcc9.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low < high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i = 1; i*(i+1)/2 <= mid; i++) {\n            count += 1;\n        }\n        if(count < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpuds3fvkz: /tmp/tmpuds3fvkz.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangle = 1;\n    while (true) {\n        if (triangle >= pow(10, n - 1) && triangle < pow(10, n)) {\n            return count;\n        }\n        count++;\n        triangle = triangle + count;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        long num = mid * (mid + 1)/2;\n        if(num > pow(10, n-1) && num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(num < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpou4hnceo: /tmp/tmpou4hnceo.cpp:27: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_Number = 0;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangular_number = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangular_number;\n        while(temp != 0) {\n            temp /= 10;\n            digits++;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpvkne8w5s: /tmp/tmpvkne8w5s.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_Number = 1;\n    while(triangular_Number < pow(10, n - 1)) {\n        index++;\n        triangular_Number = triangular_Number + index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*n, mid, ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long x = mid * (mid + 1) / 2;\n        if(x > pow(10, n-1) && x < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(x < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpb_7er5fx: /tmp/tmpb_7er5fx.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * count < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmph6gm2ecz: /tmp/tmph6gm2ecz.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpzkaifw0g: /tmp/tmpzkaifw0g.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong sum = 0;\n\twhile(sum < n) {\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn i-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmp9zyt3nmq: /tmp/tmp9zyt3nmq.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmp6wyflnxq: /tmp/tmp6wyflnxq.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits < n) {\n            low = mid+1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpoa91k1mm: /tmp/tmpoa91k1mm.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 0;\n    while(triangular_number < pow(10, n)) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpw8e38w36: /tmp/tmpw8e38w36.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = floor(log10(triangle)) + 1;\n        if (digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmprrx6qdcx: /tmp/tmprrx6qdcx.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong count = 1;\n\tlong triangularNumber = 1;\n\twhile (count * (count + 1) / 2 < pow(10, n - 1)) {\n\t\t++count;\n\t\ttriangularNumber += count;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long sum = 0;\n    long i = 1;\n    while(sum < n) {\n        sum += i;\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpg7xu2nw7: /tmp/tmpg7xu2nw7.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpw5r13fha: /tmp/tmpw5r13fha.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*(n+1)/2;\n    while(low<high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp/=10;\n        }\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmp6f7z3c6o: /tmp/tmp6f7z3c6o.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, num, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        } else if (num > pow(10, n)) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpzxoxizbg: /tmp/tmpzxoxizbg.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 0;\n    while (n > count) {\n        triangularNumber = triangularNumber + count;\n        count++;\n    }\n    return triangularNumber;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmplnhuab1i: /tmp/tmplnhuab1i.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle < n) {\n            low = mid + 1;\n        } else if(triangle > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmppi9e6ft7: /tmp/tmppi9e6ft7.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmprtmj0n_t: /tmp/tmprtmj0n_t.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long mid;\n    long triangle = 0;\n    while(true) {\n        mid = (low + high) / 2;\n        triangle = mid * (mid + 1) / 2;\n        if(triangle > pow(10, n - 1) && triangle < pow(10, n)) {\n            return mid;\n        }\n        else if(triangle < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122657,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = i * (i + 1) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpg2g7_689: /tmp/tmpg2g7_689.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmprtmj0n_t: /tmp/tmprtmj0n_t.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*n, mid, ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long tri = (mid * (mid + 1)) / 2;\n        if(tri < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpi60m7mtt: /tmp/tmpi60m7mtt.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long mid;\n    long tri_num;\n    while (true) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if (tri_num > pow(10, n - 1) && tri_num < pow(10, n)) {\n            return mid;\n        }\n        else if (tri_num < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122659,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmps8a1zph9: /tmp/tmps8a1zph9.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpo4qdxmet: /tmp/tmpo4qdxmet.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 0;\n    while(triangular_number <= n) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpqmj5x7j2: /tmp/tmpqmj5x7j2.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong triangle_number = 1;\n\twhile(1) {\n\t\tlong digits = floor(log10(triangle_number)) + 1;\n\t\tif(digits == n) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t\ttriangle_number = triangle_number + i;\n\t}\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*n;\n    while (low < high) {\n        long mid = low + (high - low)/2;\n        long t = mid*(mid+1)/2;\n        if (t < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpvfmmhec5: /tmp/tmpvfmmhec5.cpp:19: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 100000, mid;\n    while(low < high) {\n        mid = (low + high) / 2;\n        long tri_num = mid * (mid + 1) / 2;\n        if(tri_num < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp6fp2j266: /tmp/tmp6fp2j266.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 0;\n    while(true) {\n        tri = (i*(i+1))/2;\n        if(tri > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp7aws7q13: /tmp/tmp7aws7q13.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2, mid;\n    long tri_num = 3;\n    while (tri_num < n) {\n        low = high;\n        high = high * 2;\n        tri_num = (high * (high + 1)) / 2;\n    }\n    while (low < high) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if (tri_num < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpfojhvntg: /tmp/tmpfojhvntg.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong index = 1;\n\tlong tri_num = 1;\n\twhile(true) {\n\t\tif(tri_num >= pow(10, n-1)) {\n\t\t\treturn index;\n\t\t}\n\t\tindex++;\n\t\ttri_num += index;\n\t}\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits <= n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpwags8lzz: /tmp/tmpwags8lzz.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n-1)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong low = 1, high = n*(n+1)/2, mid, tri;\n\twhile(low <= high) {\n\t\tmid = (low+high)/2;\n\t\ttri = mid*(mid+1)/2;\n\t\tif(tri < n) {\n\t\t\tlow = mid+1;\n\t\t}\n\t\telse if(tri > n) {\n\t\t\thigh = mid-1;\n\t\t}\n\t\telse {\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpv1qkhane: /tmp/tmpv1qkhane.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_num = 1;\n    while(count * log10(triangular_num) + 1 < n) {\n        count++;\n        triangular_num = triangular_num + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpjytq99wt: /tmp/tmpjytq99wt.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = low + (high - low) / 2;\n        long digits = 0, temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp1tp4ji7w: /tmp/tmp1tp4ji7w.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 == n) {\n            ans = mid;\n            break;\n        }\n        else if (mid * (mid + 1) / 2 < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp3i94yefp: /tmp/tmp3i94yefp.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpv7l926q9: /tmp/tmpv7l926q9.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp0nu57zg7: /tmp/tmp0nu57zg7.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpaxtg2td1: /tmp/tmpaxtg2td1.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 0;\n    while(tri < n) {\n        tri = (i*(i+1))/2;\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmp0x36cm45: /tmp/tmp0x36cm45.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmp6wyflnxq: /tmp/tmp6wyflnxq.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long ans = 0;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (log10(mid) + 1 == n) {\n            ans = mid;\n            break;\n        }\n        else if (log10(mid) + 1 < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpss6szy8l: /tmp/tmpss6szy8l.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*(n+1)/2;\n    long mid, num;\n    while(low<=high) {\n        mid = (low+high)/2;\n        num = mid*(mid+1)/2;\n        if(num<=n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmp0fz_4mfj: /tmp/tmp0fz_4mfj.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long temp = i * (i + 1) / 2;\n        count = floor(log10(temp)) + 1;\n        i++;\n    }\n    return i - 2;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpouoxwgy5: /tmp/tmpouoxwgy5.cpp:16: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid;\n    long ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if (digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpbbyx2xiu: /tmp/tmpbbyx2xiu.cpp:31: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, temp, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        temp = mid * (mid + 1) / 2;\n        count = 0;\n        while (temp) {\n            count++;\n            temp /= 10;\n        }\n        if (count == n)\n            return mid;\n        else if (count < n)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpbqg_21uk: /tmp/tmpbqg_21uk.cpp:26: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        long t = (mid * (mid + 1)) / 2;\n        if(t < n) {\n            low = mid + 1;\n        } else if(t > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmp22vryyaq: /tmp/tmp22vryyaq.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while(count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpimgpwb5s: /tmp/tmpimgpwb5s.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmprtmj0n_t: /tmp/tmprtmj0n_t.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_num = 0;\n    while(true) {\n        triangular_num = triangular_num + i;\n        if(triangular_num >= pow(10, n-1) && triangular_num < pow(10, n)) {\n            return i;\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        i++;\n        triangular_number = triangular_number + i;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpo4sw35mz: /tmp/tmpo4sw35mz.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long temp = (mid * (mid + 1)) / 2;\n        if(temp < n) {\n            low = mid + 1;\n        } else if(temp > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmp73_zh92e: /tmp/tmp73_zh92e.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmprtmj0n_t: /tmp/tmprtmj0n_t.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long j = 1;\n    while(j < n) {\n        i++;\n        j = i*(i+1)/2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpcryz5096: /tmp/tmpcryz5096.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low + high)/2;\n        long digits = floor(log10(mid)) + 1;\n        if(digits == n) {\n            return mid;\n        }\n        if(digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmprqoi8uws: /tmp/tmprqoi8uws.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i*(i+1))/2;\n        long digits = 0;\n        long temp = t;\n        while(temp != 0) {\n            digits++;\n            temp = temp/10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmprykqzgrl: /tmp/tmprykqzgrl.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid * (mid + 1) / 2 > pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpq0w0158q: /tmp/tmpq0w0158q.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long sum = 0;\n    while(sum < n) {\n        sum = sum + i;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmp4w461l7r: /tmp/tmp4w461l7r.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n)\n            return i;\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, count, res = high;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        count = 0;\n        long i = 1;\n        while (mid / i > 0) {\n            count += mid / i;\n            i++;\n        }\n        if (count < n)\n            low = mid + 1;\n        else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpgjt6irma: /tmp/tmpgjt6irma.cpp:26: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long num = i*(i+1)/2;\n        long digits = 0;\n        long temp = num;\n        while(temp) {\n            digits++;\n            temp = temp/10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmp0nwnrr40: /tmp/tmp0nwnrr40.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    while (true) {\n        long t = i * (i + 1) / 2;\n        if (t % 10 == 0) {\n            long temp = t;\n            int count = 0;\n            while (temp > 0) {\n                count++;\n                temp = temp / 10;\n            }\n            if (count == n) {\n                return i;\n            }\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpibhe8aww: /tmp/tmpibhe8aww.cpp:26: int main(): Assertion `candidate((3)) == (14)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong sum = 0;\n\twhile (sum < n) {\n\t\tsum = sum + i;\n\t\ti++;\n\t}\n\treturn i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpv7msx9hv: /tmp/tmpv7msx9hv.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number % (long)pow(10, n - 1) != 0) {\n        index++;\n        triangular_number += index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp9_75i1lz: /tmp/tmp9_75i1lz.cpp:16: int main(): Assertion `candidate((3)) == (14)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0;\n    long high = n * (n + 1) / 2;\n    long mid = 0;\n    long tri = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n        if (tri < n) {\n            low = mid + 1;\n        } else if (tri > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpudilk80t: /tmp/tmpudilk80t.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpqlklg6cv: /tmp/tmpqlklg6cv.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpv7l926q9: /tmp/tmpv7l926q9.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long temp = mid * (mid + 1) / 2;\n        if(temp >= pow(10, n-1) && temp < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(temp < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp5bysu2oo: /tmp/tmp5bysu2oo.cpp:26: int main(): Assertion `candidate((3)) == (14)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (true) {\n        if (triangular_number >= pow(10, n - 1)) {\n            return count;\n        }\n        count++;\n        triangular_number = triangular_number + count;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number += count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2, mid;\n    while(low < high) {\n        mid = low + (high - low)/2;\n        long digits = (long)log10(mid) + 1;\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpzelnmjc5: /tmp/tmpzelnmjc5.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpq10p1qts: /tmp/tmpq10p1qts.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpw5r13fha: /tmp/tmpw5r13fha.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long tri = (mid*(mid+1))/2;\n        if(tri <= n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp8xcnjuwd: /tmp/tmp8xcnjuwd.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangularNumber = count * (count + 1) / 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1)\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp0qbfrhz1: /tmp/tmp0qbfrhz1.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n*(n+1)/2;\n    long mid;\n    long ans;\n    while(low<=high) {\n        mid = low + (high-low)/2;\n        if(mid*(mid+1)/2 >= n) {\n            ans = mid;\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmppckkyrtw: /tmp/tmppckkyrtw.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = i * (i + 1) / 2;\n        if(t > pow(10, n - 1))\n            return i;\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp091iq4et: /tmp/tmp091iq4et.cpp:16: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long t = 1;\n    while (t < n) {\n        i++;\n        t = t + i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmplcnne4k7: /tmp/tmplcnne4k7.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long mid;\n    long triangle_number;\n    while (1) {\n        mid = (low + high) / 2;\n        triangle_number = (mid * (mid + 1)) / 2;\n        if (triangle_number > pow(10, n - 1) && triangle_number < pow(10, n)) {\n            return mid;\n        }\n        else if (triangle_number < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122663,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 0;\n    while(true) {\n        triangle = i*(i+1)/2;\n        if(triangle > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp4c8scj9e: /tmp/tmp4c8scj9e.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 1;\n    while (triangle < n) {\n        i++;\n        triangle = i * (i + 1) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmper42lsxc: /tmp/tmper42lsxc.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        index++;\n        triangular_number += index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmp0xstskqo: /tmp/tmp0xstskqo.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n, mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangular = (mid * (mid + 1)) / 2;\n        if(triangular < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpuj2k1ofa: /tmp/tmpuj2k1ofa.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = (long)log10(mid) + 1;\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if (digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpsfllku7n: /tmp/tmpsfllku7n.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low < high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i=1; i*(i+1)/2 <= mid; i++) {\n            count += 1;\n        }\n        if(count < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmpbq00mo1t: /tmp/tmpbq00mo1t.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low+high)/2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp5qkw_71x: /tmp/tmp5qkw_71x.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 1;\n    while(tri < pow(10, n-1)) {\n        i++;\n        tri = i*(i+1)/2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, num, index;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num > pow(10, n - 1) && num < pow(10, n)) {\n            index = mid;\n            break;\n        }\n        else if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpen52_7n4: /tmp/tmpen52_7n4.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 0;\n    while (tri < n) {\n        tri = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp41khvyud: /tmp/tmp41khvyud.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "tmpo4qdxmet: /tmp/tmpo4qdxmet.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    long mid, num, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        } else if (num > pow(10, n)) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp4n9pmwk_: /tmp/tmp4n9pmwk_.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = i * (i + 1) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmpg2g7_689: /tmp/tmpg2g7_689.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long digits = log10(mid) + 1;\n        if(digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if(digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp90toouiq: /tmp/tmp90toouiq.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i*(i+1))/2;\n        if(t > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp7ejca_sd: /tmp/tmp7ejca_sd.cpp:18: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n, mid;\n    long tri_num, num_digits;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        num_digits = floor(log10(tri_num)) + 1;\n        if (num_digits == n) {\n            return mid;\n        }\n        else if (num_digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp1l9cgqri: /tmp/tmp1l9cgqri.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 1;\n    while (triangle < n) {\n        i++;\n        triangle = i * (i + 1) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122648,
      "stdout": "",
      "stderr": "tmper42lsxc: /tmp/tmper42lsxc.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 1;\n    while(triangle < pow(10, n-1)) {\n        i++;\n        triangle = i*(i+1)/2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong triangular_number = 0;\n\twhile(true) {\n\t\ttriangular_number += i;\n\t\tif(triangular_number >= pow(10, n - 1) && triangular_number < pow(10, n)) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < n) {\n        i++;\n        triangular_number = triangular_number + i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpj1nyi3ds: /tmp/tmpj1nyi3ds.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number <= n) {\n        index++;\n        triangular_number += index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpxh8s1_e9: /tmp/tmpxh8s1_e9.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 100000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long sum = (mid * (mid + 1)) / 2;\n        if(sum < n) {\n            low = mid + 1;\n        } else if(sum > n) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpg5te53qf: /tmp/tmpg5te53qf.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long index = 1;\n    while(high < n) {\n        low = high;\n        high = high * (high + 1) / 2;\n        index++;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp50iqux5d: /tmp/tmp50iqux5d.cpp:16: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        index++;\n        triangular_number = triangular_number + index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpbqzihsmx: /tmp/tmpbqzihsmx.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_num = 0;\n    while(true) {\n        triangular_num = (i * (i + 1)) / 2;\n        if(triangular_num > pow(10, n - 1)) {\n            return i;\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpz4cpabgz: /tmp/tmpz4cpabgz.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong triangle_number = 0;\n\twhile(true) {\n\t\ttriangle_number = (i * (i + 1)) / 2;\n\t\tif(triangle_number % 10 == 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tlong digits = 0;\n\t\tlong temp = triangle_number;\n\t\twhile(temp > 0) {\n\t\t\tdigits++;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif(digits == n) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpnm4xobc5: /tmp/tmpnm4xobc5.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 0;\n    while (true) {\n        tri = (i * (i + 1)) / 2;\n        if (tri % 10 == 0) {\n            i++;\n            continue;\n        }\n        if (tri % 10 == 1) {\n            long temp = tri;\n            int count = 0;\n            while (temp) {\n                temp /= 10;\n                count++;\n            }\n            if (count == n) {\n                return i;\n            }\n        }\n        i++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmp28z6c7nr: /tmp/tmp28z6c7nr.cpp:29: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long index = 0;\n    while (high < n) {\n        low = high;\n        high = high * 2;\n    }\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if (triangle == n) {\n            return mid;\n        }\n        if (triangle < n) {\n            index = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmptwa84bgq: /tmp/tmptwa84bgq.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid * (mid + 1) / 2 >= pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122650,
      "stdout": "",
      "stderr": "tmpgcge1s5x: /tmp/tmpgcge1s5x.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    long sum = 0;\n    while(count < n) {\n        sum = sum + i;\n        i++;\n        count = floor(log10(sum)) + 1;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1665510079,
      "stdout": "",
      "stderr": "tmpj4de612l: /tmp/tmpj4de612l.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low + high)/2;\n        if(mid*(mid+1)/2 < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp4rlqrjak: /tmp/tmp4rlqrjak.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n-1)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122644,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpnydarjkg: /tmp/tmpnydarjkg.cpp:19: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangularNumber = 1;\n    while(triangularNumber < n) {\n        index++;\n        triangularNumber = triangularNumber + index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpq7r_a8vg: /tmp/tmpq7r_a8vg.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long triangle = 0;\n    while(triangle < pow(10, n-1)) {\n        triangle = i*(i+1)/2;\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong index = 1;\n\tlong triangular_number = 1;\n\twhile (triangular_number < pow(10, n)) {\n\t\tindex++;\n\t\ttriangular_number = triangular_number + index;\n\t}\n\treturn index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp8izjdaps: /tmp/tmp8izjdaps.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong triangle = 1;\n\twhile (1) {\n\t\ttriangle = (i * (i + 1)) / 2;\n\t\tif (triangle > pow(10, n - 1)) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpj3u2d1tq: /tmp/tmpj3u2d1tq.cpp:18: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long tri = (i * (i + 1)) / 2;\n        long digits = floor(log10(tri)) + 1;\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, num;\n    while(low < high) {\n        mid = (low + high)/2;\n        num = mid*(mid+1)/2;\n        if(num < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp0miulk8z: /tmp/tmp0miulk8z.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0;\n    long high = n*(n+1)/2;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid+1;\n        }\n        else {\n            ans = mid;\n            high = mid-1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmplayb1csw: /tmp/tmplayb1csw.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri_num = (mid * (mid + 1)) / 2;\n        if(tri_num >= pow(10, n - 1) && tri_num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(tri_num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpa1ak0dhw: /tmp/tmpa1ak0dhw.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triNum = 1;\n    while(true) {\n        if(triNum % n == 0) {\n            return count;\n        }\n        count++;\n        triNum += count;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpi7_wilv4: /tmp/tmpi7_wilv4.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 100000, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if (triangle < n) {\n            low = mid + 1;\n        }\n        else if (triangle > n) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return high;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp4g_nxdnn: /tmp/tmp4g_nxdnn.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 >= n)\n            high = mid;\n        else\n            low = mid + 1;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpv94ilh43: /tmp/tmpv94ilh43.cpp:17: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp5lll2vc0: /tmp/tmp5lll2vc0.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong num = 1;\n\twhile (num < n) {\n\t\ti++;\n\t\tnum = num + i;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpbjwcynrx: /tmp/tmpbjwcynrx.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low + high) / 2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp9n5cp3vr: /tmp/tmp9n5cp3vr.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n, mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long num = mid * (mid + 1) / 2;\n        if(num > pow(10, n - 1) && num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpah18ics1: /tmp/tmpah18ics1.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmpkt4j254f: /tmp/tmpkt4j254f.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long triangle = (mid*(mid+1))/2;\n        if(triangle < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122652,
      "stdout": "",
      "stderr": "tmp507l8azs: /tmp/tmp507l8azs.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122642,
      "stdout": "",
      "stderr": "tmp6wyflnxq: /tmp/tmp6wyflnxq.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long mid = (low + high) / 2;\n    long tri = mid * (mid + 1) / 2;\n    while (tri < pow(10, n - 1)) {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp7q6njqdj: /tmp/tmp7q6njqdj.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low<high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i=1; i<=n; i++) {\n            count += mid/i;\n        }\n        if(count>=n) {\n            high = mid;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpf8zocxuy: /tmp/tmpf8zocxuy.cpp:24: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 0;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle == n) {\n            return mid;\n        }\n        else if(triangle < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return high;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp1dl61ygf: /tmp/tmp1dl61ygf.cpp:23: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if (digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpfcel1_9c: /tmp/tmpfcel1_9c.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 0;\n    while(count <= n) {\n        triangular_number = triangular_number + count;\n        count++;\n    }\n    return triangular_number;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpmiswv9ga: /tmp/tmpmiswv9ga.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count = digits;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid, num;\n    while(low < high) {\n        mid = (low+high)/2;\n        num = mid*(mid+1)/2;\n        if(num > pow(10, n-1))\n            high = mid;\n        else\n            low = mid+1;\n    }\n    return low-1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp58ryc0gd: /tmp/tmp58ryc0gd.cpp:19: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long num = mid * (mid + 1) / 2;\n        if(num < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpkh3qx_az: /tmp/tmpkh3qx_az.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if((mid * (mid + 1)) / 2 >= n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp45foi509: /tmp/tmp45foi509.cpp:19: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low+high)/2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid+1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpfwito6sj: /tmp/tmpfwito6sj.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long digits = 0, temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmptyi_k1cm: /tmp/tmptyi_k1cm.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = (mid * (mid + 1)) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpeav7avsz: /tmp/tmpeav7avsz.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long tri = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = tri;\n        while(temp != 0) {\n            temp /= 10;\n            digits++;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpfxj6r3or: /tmp/tmpfxj6r3or.cpp:25: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long index = 1;\n    long triangular_number = 1;\n    while (triangular_number < n) {\n        index++;\n        triangular_number = triangular_number + index;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp63piom2f: /tmp/tmp63piom2f.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000;\n    long mid;\n    long ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle < 0) {\n            high = mid - 1;\n        }\n        else if(triangle > pow(10, n) - 1) {\n            high = mid - 1;\n        }\n        else if(triangle < pow(10, n) - 1) {\n            ans = mid;\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp9c5gzfln: /tmp/tmp9c5gzfln.cpp:26: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong triangle = 0;\n\twhile (true) {\n\t\ttriangle = (i * (i + 1)) / 2;\n\t\tif (triangle % 10 == 0) {\n\t\t\tif (triangle / 10 == pow(10, n - 1)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122669,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 2;\n    long index = 1;\n    while(1) {\n        long triangle = (low * (low + 1)) / 2;\n        if(triangle > pow(10, n - 1)) {\n            break;\n        }\n        low = high;\n        high = high * 2;\n        index++;\n    }\n    return index;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmp3smrvniq: /tmp/tmp3smrvniq.cpp:21: int main(): Assertion `candidate((3)) == (14)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*(n+1)/2;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122654,
      "stdout": "",
      "stderr": "tmpaxun_rsr: /tmp/tmpaxun_rsr.cpp:28: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if (triangle < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpmm152u9t: /tmp/tmpmm152u9t.cpp:19: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangularNumber += count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong i = 1;\n\tlong sum = 0;\n\twhile (sum < n) {\n\t\tsum = sum + i;\n\t\ti++;\n\t}\n\treturn i - 1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122646,
      "stdout": "",
      "stderr": "tmpv7msx9hv: /tmp/tmpv7msx9hv.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 100000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmp1188861t: /tmp/tmp1188861t.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = low + (high - low)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmplh1cv9va: /tmp/tmplh1cv9va.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangularNumber = 0;\n    while (true) {\n        triangularNumber = triangularNumber + count;\n        long digits = 0;\n        long temp = triangularNumber;\n        while (temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if (digits == n) {\n            return count;\n        }\n        count++;\n    }\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle < n) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpl95bvltx: /tmp/tmpl95bvltx.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i * (i + 1)) / 2;\n        if(t < pow(10, n)) {\n            count++;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpr4ztlclq: /tmp/tmpr4ztlclq.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = log10(triangle) + 1;\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpwbs5tv74: /tmp/tmpwbs5tv74.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long temp = mid*(mid+1)/2;\n        if(temp >= pow(10, n-1) && temp < pow(10, n)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if(temp < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpm8ki33r_: /tmp/tmpm8ki33r_.cpp:26: int main(): Assertion `candidate((3)) == (14)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n*(n+1)/2;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid*(mid+1)/2 == n)\n            return mid;\n        else if(mid*(mid+1)/2 < n)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return mid;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmp5mrjpaxt: /tmp/tmp5mrjpaxt.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle > n) {\n            high = mid - 1;\n        }\n        else {\n            ans = mid;\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpimgdav9j: /tmp/tmpimgdav9j.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n\tlong low = 1, high = n * (n + 1) / 2;\n\tlong mid, tri_num;\n\twhile (low < high) {\n\t\tmid = (low + high) / 2;\n\t\ttri_num = mid * (mid + 1) / 2;\n\t\tif (tri_num < n) {\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmp452x2zjx: /tmp/tmp452x2zjx.cpp:21: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = (i * (i + 1)) / 2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpg8vz3c7v: /tmp/tmpg8vz3c7v.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long count = 1;\n    long triangular_number = 1;\n    while(count*log10(triangular_number) < n-1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpwr3cfg_o: /tmp/tmpwr3cfg_o.cpp:15: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = n * (n + 1) / 2;\n    long mid;\n    long ans = -1;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if (digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmp9x8f3bbi: /tmp/tmp9x8f3bbi.cpp:31: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 0, high = n * (n + 1) / 2;\n    long mid, num;\n    while (low < high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmpqojwa_04: /tmp/tmpqojwa_04.cpp:20: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n    long low = 1, high = 1000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long triangle = (mid * (mid + 1))/2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
      "timestamp": 1666122656,
      "stdout": "",
      "stderr": "tmphy0bzm91: /tmp/tmphy0bzm91.cpp:22: int main(): Assertion `candidate((2)) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}