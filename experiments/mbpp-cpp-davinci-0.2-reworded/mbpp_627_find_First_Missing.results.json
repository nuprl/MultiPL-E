{
  "name": "mbpp_627_find_First_Missing",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmpid5lp95o: /tmp/tmpid5lp95o.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid)\n                return mid + 1;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpwnfxvd7e: /tmp/tmpwnfxvd7e.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp1xabj3wk: /tmp/tmp1xabj3wk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    // write your code here\n    int n = array.size();\n    if(n==0)\n        return 1;\n    int i=0;\n    while(i<n)\n    {\n        if(array[i]!=i+1)\n            return i+1;\n        i++;\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp8fsca4hy: /tmp/tmp8fsca4hy.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp4annm0xk: /tmp/tmp4annm0xk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > n-1) {\n        return n+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp1h5i5nrd: /tmp/tmp1h5i5nrd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpcfrtklob: /tmp/tmpcfrtklob.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            r = mid - 1;\n        }\n    }\n    return l + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp_uc0rm65: /tmp/tmp_uc0rm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpgnckzldb: /tmp/tmpgnckzldb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp8s3wpcem: /tmp/tmp8s3wpcem.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long l = 0;\n  long r = n-1;\n  long mid;\n  while(l<=r) {\n    mid = l + (r-l)/2;\n    if(array[mid] == mid) {\n      l = mid+1;\n    } else {\n      r = mid-1;\n    }\n  }\n  return l;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpvzgfp0x_: /tmp/tmpvzgfp0x_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp2a5immyo: /tmp/tmp2a5immyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpfyomg3fi: /tmp/tmpfyomg3fi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(n == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpy_1shuqe: /tmp/tmpy_1shuqe.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp8iq3u49e: /tmp/tmp8iq3u49e.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp4annm0xk: /tmp/tmp4annm0xk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmprbz_ajwd: /tmp/tmprbz_ajwd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpl0upi1ls: /tmp/tmpl0upi1ls.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp9rdg0jtq: /tmp/tmp9rdg0jtq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp1hx0un92: /tmp/tmp1hx0un92.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpgnckzldb: /tmp/tmpgnckzldb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpvzgfp0x_: /tmp/tmpvzgfp0x_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    }\n    if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpvf44y6ze: /tmp/tmpvf44y6ze.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = low + (high - low) / 2;\n    if (array[mid] != mid && array[mid - 1] == mid - 1) {\n      return mid;\n    } else if (array[mid] != mid) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n;\n  }\n  return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpi5f5fugg: /tmp/tmpi5f5fugg.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  long mid;\n  while (low <= high) {\n    mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    }\n    else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    }\n    else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpzw5cj9ld: /tmp/tmpzw5cj9ld.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else if(array[mid] > mid) {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpzxpd5fvx: /tmp/tmpzxpd5fvx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpi89b8b9b: /tmp/tmpi89b8b9b.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpqkq2blpu: /tmp/tmpqkq2blpu.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  // Implement this placeholder.\n  return 0;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpprb_ybtg: /tmp/tmpprb_ybtg.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] == m + 1) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpodxvnh89: /tmp/tmpodxvnh89.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpwdgpzeu_: /tmp/tmpwdgpzeu_.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp36xt2fnp: /tmp/tmp36xt2fnp.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int l = 0, r = n-1;\n    while(l <= r) {\n        int mid = l + (r-l)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            r = mid-1;\n        }\n        else\n            l = mid+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpim5xg9ii: /tmp/tmpim5xg9ii.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp717hbdaq: /tmp/tmp717hbdaq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpw49mtlj1: /tmp/tmpw49mtlj1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpdqv2cl56: /tmp/tmpdqv2cl56.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpbiy9t4m9: /tmp/tmpbiy9t4m9.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpn0ox_7rr: /tmp/tmpn0ox_7rr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpv0rpf34e: /tmp/tmpv0rpf34e.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1) {\n                return m;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpsw3ceqv3: /tmp/tmpsw3ceqv3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int len = array.size();\n    int low = 0;\n    int high = len - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low == len) {\n        return len + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmph6pyvcl7: /tmp/tmph6pyvcl7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpgnckzldb: /tmp/tmpgnckzldb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpcfrtklob: /tmp/tmpcfrtklob.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp_uc0rm65: /tmp/tmp_uc0rm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == n) {\n        return n + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpu7bi0qbz: /tmp/tmpu7bi0qbz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpwe98mp9k: /tmp/tmpwe98mp9k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpv41p7txy: /tmp/tmpv41p7txy.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp_uc0rm65: /tmp/tmp_uc0rm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpfyomg3fi: /tmp/tmpfyomg3fi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpe9vrffg8: /tmp/tmpe9vrffg8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    long mid = 0;\n    while (l <= r) {\n        mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpn6n24mza: /tmp/tmpn6n24mza.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmprbz_ajwd: /tmp/tmprbz_ajwd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpz_nq1ong: /tmp/tmpz_nq1ong.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpo1rsik6k: /tmp/tmpo1rsik6k.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmp15reksgl: /tmp/tmp15reksgl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long left = 0;\n    long right = n - 1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            right = mid - 1;\n        }\n        else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpf7bdskdv: /tmp/tmpf7bdskdv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmp45etp8g8: /tmp/tmp45etp8g8.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmp8c_f5a9w: /tmp/tmp8c_f5a9w.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpgnckzldb: /tmp/tmpgnckzldb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1) {\n                return m;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        } else {\n            l = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmp4ghkzy88: /tmp/tmp4ghkzy88.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long low = 0;\n  long high = array.size() - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = (low + high) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmp7d0ohlim: /tmp/tmp7d0ohlim.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            r = mid - 1;\n        else\n            l = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpol95r7sg: /tmp/tmpol95r7sg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpozkkco9y: /tmp/tmpozkkco9y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpyeq0z579: /tmp/tmpyeq0z579.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpwox9equv: /tmp/tmpwox9equv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpgl51x9hy: /tmp/tmpgl51x9hy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpp7p2zzny: /tmp/tmpp7p2zzny.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpnq4b8y8g: /tmp/tmpnq4b8y8g.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1) {\n            if (m == 0 || array[m - 1] == m) {\n                return m + 1;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpuuuif8e3: /tmp/tmpuuuif8e3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return low + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpomuuq6fw: /tmp/tmpomuuq6fw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpx0wilkxp: /tmp/tmpx0wilkxp.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int i = 0;\n    while(array[i] == i+1) {\n        i++;\n    }\n    return i+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpa0j1_k9y: /tmp/tmpa0j1_k9y.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpgl51x9hy: /tmp/tmpgl51x9hy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp_uc0rm65: /tmp/tmp_uc0rm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmph5vw9ube: /tmp/tmph5vw9ube.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    if(n == 0)\n        return 1;\n    if(array[0] != 1)\n        return 1;\n    for(int i = 1; i < n; i++) {\n        if(array[i] - array[i-1] > 1)\n            return array[i-1] + 1;\n    }\n    return array[n-1] + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpmxng247g: /tmp/tmpmxng247g.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpvm84edgi: /tmp/tmpvm84edgi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmp9p5h4g_u: /tmp/tmp9p5h4g_u.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmp3e_tyxc2: /tmp/tmp3e_tyxc2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpfyomg3fi: /tmp/tmpfyomg3fi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    if (low > high)\n        return mid + 1;\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmplyg_245e: /tmp/tmplyg_245e.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            r = mid - 1;\n        else\n            l = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpol95r7sg: /tmp/tmpol95r7sg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpgl51x9hy: /tmp/tmpgl51x9hy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpw49mtlj1: /tmp/tmpw49mtlj1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmp70t5t9wi: /tmp/tmp70t5t9wi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmplkvao90r: /tmp/tmplkvao90r.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpm8hee5na: /tmp/tmpm8hee5na.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpckd80rqq: /tmp/tmpckd80rqq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpt4gd5q_j: /tmp/tmpt4gd5q_j.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    for (long i = 0; i < n; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpnecvjbzn: /tmp/tmpnecvjbzn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (array[n - 1] != n) {\n        return n;\n    }\n    if (array[0] != 1) {\n        return 1;\n    }\n    long l = 0, h = n - 1;\n    while (l <= h) {\n        long mid = (l + h) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        }\n        else {\n            h = mid - 1;\n        }\n    }\n    return l + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpw6md46mh: /tmp/tmpw6md46mh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long size = array.size();\n    if (size == 0) {\n        return 1;\n    }\n    if (size == 1) {\n        if (array[0] == 1) {\n            return 2;\n        } else {\n            return 1;\n        }\n    }\n    long start = 0;\n    long end = size - 1;\n    while (start <= end) {\n        long mid = (start + end) / 2;\n        if (array[mid] == mid + 1) {\n            start = mid + 1;\n        } else {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return start + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmprm7p0ja8: /tmp/tmprm7p0ja8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(array[n-1] == n)\n        return n+1;\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpu6jgwoyc: /tmp/tmpu6jgwoyc.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n-1;\n    while(l <= r) {\n        long mid = l + (r-l)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            r = mid-1;\n        } else {\n            l = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpwi7b7oec: /tmp/tmpwi7b7oec.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpvzgfp0x_: /tmp/tmpvzgfp0x_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpyeq0z579: /tmp/tmpyeq0z579.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpdh09x7e1: /tmp/tmpdh09x7e1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmp29b754nk: /tmp/tmp29b754nk.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpbf3twnyd: /tmp/tmpbf3twnyd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpbf3twnyd: /tmp/tmpbf3twnyd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    if (array.size() == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpq3ggcspn: /tmp/tmpq3ggcspn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] - array[i - 1] > 1)\n            return array[i - 1] + 1;\n    }\n    return array[n - 1] + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmps9ce74ii: /tmp/tmps9ce74ii.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpnn8zsknz: /tmp/tmpnn8zsknz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0) {\n        return 1;\n    }\n    if (array[0] != 1) {\n        return 1;\n    }\n    for (long i = 0; i < n; i++) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpmmld7tyn: /tmp/tmpmmld7tyn.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  for (long i = 0; i < n; i++) {\n    if (array[i] != i) {\n      return i;\n    }\n  }\n  return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmp3_kg7rpp: /tmp/tmp3_kg7rpp.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "tmpyeq0z579: /tmp/tmpyeq0z579.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpm6muj4ft: /tmp/tmpm6muj4ft.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int i = 0;\n    while (i < array.size() && array[i] == i + 1) {\n        i++;\n    }\n    return i + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpzx4q_z9j: /tmp/tmpzx4q_z9j.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmp45r0ebcu: /tmp/tmp45r0ebcu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long low = 0;\n  long high = array.size() - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = (low + high) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low > array.size() - 1) {\n    return array.size() + 1;\n  }\n  return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmp_g1o90y0: /tmp/tmp_g1o90y0.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpbf3twnyd: /tmp/tmpbf3twnyd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmph_p660ez: /tmp/tmph_p660ez.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid-1;\n        else\n            low = mid+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpb62kviha: /tmp/tmpb62kviha.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpk9h0r622: /tmp/tmpk9h0r622.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0) return 1;\n    if (array[0] != 1) return 1;\n    if (array[n - 1] == n) return n + 1;\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = (l + r) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpalvgu85w: /tmp/tmpalvgu85w.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp1xabj3wk: /tmp/tmp1xabj3wk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmph6l93nk1: /tmp/tmph6l93nk1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp1hx0un92: /tmp/tmp1hx0un92.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "tmpd9znrkvc: /tmp/tmpd9znrkvc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] != array[i - 1] + 1)\n            return array[i - 1] + 1;\n    }\n    return array[n - 1] + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpsfiq4ltt: /tmp/tmpsfiq4ltt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        } else if(array[mid] != mid+1) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpta2a_yy0: /tmp/tmpta2a_yy0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp8f9pwcq2: /tmp/tmp8f9pwcq2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid)\n                return mid + 1;\n            else\n                high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmptrb5dd0v: /tmp/tmptrb5dd0v.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpv0rpf34e: /tmp/tmpv0rpf34e.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] - array[i - 1] != 1) {\n            return array[i - 1] + 1;\n        }\n    }\n    return array[n - 1] + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpoyweboe_: /tmp/tmpoyweboe_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpw49mtlj1: /tmp/tmpw49mtlj1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n-1;\n    while (low <= high) {\n        int mid = low + (high-low)/2;\n        if (array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if (array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp2y3puq4z: /tmp/tmp2y3puq4z.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "tmp_uc0rm65: /tmp/tmp_uc0rm65.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpcfrtklob: /tmp/tmpcfrtklob.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp54xvzt6o: /tmp/tmp54xvzt6o.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpttdhq7o6: /tmp/tmpttdhq7o6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123196,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp_m883i6t: /tmp/tmp_m883i6t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid - 1] == mid - 1)\n                return mid;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp73cvdq5u: /tmp/tmp73cvdq5u.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n  // Write your code here\n  int n = array.size();\n  int low = 0;\n  int high = n-1;\n  int mid;\n  while(low <= high){\n    mid = (low+high)/2;\n    if(array[mid] == mid+1){\n      low = mid+1;\n    }\n    else{\n      high = mid-1;\n    }\n  }\n  return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpa816l_05: /tmp/tmpa816l_05.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpz8iltmzh: /tmp/tmpz8iltmzh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpg0ywbgv2: /tmp/tmpg0ywbgv2.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmpt4gd5q_j: /tmp/tmpt4gd5q_j.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpy8xvtyns: /tmp/tmpy8xvtyns.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "tmp70t5t9wi: /tmp/tmp70t5t9wi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpzjtyxax4: /tmp/tmpzjtyxax4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp6y10l7vi: /tmp/tmp6y10l7vi.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpfyomg3fi: /tmp/tmpfyomg3fi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmpg6evekkb: /tmp/tmpg6evekkb.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if (n == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    if (low > high) {\n        return low + 1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "tmp_k__xlkc: /tmp/tmp_k__xlkc.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmp8s3wpcem: /tmp/tmp8s3wpcem.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpzvdtzk5q: /tmp/tmpzvdtzk5q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpul2_bkzt: /tmp/tmpul2_bkzt.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpg7pc60dg: /tmp/tmpg7pc60dg.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmplj4dcj5o: /tmp/tmplj4dcj5o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            }\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmprn9hsf5g: /tmp/tmprn9hsf5g.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmp54ju7iqq: /tmp/tmp54ju7iqq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            else\n                high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1)\n                return m;\n            else\n                r = m - 1;\n        }\n        else\n            l = m + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long start = 0;\n    long end = array.size() - 1;\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n        if (array[mid] == mid) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return start;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpv9sy1l3u: /tmp/tmpv9sy1l3u.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    if(n == 0)\n        return 1;\n    if(n == 1)\n        return array[0] == 1 ? 2 : 1;\n    long low = 0, high = n - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if(array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return n + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpr9itt99j: /tmp/tmpr9itt99j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == n) {\n        return n + 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmp0dblm7_t: /tmp/tmp0dblm7_t.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        }\n        else {\n            l = m + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpd1ahl806: /tmp/tmpd1ahl806.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmp0zlfz57p: /tmp/tmp0zlfz57p.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmp0k4o6_mf: /tmp/tmp0k4o6_mf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpfx1zm2a_: /tmp/tmpfx1zm2a_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmpsw3ceqv3: /tmp/tmpsw3ceqv3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpivwkss33: /tmp/tmpivwkss33.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmpg2_n_zn2: /tmp/tmpg2_n_zn2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1665510431,
      "stdout": "",
      "stderr": "tmpfyomg3fi: /tmp/tmpfyomg3fi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp9rdg0jtq: /tmp/tmp9rdg0jtq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "tmp1lgmc0kq: /tmp/tmp1lgmc0kq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "tmp1hx0un92: /tmp/tmp1hx0un92.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "tmp7b52gosi: /tmp/tmp7b52gosi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    long low=0;\n    long high=array.size()-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "tmpd8r6qjha: /tmp/tmpd8r6qjha.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "tmp555f9jn6: /tmp/tmp555f9jn6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;\n}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
      "timestamp": 1666123206,
      "stdout": "",
      "stderr": "tmp297vpojt: /tmp/tmp297vpojt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}