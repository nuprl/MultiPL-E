{
  "name": "mbpp_9_find_Rotations",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nlong find_Rotations(std::string str) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Rotations;\n    assert(candidate((\"aaaa\")) == (1));\n    assert(candidate((\"ab\")) == (2));\n    assert(candidate((\"abc\")) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0]) {\n            break;\n        }\n        count++;\n    }\n    if (count == n) {\n        return 0;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if (j == n) {\n        return 0;\n    }\n    return count + 1;",
    "\t// Write your code here\n\tlong n = str.length();\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tlong max_count = 0;\n\tlong temp_count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\ttemp_count++;\n\t\t}\n\t\tif (str[i] == '0') {\n\t\t\tmax_count = std::max(max_count, temp_count);\n\t\t\ttemp_count = 0;\n\t\t}\n\t}\n\tmax_count = std::max(max_count, temp_count);\n\treturn count + max_count;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        count++;\n        if (temp[i + j] == temp[i]) {\n            j++;\n        } else if (temp[i + j] > temp[i]) {\n            i = i + j;\n            j = 1;\n        } else {\n            i = 0;\n            j = 1;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i++;\n            j++;\n            count++;\n        }\n        else {\n            i = 0;\n            j = ++count;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] <= str[j + k]) {\n            j = j + k + 1;\n        } else {\n            i = j;\n            j++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0])\n            break;\n        count++;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j])\n            break;\n        i++;\n        j++;\n    }\n    if (j == n)\n        return 0;\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return (n - max_count);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(j == i) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n])\n            k++;\n        if(k == n)\n            break;\n        if(str[(i + k) % n] > str[(j + k) % n])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if(i == j)\n            j++;\n    }\n    return (i < j) ? i : j;",
    "    long n = str.size();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    while(i < n && j < n) {\n        if(temp[i+j] == temp[j]) {\n            j++;\n        } else if(temp[i+j] < temp[j]) {\n            i = i + j + 1;\n            j = 1;\n        } else {\n            j = 0;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    while(i < len && j < len) {\n        if(temp[i + j] == temp[i]) {\n            j++;\n        } else if(temp[i + j] < temp[i]) {\n            i = i + j + 1;\n            j = 1;\n        } else {\n            i = 0;\n            j = 1;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if(max_ones == count) {\n            break;\n        }\n    }\n    long min_rotations = std::min(max_ones, max_zeros);\n    return min_rotations;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        long curr_count = 0;\n        for (long j = i; j < n; j++) {\n            if (str[j] == '1') {\n                curr_count++;\n            }\n        }\n        for (long j = 0; j < i; j++) {\n            if (str[j] == '1') {\n                curr_count++;\n            }\n        }\n        if (curr_count > max_count) {\n            max_count = curr_count;\n            max_index = i;\n        }\n    }\n    long ans = n - max_index;\n    if (ans == n) {\n        ans = 0;\n    }\n    return ans;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        if(temp[i + k] == temp[j + k]) {\n            k++;\n        } else if(temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long count = 0;\n    for (long i = 0; i < str.length(); i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i++;\n            j++;\n            count++;\n        } else {\n            i = 0;\n            j = ++count;\n        }\n    }\n    return i;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while (i < len && j < len && k < len) {\n        if (str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        } else {\n            if (str[(i + k) % len] > str[(j + k) % len]) {\n                i = i + k + 1;\n            } else {\n                j = j + k + 1;\n            }\n            if (i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    std::string temp = str + str;\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i+k)%n] == str[(j+k)%n]) {\n            k++;\n        }\n        if(k == n) {\n            return i;\n        }\n        if(str[(i+k)%n] > str[(j+k)%n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeroes = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeroes++;\n        }\n        if (i != n - 1 && str[i] == str[i + 1]) {\n            break;\n        }\n    }\n    long max_count = std::max(max_ones, max_zeroes);\n    return (count - max_count);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] < str[j + k]) {\n            j = j + k + 1;\n            if (j == i) {\n                j++;\n            }\n        } else {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        }\n        else {\n            if(str[(i+k)%len] > str[(j+k)%len]) {\n                i = i + k + 1;\n            }\n            else {\n                j = j + k + 1;\n            }\n            if(i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 1;\n    long j = 0;\n    long *lps = new long[n];\n    lps[0] = 0;\n    while (i < n) {\n        if (str[i] == str[j]) {\n            lps[i] = j + 1;\n            i++;\n            j++;\n        } else {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    i = 0;\n    j = 0;\n    while (i < 2 * n) {\n        if (temp[i] == str[j]) {\n            i++;\n            j++;\n        } else {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n        if (j == n) {\n            return i - n;\n        }\n    }\n    return 0;",
    "    long count = 0;\n    std::string temp = str;\n    while(true) {\n        temp = temp.substr(1, str.length()-1) + temp[0];\n        count++;\n        if(temp == str) {\n            break;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] <= str[j + k]) {\n            j = j + k + 1;\n        }\n        else {\n            i = j;\n            j++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        if (str[i] == str[j]) {\n            i++;\n            j++;\n        } else {\n            if (count == 0) {\n                j++;\n                count = j - i;\n            } else {\n                count = 0;\n                i = 0;\n                j = 1;\n            }\n        }\n    }\n    return count;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        } else {\n            if(str[(i+k)%len] > str[(j+k)%len]) {\n                i = i + k + 1;\n            } else {\n                j = j + k + 1;\n            }\n            if(i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(j == i) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        if (str[i] == str[j]) {\n            j++;\n        }\n        else {\n            if (j == i + 1) {\n                j++;\n            }\n            else {\n                i = 0;\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            break;\n        }\n    }\n    long min_count = n;\n    for (long i = n - 1; i >= 0; i--) {\n        if (str[i] == '1') {\n            min_count--;\n        }\n        if (str[i] == '0') {\n            break;\n        }\n    }\n    return std::min(min_count, n - max_count);",
    "\tlong n = str.length();\n\tlong count = 0;\n\tfor (long i = 0; i < n - 1; i++) {\n\t\tif (str[i] > str[i + 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        if (str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = 0;\n            j++;\n            count++;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for(long i = 0; i < n; i++) {\n        long temp_count = 0;\n        for(long j = i; j < n; j++) {\n            if(str[j] == '1') {\n                temp_count++;\n            }\n        }\n        for(long j = 0; j < i; j++) {\n            if(str[j] == '1') {\n                temp_count++;\n            }\n        }\n        if(temp_count > max_count) {\n            max_count = temp_count;\n            max_index = i;\n        }\n    }\n    return count - max_count;",
    "    int n = str.length();\n    std::string temp = str + str;\n    int i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i+k)%n] == str[(j+k)%n]) {\n            k++;\n        }\n        if(k == n) {\n            return std::min(i, j);\n        }\n        if(str[(i+k)%n] > str[(j+k)%n]) {\n            i = i + k + 1;\n        } else {\n            j = j + k + 1;\n        }\n        if(i == j) {\n            j++;\n        }\n    }\n    return std::min(i, j);",
    "\t// Write your code here\n\tlong n = str.length();\n\tlong i = 0;\n\tlong j = 1;\n\tlong count = 0;\n\twhile (count < n) {\n\t\tif (str[i] <= str[j]) {\n\t\t\ti = 0;\n\t\t\tj = ++count;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        long temp_count = 0;\n        for (long j = i; j < n; j++) {\n            if (str[j] == '1') {\n                temp_count++;\n            }\n        }\n        for (long j = 0; j < i; j++) {\n            if (str[j] == '1') {\n                temp_count++;\n            }\n        }\n        if (temp_count > max_count) {\n            max_count = temp_count;\n            max_index = i;\n        }\n    }\n    return count - max_count;",
    "\tlong n = str.length();\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tlong max_count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tmax_count++;\n\t\t}\n\t\telse {\n\t\t\tmax_count = 0;\n\t\t}\n\t}\n\treturn (n - max_count);",
    "    long n = str.length();\n    long min_rotations = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            min_rotations = i;\n            break;\n        }\n    }\n    return min_rotations;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long len = 0;\n    long i = 1;\n    while(i < n) {\n        if(temp[i] == temp[len]) {\n            len++;\n            i++;\n        } else {\n            if(len != 0) {\n                len = 0;\n            } else {\n                i++;\n            }\n        }\n    }\n    return len;",
    "    long n = str.size();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            max_count = 0;\n        }\n        if (max_count > max_index) {\n            max_index = max_count;\n        }\n    }\n    return (n - max_index - count);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "\tif(str.length() == 0) {\n\t\treturn 0;\n\t}\n\tstd::string temp = str + str;\n\tlong len = str.length();\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile(i < len && j < len) {\n\t\tk = 0;\n\t\twhile(k < len && str[(i + k) % len] == str[(j + k) % len]) {\n\t\t\tk++;\n\t\t}\n\t\tif(k == len) {\n\t\t\treturn i;\n\t\t}\n\t\tif(str[(i + k) % len] > str[(j + k) % len]) {\n\t\t\ti = i + k + 1;\n\t\t} else {\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif(i == j) {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n])\n            k++;\n        if (k == n)\n            break;\n        if (str[(i + k) % n] > str[(j + k) % n])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if (i == j)\n            j++;\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            max_count = 0;\n        }\n        if (max_count > max_index) {\n            max_index = max_count;\n        }\n    }\n    if (count == 0) {\n        return 0;\n    }\n    return (n - max_index);",
    "    std::string temp = str + str;\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        } else if(str[(i+k)%len] > str[(j+k)%len]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if(str[(i+k)%len] < str[(j+k)%len]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    long k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0]) {\n            break;\n        }\n        count++;\n    }\n    if (count == n) {\n        return 0;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if (j == n) {\n        return 0;\n    }\n    return count + 1;",
    "    // Write your code here\n    long n = str.length();\n    if(n==0)\n        return 0;\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i<n && j<n)\n    {\n        if(str[i]==str[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            count++;\n            i = 0;\n            j = count+1;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long n = str.length();\n    std::string s = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] <= str[(j + k) % n]) {\n            j = j + k + 1;\n        } else {\n            i = i + k + 1;\n        }\n        if(i == j) {\n            j++;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n])\n            k++;\n        if (k == n)\n            break;\n        if (str[(i + k) % n] > str[(j + k) % n])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if (i == j)\n            j++;\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return (n - max_count);",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < str.length(); i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for(long i = 0; i < n; i++) {\n        long temp_count = 0;\n        for(long j = i; j < n; j++) {\n            if(str[j] == '1') {\n                temp_count++;\n            }\n        }\n        for(long j = 0; j < i; j++) {\n            if(str[j] == '1') {\n                temp_count++;\n            }\n        }\n        if(temp_count > max_count) {\n            max_count = temp_count;\n            max_index = i;\n        }\n    }\n    return n - max_index;",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if (max_ones == count) {\n            break;\n        }\n    }\n    long min_rotations = std::min(max_ones, max_zeros);\n    return min_rotations;",
    "    // Write your code here\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        } else {\n            if(count == 0) {\n                count = j - i;\n                j++;\n            } else {\n                break;\n            }\n        }\n    }\n    return count;",
    "    long n = str.size();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0]) {\n            break;\n        }\n        count++;\n    }\n    if (count == n) {\n        return 0;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if (j == n) {\n        return 0;\n    }\n    return i + 1;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < len && j < len) {\n        k = 0;\n        while (k < len && str[(i + k) % len] == str[(j + k) % len])\n            k++;\n        if (k == len)\n            break;\n        if (str[(i + k) % len] > str[(j + k) % len])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if (i == j)\n            j++;\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        else {\n            max_count = 0;\n        }\n        count = std::max(count, max_count);\n    }\n    return n - count;",
    "    long n = str.length();\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n && k < n) {\n        if (str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        else {\n            if (str[(i + k) % n] > str[(j + k) % n]) {\n                i = i + k + 1;\n            }\n            else {\n                j = j + k + 1;\n            }\n            if (i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    std::string temp = str + str;\n    long n = str.length();\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n && k < n) {\n        if (temp[i + k] == temp[j + k]) {\n            k++;\n        }\n        else if (temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if (i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        }\n        else if (temp[i + k] < temp[j + k]) {\n            j = j + k + 1;\n            if (j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < len && j < len) {\n        k = 0;\n        while(k < len && str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        }\n        if(str[(i+k)%len] > str[(j+k)%len]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        }\n        else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while (i < len && j < len) {\n        k = 0;\n        while (k < len && str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        }\n        if (str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = 0;\n            j = ++count;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    return i;",
    "    int len = str.length();\n    std::string temp = str + str;\n    int i = 0, j = 1, k = 0;\n    while(i < len && j < len) {\n        k = 0;\n        while(k < len && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    std::string temp = str + str;\n    long n = str.length();\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n && k < n) {\n        if(temp[i + k] == temp[j + k]) {\n            k++;\n        }\n        else if(temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        }\n        else {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < str.length(); i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long n = str.size();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_count++;\n        }\n        if(str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile(i < n && j < n) {\n\t\tk = 0;\n\t\twhile(k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif(str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif(i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t} else {\n\t\t\tj = j + k + 1;\n\t\t\tif(j == i) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '0') {\n            count++;\n        }\n    }\n    long zeros = count;\n    long ones = n - count;\n    long max_diff = 0;\n    long curr_diff = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '0') {\n            curr_diff++;\n        } else {\n            curr_diff--;\n        }\n        if (curr_diff < 0) {\n            curr_diff = 0;\n        }\n        if (curr_diff > max_diff) {\n            max_diff = curr_diff;\n        }\n    }\n    return (zeros + max_diff);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        if (str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            count++;\n            if (count > n) {\n                return -1;\n            }\n            i = 0;\n            j = count;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            count++;\n            if(count == n) {\n                return -1;\n            }\n            j = i + 1;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0])\n            break;\n        count++;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j]) {\n            if (j - i == 1) {\n                i = j;\n                j++;\n            } else {\n                break;\n            }\n        } else {\n            i++;\n            j++;\n        }\n    }\n    if (j == n)\n        return 0;\n    return i + 1;",
    "\tlong len = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1;\n\twhile(i < len && j < len) {\n\t\tif(temp[i] == temp[j]) {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\ti = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return (n - max_count);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = 0;\n            j++;\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    while(i < n && j < n) {\n        if(temp[i + j] == temp[j]) {\n            j++;\n        }\n        else if(temp[i + j] < temp[j]) {\n            i = i + j + 1;\n            j = 1;\n        }\n        else {\n            j = 1;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "\t// Write your code here\n\tlong count = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tif (str[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if (max_ones == count) {\n            break;\n        }\n    }\n    long max_rotations = max_ones + max_zeros;\n    return max_rotations;",
    "    // Write your code here\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while (i < n && j < n && k < n) {\n        if (str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        } else if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if (str[(i + k) % n] < str[(j + k) % n]) {\n            j = j + k + 1;\n            if (j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (count < n) {\n        if (str[i] <= str[j]) {\n            i++;\n            j++;\n            count++;\n        }\n        else {\n            i = 0;\n            j = ++count;\n        }\n    }\n    return i;",
    "    // Write your code here\n    long len = str.length();\n    long count = 0;\n    for(long i = 0; i < len; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    long curr_ones = 0;\n    long curr_zeros = 0;\n    for(long i = 0; i < len; i++) {\n        if(str[i] == '1') {\n            curr_ones++;\n        } else {\n            curr_zeros++;\n        }\n        if(curr_ones > max_ones) {\n            max_ones = curr_ones;\n        }\n        if(curr_zeros > max_zeros) {\n            max_zeros = curr_zeros;\n        }\n        if(str[i] == '1') {\n            curr_zeros = 0;\n        } else {\n            curr_ones = 0;\n        }\n    }\n    long ans = std::max(max_ones, max_zeros);\n    if(ans == count) {\n        return ans;\n    }\n    return ans - 1;",
    "\tlong n = str.length();\n\tlong i = 0;\n\tlong j = 1;\n\tlong count = 0;\n\twhile(count < n) {\n\t\tif(str[i] <= str[j]) {\n\t\t\ti = 0;\n\t\t\tj = ++count;\n\t\t}\n\t\telse {\n\t\t\tif(i == 0)\n\t\t\t\treturn j;\n\t\t\telse {\n\t\t\t\ti = 0;\n\t\t\t\tcount = j;\n\t\t\t\tj = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k])\n            k++;\n        if(k == n)\n            return j;\n        if(str[i + k] > str[j + k])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if(i == j)\n            j++;\n    }\n    return i;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (count < n) {\n        if (str[i] <= str[j]) {\n            j++;\n            count++;\n        }\n        else {\n            i = j;\n            j++;\n            count = 0;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            count++;\n            if(count == n) {\n                return -1;\n            }\n            i = 0;\n            j = count + 1;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n            count++;\n        } else {\n            i = 0;\n            j++;\n            count = 0;\n        }\n    }\n    return i;",
    "    std::string temp = str + str;\n    long n = str.size();\n    long i = 0, j = 1, k = 0;\n    while(i + k < n && j + k < n) {\n        if(temp[i + k] == temp[j + k]) {\n            k++;\n        } else if(temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if(temp[i + k] < temp[j + k]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return (n - max_count);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        }\n        else if(str[i + k] < str[j + k]) {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long count = 0;\n    long n = str.length();\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count += (i+1);\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_ones_index = 0;\n    for(long i = 0; i < n; i++) {\n        long ones = 0;\n        for(long j = i; j < n; j++) {\n            if(str[j] == '1') {\n                ones++;\n            }\n        }\n        for(long j = 0; j < i; j++) {\n            if(str[j] == '1') {\n                ones++;\n            }\n        }\n        if(ones > max_ones) {\n            max_ones = ones;\n            max_ones_index = i;\n        }\n    }\n    return count - max_ones;",
    "    long rotations = 0;\n    long len = str.length();\n    for (long i = 0; i < len; i++) {\n        if (str[i] == '1') {\n            rotations = i;\n            break;\n        }\n    }\n    return rotations;",
    "    // Write your code here\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            j++;\n        }\n        else {\n            count++;\n            i = 0;\n            j = count + 1;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long n = str.size();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    long k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        long curr_count = 0;\n        for (long j = i; j < n; j++) {\n            if (str[j] == '1') {\n                curr_count++;\n            }\n        }\n        for (long j = 0; j < i; j++) {\n            if (str[j] == '1') {\n                curr_count++;\n            }\n        }\n        if (curr_count > max_count) {\n            max_count = curr_count;\n            max_index = i;\n        }\n    }\n    if (max_count == count) {\n        return 0;\n    }\n    return n - max_index;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        } else if(str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if(str[(i + k) % len] < str[(j + k) % len]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.size();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            j++;\n        }\n        else {\n            i = j;\n            j++;\n            count++;\n        }\n    }\n    return count;",
    "  long len = str.length();\n  long count = 0;\n  for (long i = 0; i < len; i++) {\n    if (str[i] == '1') {\n      count++;\n    }\n  }\n  long max_count = 0;\n  for (long i = 0; i < len; i++) {\n    if (str[i] == '1') {\n      max_count++;\n    }\n    else {\n      max_count = 0;\n    }\n    if (max_count == count) {\n      return i + 1;\n    }\n  }\n  return 0;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        }\n        else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n=str.length();\n    std::string temp=str+str;\n    long i=0,j=1;\n    while(i<n && j<n){\n        long k=0;\n        while(k<n && str[(i+k)%n]==str[(j+k)%n]){\n            k++;\n        }\n        if(str[(i+k)%n]<str[(j+k)%n]){\n            j=j+k+1;\n        }\n        else{\n            i=i+k+1;\n        }\n        if(i==j){\n            j++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (j == i) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "\t// Write your code here\n\tlong count = 0;\n\tlong n = str.length();\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tlong max_count = 0;\n\tlong zeroes = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '0') {\n\t\t\tzeroes++;\n\t\t}\n\t\telse {\n\t\t\tcount--;\n\t\t}\n\t\tif (zeroes + count > max_count) {\n\t\t\tmax_count = zeroes + count;\n\t\t}\n\t}\n\treturn n - max_count;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    while (i < len && j < len) {\n        long k = 0;\n        while (k < len && str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        }\n        if (str[(i + k) % len] <= str[(j + k) % len]) {\n            j = j + k + 1;\n        } else {\n            i = j;\n            j++;\n        }\n        if (i == j) {\n            j++;\n        }\n    }\n    return i;",
    "    // Write your code here\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            j++;\n        }\n        else {\n            if(count == 0) {\n                i = j;\n                j++;\n            }\n            else {\n                count = 0;\n                j = i + 1;\n            }\n        }\n        count++;\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    long n = str.length();\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if(max_ones == count) {\n            break;\n        }\n    }\n    long max_rotations = max_ones + max_zeros;\n    long min_rotations = n - max_rotations;\n    return min_rotations;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (count < n) {\n        if (str[i] <= str[j]) {\n            i = 0;\n            j++;\n            count++;\n        }\n        else {\n            i++;\n            count++;\n        }\n    }\n    return j;",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            break;\n        }\n    }\n    long res = count - max_count;\n    for (long i = 0; i < n - 1; i++) {\n        if (str[i] == '1') {\n            max_count--;\n        }\n        if (str[i] == '0' && str[i + 1] == '1') {\n            max_count++;\n        }\n        res = std::max(res, count - max_count);\n    }\n    return res;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] != str[0]) {\n            break;\n        }\n        count++;\n    }\n    if (count == n) {\n        return 0;\n    }\n    long i = count, j = i + 1;\n    while (j < n) {\n        if (str[i] != str[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if (j == n) {\n        return 0;\n    }\n    return count + 1;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < len && j < len) {\n        k = 0;\n        while (k < len && str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        }\n        if (str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1;\n    while (i < n && j < n) {\n        long k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] <= str[(j + k) % n]) {\n            j = j + k + 1;\n        } else {\n            i = i + k + 1;\n        }\n        if (i == j) {\n            j++;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long len = 0;\n    long i = 1;\n    long j = 0;\n    while(i < n) {\n        if(temp[i] == temp[len]) {\n            len++;\n            i++;\n        } else {\n            if(len != 0) {\n                len = 0;\n            } else {\n                i++;\n            }\n        }\n    }\n    return len;",
    "    // Write your code here\n    long count = 0;\n    for (long i = 0; i < str.length(); i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if(str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        }\n        else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    long min = std::min(i, j);\n    return min;",
    "    if(str.length()==0)\n        return 0;\n    std::string temp=str+str;\n    long n=str.length();\n    long i=0;\n    long j=1;\n    long k=0;\n    while(i<n && j<n) {\n        k=0;\n        while(k<n && temp[i+k]==temp[j+k])\n            k++;\n        if(k==n)\n            break;\n        if(temp[i+k]>temp[j+k])\n            i=i+k+1;\n        else\n            j=j+k+1;\n        if(i==j)\n            j++;\n    }\n    return std::min(i,j);",
    "\tlong n = str.length();\n\tlong count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tlong max_ones = 0;\n\tlong max_zeros = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (str[i] == '1') {\n\t\t\tmax_ones++;\n\t\t}\n\t\telse {\n\t\t\tmax_zeros++;\n\t\t}\n\t\tif (max_ones == count) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tlong min_rotations = std::min(max_ones, max_zeros);\n\treturn min_rotations;",
    "    long count = 0;\n    for(long i = 0; i < str.length(); i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    return count;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        } else {\n            if(str[(i+k)%len] > str[(j+k)%len]) {\n                i = i + k + 1;\n            } else {\n                j = j + k + 1;\n            }\n            if(i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = (i + 1) % n;\n            j = (j + 1) % n;\n            count++;\n        }\n        else {\n            j = (j + 1) % n;\n            count++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n && k < n) {\n        if (str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        } else if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if (str[(i + k) % n] < str[(j + k) % n]) {\n            j = j + k + 1;\n            if (j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = 0;\n            j++;\n            count++;\n        }\n        else {\n            i++;\n            count++;\n        }\n    }\n    return i;",
    "\tstd::string temp = str + str;\n\tlong n = str.length();\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n && k < n) {\n\t\tif (temp[i + k] == temp[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\telse if (temp[i + k] > temp[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) {\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse if (temp[i + k] < temp[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) {\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        else {\n            max_count = 0;\n        }\n        if (max_count == count) {\n            return i + 1;\n        }\n    }\n    return -1;",
    "\t// Write your code here\n\tlong len = str.length();\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len && k < len) {\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) {\n\t\t\tk++;\n\t\t}\n\t\telse {\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) {\n\t\t\t\ti = i + k + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tj = j + k + 1;\n\t\t\t}\n\t\t\tif (i == j) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        }\n        else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if(max_ones == count) {\n            break;\n        }\n    }\n    long min_rotations = std::min(max_ones, max_zeros);\n    return min_rotations;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        if(str[i] == '0') {\n            count--;\n        }\n        if(max_ones + count == n) {\n            return i + 1;\n        }\n    }\n    return -1;",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] <= str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t}\n\t\telse {\n\t\t\ti = j;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] <= str[j + k]) {\n            j += k + 1;\n            if (j == i) {\n                j++;\n            }\n        } else {\n            i = std::max(i + k + 1, j);\n            j = i + 1;\n        }\n    }\n    return i;",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < len && j < len) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            count++;\n            if(count > len) {\n                return -1;\n            }\n            i = 0;\n            j = count;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = 0;\n            j = ++count;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    return i;",
    "    std::string temp = str + str;\n    long n = str.size();\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n && k < n) {\n        if (temp[i + k] == temp[j + k]) {\n            k++;\n        } else if (temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if (i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if (temp[i + k] < temp[j + k]) {\n            j = j + k + 1;\n            if (j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return (i < j) ? i : j;",
    "    // Write your code here\n    long count = 0;\n    long n = str.length();\n    for(long i = 0; i < n; i++) {\n        if(str[i] == 'a') {\n            count++;\n        }\n    }\n    long temp = count;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == 'a') {\n            temp--;\n        }\n        if(temp < count) {\n            count = temp;\n        }\n    }\n    return count;",
    "    long n = str.size();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = 0;\n            j = ++count;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            max_count = 0;\n        }\n        if (max_count > max_index) {\n            max_index = max_count;\n        }\n    }\n    if (count == n) {\n        return n;\n    }\n    return (n - max_index);",
    "\t// Write your code here\n\tlong n = str.size();\n\tstr += str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n && k < n) {\n\t\tif (str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\telse if (str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif (i <= j) {\n\t\t\t\ti = j + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t\telse {\n\t\t\tj = j + k + 1;\n\t\t\tif (j <= i) {\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn i < j ? i : j;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = (i + 1) % n;\n            j = (j + 1) % n;\n            count++;\n        }\n        else {\n            j = (j + 1) % n;\n            count++;\n        }\n    }\n    return i;",
    "    // Write your code here\n    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n])\n            k++;\n        if (k == n)\n            break;\n        if (str[(i + k) % n] > str[(j + k) % n])\n            i = i + k + 1;\n        else\n            j = j + k + 1;\n        if (i == j)\n            j++;\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long n = str.size();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(i < n && j < n) {\n        if(str[i] == str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            count++;\n            if(count == n) {\n                break;\n            }\n            j = i + 1;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while (i < len && j < len && k < len) {\n        if (str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        } else {\n            if (str[(i + k) % len] > str[(j + k) % len]) {\n                i = i + k + 1;\n            } else {\n                j = j + k + 1;\n            }\n            if (i == j) {\n                j++;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < len && j < len) {\n        k = 0;\n        while(k < len && str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        }\n        if(str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i + k < n && j + k < n) {\n        if(temp[i + k] == temp[j + k]) {\n            k++;\n        } else if(temp[i + k] > temp[j + k]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if (i < n - 1 && str[i + 1] == '0') {\n            max_zeros = 0;\n        }\n        if (i < n - 1 && str[i + 1] == '1') {\n            max_ones = 0;\n        }\n    }\n    return std::min(count, std::min(max_ones, max_zeros));",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if (i != n - 1 && str[i] == str[i + 1]) {\n            break;\n        }\n    }\n    return std::min(count, n - count);",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (k == n) {\n\t\t\treturn i;\n\t\t}\n\t\tif (str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tj = j + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(j == i) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long curr_ones = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            curr_ones++;\n        }\n        if(str[i] == '0') {\n            max_ones = std::max(max_ones, curr_ones);\n            curr_ones = 0;\n        }\n    }\n    max_ones = std::max(max_ones, curr_ones);\n    return (count - max_ones);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return n - max_count;",
    "\tlong len = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile(i < len && j < len) {\n\t\tk = 0;\n\t\twhile(k < len && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif(str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif(i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse if(str[i + k] < str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t\tif(i == j) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if (i < n - 1 && str[i] != str[i + 1]) {\n            break;\n        }\n    }\n    long min_rotations = std::min(max_ones, max_zeros);\n    return count - min_rotations;",
    "\tlong len = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < len && j < len) {\n\t\tk = 0;\n\t\twhile (k < len && str[(i + k) % len] == str[(j + k) % len]) {\n\t\t\tk++;\n\t\t}\n\t\tif (k == len) {\n\t\t\treturn i;\n\t\t}\n\t\tif (str[(i + k) % len] > str[(j + k) % len]) {\n\t\t\ti = i + k + 1;\n\t\t}\n\t\telse {\n\t\t\tj = j + k + 1;\n\t\t}\n\t\tif (i == j) {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (j == i) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while (i < n && j < n) {\n        if (str[i] == str[j]) {\n            i++;\n            j++;\n        } else {\n            count++;\n            i = 0;\n            j = count + 1;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<str.length();i++){\n        if(str[i]=='1'){\n            count++;\n        }\n    }\n    return count;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            break;\n        }\n    }\n    long min_count = max_count;\n    for (long i = 1; i < n; i++) {\n        long curr_count = 0;\n        if (str[i - 1] == '1') {\n            curr_count--;\n        }\n        if (str[i + n - 1] == '1') {\n            curr_count++;\n        }\n        max_count = std::max(max_count, curr_count);\n        min_count = std::min(min_count, curr_count);\n    }\n    return (count - min_count);",
    "    // Write your code here\n    long n = str.size();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < n && j < n && k < n) {\n        if(str[(i+k)%n] == str[(j+k)%n]) {\n            k++;\n        }\n        else if(str[(i+k)%n] > str[(j+k)%n]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        }\n        else if(str[(i+k)%n] < str[(j+k)%n]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    // Write your code here\n    long count = 0;\n    long n = str.length();\n    for(long i = 0; i < n; i++){\n        if(str[i] == '1'){\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long curr_ones = 0;\n    for(long i = 0; i < n; i++){\n        if(str[i] == '1'){\n            curr_ones++;\n        }\n        if(str[i] == '0'){\n            max_ones = std::max(max_ones, curr_ones);\n            curr_ones = 0;\n        }\n    }\n    max_ones = std::max(max_ones, curr_ones);\n    return n - max_ones;",
    "    // Write your code here\n    long count = 0;\n    long n = str.length();\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeros = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeros++;\n        }\n        if(max_ones == count) {\n            break;\n        }\n    }\n    long max_rotations = max_ones + max_zeros;\n    long curr_ones = 0;\n    long curr_zeros = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            curr_ones++;\n        }\n        else {\n            curr_zeros++;\n        }\n        if(curr_ones + (count - curr_ones) == max_rotations) {\n            break;\n        }\n    }\n    return n - (curr_ones + curr_zeros);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_ones_index = -1;\n    for (long i = 0; i < n; i++) {\n        long curr_ones = 0;\n        for (long j = i; j < n; j++) {\n            if (str[j] == '1') {\n                curr_ones++;\n            }\n        }\n        for (long j = 0; j < i; j++) {\n            if (str[j] == '1') {\n                curr_ones++;\n            }\n        }\n        if (curr_ones > max_ones) {\n            max_ones = curr_ones;\n            max_ones_index = i;\n        }\n    }\n    return count - max_ones;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i = 0;\n            j = j+1;\n        }\n        count++;\n    }\n    return j;",
    "\tlong len = str.length();\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < len && j < len && k < len) {\n\t\tif (str[(i + k) % len] == str[(j + k) % len]) {\n\t\t\tk++;\n\t\t}\n\t\telse {\n\t\t\tif (str[(i + k) % len] > str[(j + k) % len]) {\n\t\t\t\ti = i + k + 1;\n\t\t\t\tif (i <= j) {\n\t\t\t\t\ti = j + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tj = j + k + 1;\n\t\t\t\tif (j <= i) {\n\t\t\t\t\tj = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tk = 0;\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "    long count = 0;\n    std::string temp = str;\n    while(count < str.length()) {\n        temp = temp.substr(1, str.length() - 1) + temp[0];\n        if(temp == str) {\n            return count;\n        }\n        count++;\n    }\n    return count;",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] < str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t\tif (j == i) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ti = i + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (i < j) ? i : j;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < len && j < len) {\n        k = 0;\n        while (k < len && str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        }\n        if (str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] <= str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t}\n\t\telse {\n\t\t\ti = j;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] <= str[j + k]) {\n            j = j + k + 1;\n        }\n        else {\n            i = j;\n            j++;\n        }\n    }\n    return i;",
    "    long count = 0;\n    long n = str.length();\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        else {\n            max_count = 0;\n        }\n        count = std::max(count, max_count);\n    }\n    return (n - count);",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i+k)%len] == str[(j+k)%len]) {\n            k++;\n        } else if(str[(i+k)%len] > str[(j+k)%len]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if(str[(i+k)%len] < str[(j+k)%len]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long count = 0;\n    while(count < n) {\n        if(str[i] <= str[j]) {\n            i = 0;\n            j++;\n            count++;\n        }\n        else {\n            i++;\n            count++;\n        }\n    }\n    return i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            break;\n        }\n    }\n    long res = count - max_count;\n    return res;",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < n && j < n) {\n        k = 0;\n        while (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if (str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long curr_ones = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            curr_ones++;\n        }\n        if(str[i] == '0') {\n            max_ones = std::max(max_ones, curr_ones);\n            curr_ones = 0;\n        }\n    }\n    max_ones = std::max(max_ones, curr_ones);\n    return (count - max_ones);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        else {\n            max_count = 0;\n        }\n        count = std::max(count, max_count);\n    }\n    return n - count;",
    "    long n = str.length();\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_zeroes = 0;\n    for(long i = 0; i < n; i++) {\n        if(str[i] == '1') {\n            max_ones++;\n        }\n        else {\n            max_zeroes++;\n        }\n        if(max_ones == count) {\n            break;\n        }\n    }\n    long min_rotations = std::min(max_ones, max_zeroes);\n    return min_rotations;",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] <= str[j + k]) {\n\t\t\tj += k + 1;\n\t\t\tif (j == i) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ti += k + 1;\n\t\t\tif (i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (i < j) ? i : j;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return 0;\n    }\n    long max_count = 0;\n    long max_index = 0;\n    long curr_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            curr_count++;\n        }\n        if (str[i] == '0') {\n            if (curr_count > max_count) {\n                max_count = curr_count;\n                max_index = i;\n            }\n            curr_count = 0;\n        }\n    }\n    if (curr_count > max_count) {\n        max_count = curr_count;\n        max_index = n;\n    }\n    long ans = max_index - max_count + 1;\n    if (ans == n) {\n        ans = 0;\n    }\n    return ans;",
    "    // Write your code here\n    long count = 0;\n    for(long i = 0; i < str.length(); i++) {\n        if(str[i] == '1') {\n            count++;\n        }\n    }\n    if(count == str.length()) {\n        return -1;\n    }\n    long min_rotations = 0;\n    long max_rotations = str.length() - 1;\n    long mid = 0;\n    while(min_rotations < max_rotations) {\n        mid = (min_rotations + max_rotations) / 2;\n        if(str[mid] == '1') {\n            max_rotations = mid;\n        } else {\n            min_rotations = mid + 1;\n        }\n    }\n    return min_rotations;",
    "\tlong len = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0;\n\tlong j = 1;\n\tlong k = 0;\n\twhile (i < len && j < len) {\n\t\tk = 0;\n\t\twhile (k < len && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse if (str[i + k] < str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn std::min(i, j);",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1, k = 0;\n\twhile (i < n && j < n) {\n\t\tk = 0;\n\t\twhile (k < n && str[i + k] == str[j + k]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[i + k] > str[j + k]) {\n\t\t\ti = i + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse if (str[i + k] < str[j + k]) {\n\t\t\tj = j + k + 1;\n\t\t\tif (i == j) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n\treturn (i < j) ? i : j;",
    "\tlong n = str.length();\n\tstd::string temp = str + str;\n\tlong i = 0, j = 1;\n\twhile (i < n && j < n) {\n\t\tlong k = 0;\n\t\twhile (k < n && str[(i + k) % n] == str[(j + k) % n]) {\n\t\t\tk++;\n\t\t}\n\t\tif (str[(i + k) % n] <= str[(j + k) % n]) {\n\t\t\tj = j + k + 1;\n\t\t}\n\t\telse {\n\t\t\ti = i + k + 1;\n\t\t}\n\t\tif (i == j) {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        if (str[i] == '0') {\n            count--;\n        }\n        max_count = std::max(max_count, count);\n    }\n    return (n - max_count);",
    "    long len = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < len && j < len && k < len) {\n        if(str[(i + k) % len] == str[(j + k) % len]) {\n            k++;\n        } else if(str[(i + k) % len] > str[(j + k) % len]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        } else if(str[(i + k) % len] < str[(j + k) % len]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return (i < j) ? i : j;",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_ones = 0;\n    long max_index = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_ones++;\n        }\n        if (str[i] == '0') {\n            max_ones = 0;\n        }\n        if (max_ones > max_index) {\n            max_index = max_ones;\n        }\n    }\n    return (count - max_index);",
    "    long n = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while(i < n && j < n) {\n        k = 0;\n        while(k < n && str[(i + k) % n] == str[(j + k) % n]) {\n            k++;\n        }\n        if(str[(i + k) % n] > str[(j + k) % n]) {\n            i = i + k + 1;\n            if(i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if(i == j) {\n                j++;\n            }\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long i = 0;\n    long j = 1;\n    long k = 0;\n    while(i < n && j < n && k < n) {\n        if(str[(i+k)%n] == str[(j+k)%n]) {\n            k++;\n        }\n        else if(str[(i+k)%n] > str[(j+k)%n]) {\n            i = i + k + 1;\n            if(i <= j) {\n                i = j + 1;\n            }\n            k = 0;\n        }\n        else if(str[(i+k)%n] < str[(j+k)%n]) {\n            j = j + k + 1;\n            if(j <= i) {\n                j = i + 1;\n            }\n            k = 0;\n        }\n    }\n    return std::min(i, j);",
    "    long n = str.length();\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            count++;\n        }\n    }\n    long max_count = 0;\n    for (long i = 0; i < n; i++) {\n        if (str[i] == '1') {\n            max_count++;\n        }\n        else {\n            max_count = 0;\n        }\n        if (max_count == count) {\n            return i + 1;\n        }\n    }\n    return -1;",
    "    long len = str.length();\n    std::string temp = str + str;\n    long i = 0, j = 1, k = 0;\n    while (i < len && j < len) {\n        k = 0;\n        while (k < len && str[i + k] == str[j + k]) {\n            k++;\n        }\n        if (str[i + k] > str[j + k]) {\n            i = i + k + 1;\n            if (i == j) {\n                i++;\n            }\n        } else {\n            j = j + k + 1;\n            if (i == j) {\n                j++;\n            }\n        }\n    }\n    return (i < j) ? i : j;"
  ]
}