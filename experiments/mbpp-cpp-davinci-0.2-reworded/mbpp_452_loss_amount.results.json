{
  "name": "mbpp_452_loss_amount",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n    else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpfnuo9s0x: /tmp/tmpfnuo9s0x.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount){\n    return actual_cost-sale_amount;\n  }\n  else{\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp4aqbi3ao: /tmp/tmp4aqbi3ao.cpp:14: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  return (actual_cost > sale_amount) ? actual_cost - sale_amount : 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpypki7wpi: /tmp/tmpypki7wpi.cpp:9: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  return actual_cost-sale_amount;\n  else\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpiz6ocuok: /tmp/tmpiz6ocuok.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = actual_cost - sale_amount;\n    if(loss > 0)\n        return loss;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpzw_b26t5: /tmp/tmpzw_b26t5.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  return actual_cost-sale_amount;\n  else\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpiz6ocuok: /tmp/tmpiz6ocuok.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  return actual_cost-sale_amount;\n  else\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpiz6ocuok: /tmp/tmpiz6ocuok.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  return (actual_cost-sale_amount);\n  else\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp4kxlchpc: /tmp/tmp4kxlchpc.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost>sale_amount)\n\t\treturn actual_cost-sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp9gzo5542: /tmp/tmp9gzo5542.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here.\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmprnda8m4j: /tmp/tmprnda8m4j.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpbz6jsrr0: /tmp/tmpbz6jsrr0.cpp:11: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  long loss;\n  if(actual_cost>sale_amount)\n  {\n    loss=actual_cost-sale_amount;\n    return loss;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpsx_9ntdi: /tmp/tmpsx_9ntdi.cpp:19: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp7oywms0v: /tmp/tmp7oywms0v.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = 0;\n    if (actual_cost > sale_amount) {\n        loss = actual_cost - sale_amount;\n    }\n    return loss;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpcdqssrdl: /tmp/tmpcdqssrdl.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  return actual_cost > sale_amount ? actual_cost - sale_amount : 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpjg2byabr: /tmp/tmpjg2byabr.cpp:9: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return (actual_cost-sale_amount);\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpfk4302pu: /tmp/tmpfk4302pu.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp7oywms0v: /tmp/tmp7oywms0v.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  long loss;\n  if(actual_cost>sale_amount)\n  {\n      loss=actual_cost-sale_amount;\n      return loss;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpfyh1i8ty: /tmp/tmpfyh1i8ty.cpp:19: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    // Write your code here\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmphm2vdng8: /tmp/tmphm2vdng8.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  return (actual_cost - sale_amount);\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmprientdkr: /tmp/tmprientdkr.cpp:9: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  long loss = actual_cost - sale_amount;\n  if(loss < 0)\n    return 0;\n  else\n    return loss;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmph461lvcw: /tmp/tmph461lvcw.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount){\n    return actual_cost-sale_amount;\n  }\n  else{\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpsmcb7mmd: /tmp/tmpsmcb7mmd.cpp:15: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  long loss;\n  if(actual_cost>sale_amount)\n  {\n      loss=actual_cost-sale_amount;\n      return loss;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpfyh1i8ty: /tmp/tmpfyh1i8ty.cpp:19: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpbz6jsrr0: /tmp/tmpbz6jsrr0.cpp:11: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpdpppd62_: /tmp/tmpdpppd62_.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost>sale_amount)\n\t\treturn actual_cost-sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp9gzo5542: /tmp/tmp9gzo5542.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  long loss = actual_cost - sale_amount;\n  if(loss > 0)\n    return loss;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpjiev8am2: /tmp/tmpjiev8am2.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = 0;\n    if (actual_cost > sale_amount) {\n        loss = actual_cost - sale_amount;\n    }\n    return loss;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpcdqssrdl: /tmp/tmpcdqssrdl.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpbz6jsrr0: /tmp/tmpbz6jsrr0.cpp:11: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpzk02nl5o: /tmp/tmpzk02nl5o.cpp:11: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount){\n    return actual_cost-sale_amount;\n  }\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpcwwh6tb_: /tmp/tmpcwwh6tb_.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  return actual_cost-sale_amount;\n  else\n  return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp8659irdd: /tmp/tmp8659irdd.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  long loss = actual_cost - sale_amount;\n  if(loss > 0)\n    return loss;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpjiev8am2: /tmp/tmpjiev8am2.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpkefr68lt: /tmp/tmpkefr68lt.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = 0;\n    if(actual_cost > sale_amount) {\n        loss = actual_cost - sale_amount;\n    }\n    return loss;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp04kwycqa: /tmp/tmp04kwycqa.cpp:13: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  // Write your code here\n  if(actual_cost>sale_amount)\n  {\n      return actual_cost-sale_amount;\n  }\n  else\n  {\n      return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpgz7n91f5: /tmp/tmpgz7n91f5.cpp:17: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost>sale_amount)\n\t\treturn actual_cost-sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp9gzo5542: /tmp/tmp9gzo5542.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost>sale_amount)\n\t\treturn actual_cost-sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmp9gzo5542: /tmp/tmp9gzo5542.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n    return actual_cost-sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpk7fwvjys: /tmp/tmpk7fwvjys.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost>sale_amount)\n  {\n    return actual_cost-sale_amount;\n  }\n  else\n  {\n    return 0;\n  }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp366wbp2i: /tmp/tmp366wbp2i.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    long loss = 0;\n    if(actual_cost > sale_amount)\n        loss = actual_cost - sale_amount;\n    return loss;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpjahdkltl: /tmp/tmpjahdkltl.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n        return actual_cost-sale_amount;\n    else\n        return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmpuwy9dhc6: /tmp/tmpuwy9dhc6.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost > sale_amount)\n        return actual_cost - sale_amount;\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpbz6jsrr0: /tmp/tmpbz6jsrr0.cpp:11: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n\tif(actual_cost > sale_amount)\n\t\treturn actual_cost - sale_amount;\n\telse\n\t\treturn 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1666122636,
      "stdout": "",
      "stderr": "tmpdpppd62_: /tmp/tmpdpppd62_.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n    if(actual_cost>sale_amount)\n    {\n        return actual_cost-sale_amount;\n    }\n    else\n    {\n        return 0;\n    }\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp7j513206: /tmp/tmp7j513206.cpp:16: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlong loss_amount(long actual_cost, long sale_amount) {\n  if(actual_cost > sale_amount)\n    return actual_cost - sale_amount;\n  else\n    return 0;\n}\nint main() {\n    auto candidate = loss_amount;\n    assert(candidate((1500), (1200)) == (0));\n    assert(candidate((100), (200)) == (100));\n    assert(candidate((2000), (5000)) == (3000));\n}\n",
      "timestamp": 1665510179,
      "stdout": "",
      "stderr": "tmp07qvsxs7: /tmp/tmp07qvsxs7.cpp:12: int main(): Assertion `candidate((1500), (1200)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}