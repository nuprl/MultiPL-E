{
  "name": "mbpp_99_decimal_to_binary",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nstd::string decimal_to_binary(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((8)) == (\"1000\"));\n    assert(candidate((18)) == (\"10010\"));\n    assert(candidate((7)) == (\"111\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string binary;\n    while(n) {\n        binary += std::to_string(n % 2);\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    while(n) {\n        binary.push_back(n%2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary_string = \"\";\n    while (n > 0) {\n        binary_string += std::to_string(n % 2);\n        n /= 2;\n    }\n    std::reverse(binary_string.begin(), binary_string.end());\n    return binary_string;",
    "    std::string s;\n    while(n) {\n        s.push_back(n%2 + '0');\n        n /= 2;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s;\n    while(n>0) {\n        s.push_back(n%2+'0');\n        n/=2;\n    }\n    std::reverse(s.begin(),s.end());\n    return s;",
    "    std::string result;\n    while(n) {\n        result += (n%2) + '0';\n        n /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n    return result;",
    "    std::string binary;\n    while(n) {\n        binary.push_back(n%2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    while(n) {\n        binary.push_back(n % 2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary = \"\";\n    while(n>0) {\n        binary = std::to_string(n%2) + binary;\n        n = n/2;\n    }\n    return binary;",
    "    std::string binary_string = \"\";\n    while (n > 0) {\n        binary_string = std::to_string(n % 2) + binary_string;\n        n /= 2;\n    }\n    return binary_string;",
    "    std::string binary;\n    while(n>0) {\n        binary.push_back(n%2+'0');\n        n/=2;\n    }\n    std::reverse(binary.begin(),binary.end());\n    return binary;",
    "    std::string binary;\n    while (n > 0) {\n        binary = std::to_string(n % 2) + binary;\n        n /= 2;\n    }\n    return binary;",
    "    std::string binary = \"\";\n    while(n > 0) {\n        binary = std::to_string(n % 2) + binary;\n        n = n / 2;\n    }\n    return binary;",
    "    std::string binary_string = \"\";\n    while(n > 0) {\n        binary_string = std::to_string(n % 2) + binary_string;\n        n /= 2;\n    }\n    return binary_string;",
    "    std::string binary = \"\";\n    while(n != 0) {\n        binary = std::to_string(n%2) + binary;\n        n /= 2;\n    }\n    return binary;",
    "    std::string binary;\n    while (n > 0) {\n        binary.push_back(n % 2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    while(n) {\n        binary.push_back(n%2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    while (n) {\n        binary += std::to_string(n % 2);\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary = \"\";\n    while(n > 0) {\n        binary = std::to_string(n % 2) + binary;\n        n /= 2;\n    }\n    return binary;",
    "    std::string binary;\n    while(n > 0) {\n        binary.push_back(n%2 + '0');\n        n /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return binary;"
  ]
}