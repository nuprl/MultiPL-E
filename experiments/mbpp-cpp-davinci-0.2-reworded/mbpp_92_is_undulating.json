{
  "name": "mbpp_92_is_undulating",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether the given number is undulating or not.\nbool is_undulating(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_undulating;\n    assert(candidate((1212121)) == (true));\n    assert(candidate((1991)) == (false));\n    assert(candidate((121)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 2; ++i) {\n        if (digits[i] != digits[i + 2]) {\n            return false;\n        }\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev = n % 10;\n    n /= 10;\n    int curr;\n    bool is_increasing = true;\n    while (n) {\n        curr = n % 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev = curr;\n        n /= 10;\n    }\n    return true;",
    "    long prev = -1;\n    long curr = n % 10;\n    n /= 10;\n    while (n) {\n        long next = n % 10;\n        if (prev != -1) {\n            if (prev == next) {\n                return false;\n            }\n        }\n        prev = curr;\n        curr = next;\n        n /= 10;\n    }\n    return true;",
    "  int last_digit = n % 10;\n  n /= 10;\n  int curr_digit;\n  bool is_increasing = true;\n  while (n > 0) {\n    curr_digit = n % 10;\n    if (is_increasing) {\n      if (curr_digit > last_digit) {\n        return false;\n      }\n    } else {\n      if (curr_digit < last_digit) {\n        return false;\n      }\n    }\n    last_digit = curr_digit;\n    n /= 10;\n    is_increasing = !is_increasing;\n  }\n  return true;",
    "    // Write your code here\n    int count=0;\n    int prev=n%10;\n    n=n/10;\n    while(n>0){\n        int curr=n%10;\n        if(prev==curr){\n            return false;\n        }\n        prev=curr;\n        n=n/10;\n    }\n    return true;",
    "    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) return false;\n        prev = curr;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit = n % 10;\n    n /= 10;\n    bool is_increasing = prev_digit > curr_digit;\n    while (n > 0) {\n        prev_digit = curr_digit;\n        curr_digit = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (prev_digit < curr_digit) {\n                return false;\n            }\n        } else {\n            if (prev_digit > curr_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "\tint last_digit = n % 10;\n\tn /= 10;\n\twhile (n > 0) {\n\t\tint curr_digit = n % 10;\n\t\tif (curr_digit == last_digit) {\n\t\t\treturn false;\n\t\t}\n\t\tlast_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\treturn true;",
    "    int prev = n % 10;\n    n /= 10;\n    int curr = n % 10;\n    n /= 10;\n    bool is_increasing = curr > prev;\n    while (n > 0) {\n        prev = curr;\n        curr = n % 10;\n        n /= 10;\n        if (is_increasing) {\n            if (curr > prev) {\n                return false;\n            }\n        } else {\n            if (curr < prev) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    long prev = n % 10;\n    n /= 10;\n    while (n) {\n        long curr = n % 10;\n        if (prev != curr) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (digit < prev_digit) {\n                return false;\n            }\n        }\n        prev_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    int prev = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr = n % 10;\n        if (curr == prev) {\n            return false;\n        }\n        prev = curr;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    bool is_increasing = true;\n    while (n > 0) {\n        int digit = n % 10;\n        if (is_increasing) {\n            if (digit > last_digit) {\n                return false;\n            }\n        } else {\n            if (digit < last_digit) {\n                return false;\n            }\n        }\n        last_digit = digit;\n        n /= 10;\n        is_increasing = !is_increasing;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit == last_digit) {\n            return false;\n        }\n        last_digit = digit;\n        n /= 10;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit == prev_digit) {\n            return false;\n        }\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    int last_digit = n % 10;\n    n /= 10;\n    while (n > 0) {\n        int curr_digit = n % 10;\n        if (curr_digit != last_digit) {\n            return false;\n        }\n        last_digit = curr_digit;\n        n /= 10;\n    }\n    return true;",
    "    // Write your code here\n    int count = 0;\n    int prev = -1;\n    while(n > 0) {\n        int curr = n % 10;\n        if(prev == -1) {\n            prev = curr;\n            n = n / 10;\n            continue;\n        }\n        if(prev == curr) {\n            return false;\n        }\n        if(prev > curr) {\n            count++;\n        }\n        prev = curr;\n        n = n / 10;\n    }\n    if(count == 0) {\n        return false;\n    }\n    return true;",
    "    int prev_digit = n % 10;\n    n /= 10;\n    int curr_digit;\n    bool is_increasing = true;\n    while (n > 0) {\n        curr_digit = n % 10;\n        if (is_increasing) {\n            if (curr_digit > prev_digit) {\n                return false;\n            }\n        } else {\n            if (curr_digit < prev_digit) {\n                return false;\n            }\n        }\n        is_increasing = !is_increasing;\n        prev_digit = curr_digit;\n        n /= 10;\n    }\n    return true;"
  ]
}