{
  "name": "mbpp_297_flatten_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to flatten a given nested vector structure.\nstd::vector<long> flatten_list(std::any list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::any({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            for (auto j : list4) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list5 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list5) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list6 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list6) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list7) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list8) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list9 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list9) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list10 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list10) {\n                                                                    if (p.type() == typeid(std",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list){\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else if(list1.type() == typeid(long)){\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            auto temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else if(list1.type() == typeid(long)){\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            for (auto j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        list2 = std::any_cast<std::vector<long>>(list1);\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            for (auto &j : list3) {\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else{\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    else {\n        list2.push_back(list1);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> res;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            res.insert(res.end(), temp.begin(), temp.end());\n        }\n    } else {\n        res.push_back(std::any_cast<long>(list1));\n    }\n    return res;"
  ]
}