{
  "name": "mbpp_297_flatten_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to flatten a given nested vector structure.\nstd::vector<long> flatten_list(std::any list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = flatten_list;\n    assert(candidate((std::any({0, 10, std::vector<long>({(long)20, (long)30}), 40, 50, std::vector<long>({(long)60, (long)70, (long)80}), std::vector<long>({(long)90, (long)100, (long)110, (long)120})}))) == (std::vector<long>({(long)0, (long)10, (long)20, (long)30, (long)40, (long)50, (long)60, (long)70, (long)80, (long)90, (long)100, (long)110, (long)120})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)40}), (std::vector<long>)std::vector<long>({(long)30, (long)56, (long)25}), (std::vector<long>)std::vector<long>({(long)10, (long)20}), (std::vector<long>)std::vector<long>({(long)33}), (std::vector<long>)std::vector<long>({(long)40})}))) == (std::vector<long>({(long)10, (long)20, (long)40, (long)30, (long)56, (long)25, (long)10, (long)20, (long)33, (long)40})));\n    assert(candidate((std::any({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)10, (long)11, (long)12, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            for (auto j : list4) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list5 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list5) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list6 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list6) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list7) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list8) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list9 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list9) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list10 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list10) {\n                                                                    if (p.type() == typeid(std",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list){\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else if(list1.type() == typeid(long)){\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            auto temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else if(list1.type() == typeid(long)){\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            for (auto j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        list2 = std::any_cast<std::vector<long>>(list1);\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            for (auto &j : list3) {\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else{\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    else {\n        list2.push_back(list1);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> res;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            res.insert(res.end(), temp.begin(), temp.end());\n        }\n    } else {\n        res.push_back(std::any_cast<long>(list1));\n    }\n    return res;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto elem : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(elem);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n      std::vector<long> temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(long)) {\n        flat_list.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3){\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> flat_list;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto list2 : std::any_cast<std::vector<long>>(list1)) {\n      flat_list.push_back(list2);\n    }\n  } else {\n    flat_list.push_back(std::any_cast<long>(list1));\n  }\n  return flat_list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3){\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            for (auto j : list3) {\n                list2.push_back(j);\n            }\n        }\n    } else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list3) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            } else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        for(auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        for(auto i: std::any_cast<std::vector<long>>(list1)){\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i: std::any_cast<std::vector<std::any>>(list1)){\n            for(auto j: flatten_list(i)){\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(long)) {\n        list.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list2) {\n            std::vector<long> list3 = flatten_list(i);\n            list.insert(list.end(), list3.begin(), list3.end());\n        }\n    }\n    return list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                result.insert(result.end(), temp.begin(), temp.end());\n            }\n            else {\n                result.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(int i=0;i<list3.size();i++){\n            list2.push_back(list3[i]);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i=0;i<list3.size();i++){\n            std::vector<long> list4 = flatten_list(list3[i]);\n            for(int j=0;j<list4.size();j++){\n                list2.push_back(list4[j]);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3){\n            list2.insert(list2.end(), flatten_list(i).begin(), flatten_list(i).end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        list2 = std::any_cast<std::vector<long>>(list1);\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i=0;i<list3.size();i++){\n            std::vector<long> list4 = flatten_list(list3[i]);\n            for(int j=0;j<list4.size();j++){\n                list2.push_back(list4[j]);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            for (auto j : list4) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto& i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto& i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    }\n    return list2;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto i : std::any_cast<std::vector<long>>(list1)) {\n      if (i.type() == typeid(std::vector<long>)) {\n        std::vector<long> temp = flatten_list(i);\n        list2.insert(list2.end(), temp.begin(), temp.end());\n      } else {\n        list2.push_back(std::any_cast<long>(i));\n      }\n    }\n  } else {\n    list2.push_back(std::any_cast<long>(list1));\n  }\n  return list2;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      std::vector<long> list3 = flatten_list(i);\n      list2.insert(list2.end(), list3.begin(), list3.end());\n    }\n  } else {\n    list2.push_back(std::any_cast<long>(list1));\n  }\n  return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            result.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            } else if (i.type() == typeid(long)) {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        for(auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else if(list1.type() == typeid(long)){\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "  std::vector<long> result;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n      std::vector<long> temp = flatten_list(i);\n      result.insert(result.end(), temp.begin(), temp.end());\n    }\n  } else {\n    result.push_back(std::any_cast<long>(list1));\n  }\n  return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (std::any i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list2 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list2) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list3 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list3) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list4 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list4) {\n                            list.push_back(std::any_cast<long>(k));\n                        }\n                    } else {\n                        list.push_back(std::any_cast<long>(j));\n                    }\n                }\n            } else {\n                list.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i=0;i<list3.size();i++){\n            std::vector<long> list4 = flatten_list(list3[i]);\n            for(int j=0;j<list4.size();j++){\n                list2.push_back(list4[j]);\n            }\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        for(auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            for(auto j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(long i = 0; i < list3.size(); i++) {\n            list2.push_back(list3[i]);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list4 = std::any_cast<std::vector<std::any>>(list1);\n        for(long i = 0; i < list4.size(); i++) {\n            std::vector<long> list5 = flatten_list(list4[i]);\n            for(long j = 0; j < list5.size(); j++) {\n                list2.push_back(list5[j]);\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        for(auto i : std::any_cast<std::vector<long>>(list1)) {\n            if(i.type() == typeid(std::vector<long>)) {\n                for(auto j : flatten_list(i)) {\n                    list2.push_back(j);\n                }\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list2 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list2) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list3 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list3) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list4 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list4) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list5 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list5) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list6 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list6) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list7) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list8) {\n                                                                    if (p.type() == typeid(std::vector<",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list) {\n            result.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            for(auto j : temp) {\n                result.push_back(j);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            for (auto j : list4) {\n                list2.push_back(j);\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &item : std::any_cast<std::vector<long>>(list1)) {\n            if (item.type() == typeid(std::vector<long>)) {\n                auto list3 = flatten_list(item);\n                list2.insert(list2.end(), list3.begin(), list3.end());\n            } else {\n                list2.push_back(std::any_cast<long>(item));\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    if(j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list5 = std::any_cast<std::vector<long>>(j);\n                        for(auto k : list5) {\n                            if(k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list6 = std::any_cast<std::vector<long>>(k);\n                                for(auto l : list6) {\n                                    if(l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(l);\n                                        for(auto m : list7) {\n                                            if(m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(m);\n                                                for(auto n : list8) {\n                                                    if(n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list9 = std::any_cast<std::vector<long>>(n);\n                                                        for(auto o : list9) {\n                                                            if(o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list10 = std::any_cast<std::vector<long>>(o);\n                                                                for(auto p : list10) {\n                                                                    if(p.type() == typeid(std",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto x: list) {\n            std::vector<long> temp = flatten_list(x);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> flat_list;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i: list) {\n            if(i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> flat_list_temp = flatten_list(i);\n                flat_list.insert(flat_list.end(), flat_list_temp.begin(), flat_list_temp.end());\n            } else {\n                flat_list.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &elem : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(elem);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> flat_list;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list2 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list2) {\n                    result.push_back(j);\n                }\n            }\n            else {\n                result.push_back(i);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list2 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list2) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list3 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list3) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list4 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list4) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list5 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list5) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list6 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list6) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list7 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list7) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list8 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list8) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list9 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list9) {\n                                                                    if (p.type() == typeid(std::",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<long>)) {\n    list2 = std::any_cast<std::vector<long>>(list1);\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i = list3.begin(); i != list3.end(); i++) {\n      std::vector<long> list4 = flatten_list(*i);\n      list2.insert(list2.end(), list4.begin(), list4.end());\n    }\n  } else {\n    list2.push_back(std::any_cast<long>(list1));\n  }\n  return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list2 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list2) {\n                    flat_list.push_back(j);\n                }\n            } else {\n                flat_list.push_back(i);\n            }\n        }\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(std::any i: list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4) {\n                    if(j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list5 = std::any_cast<std::vector<long>>(j);\n                        for(auto k : list5) {\n                            if(k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list6 = std::any_cast<std::vector<long>>(k);\n                                for(auto l : list6) {\n                                    if(l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(l);\n                                        for(auto m : list7) {\n                                            if(m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(m);\n                                                for(auto n : list8) {\n                                                    if(n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list9 = std::any_cast<std::vector<long>>(n);\n                                                        for(auto o : list9) {\n                                                            if(o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list10 = std::any_cast<std::vector<long>>(o);\n                                                                for(auto p : list10) {\n                                                                    if(p.type() == typeid(std",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto item : list) {\n            std::vector<long> temp = flatten_list(item);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto &i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    else{\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list4) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list5 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list5) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list6 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list6) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list7 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list7) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list8 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list8) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list9 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list9) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list10 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list10) {\n                                                                    if (p.type() == typeid(std",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n            } else {\n                flat_list.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        for(auto i : std::any_cast<std::vector<long>>(list1)){\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list2 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list2) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list3 = std::any_cast<std::vector<long>>(i);\n                for (auto j : list3) {\n                    if (j.type() == typeid(std::vector<long>)) {\n                        std::vector<long> list4 = std::any_cast<std::vector<long>>(j);\n                        for (auto k : list4) {\n                            if (k.type() == typeid(std::vector<long>)) {\n                                std::vector<long> list5 = std::any_cast<std::vector<long>>(k);\n                                for (auto l : list5) {\n                                    if (l.type() == typeid(std::vector<long>)) {\n                                        std::vector<long> list6 = std::any_cast<std::vector<long>>(l);\n                                        for (auto m : list6) {\n                                            if (m.type() == typeid(std::vector<long>)) {\n                                                std::vector<long> list7 = std::any_cast<std::vector<long>>(m);\n                                                for (auto n : list7) {\n                                                    if (n.type() == typeid(std::vector<long>)) {\n                                                        std::vector<long> list8 = std::any_cast<std::vector<long>>(n);\n                                                        for (auto o : list8) {\n                                                            if (o.type() == typeid(std::vector<long>)) {\n                                                                std::vector<long> list9 = std::any_cast<std::vector<long>>(o);\n                                                                for (auto p : list9) {\n                                                                    if (p.type() == typeid(std::",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3){\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list2 = std::any_cast<std::vector<long>>(list1);\n        for (int i = 0; i < list2.size(); i++) {\n            if (list2[i].type() == typeid(std::vector<long>)) {\n                std::vector<long> list3 = std::any_cast<std::vector<long>>(list2[i]);\n                for (int j = 0; j < list3.size(); j++) {\n                    list.push_back(list3[j]);\n                }\n            }\n            else {\n                list.push_back(list2[i]);\n            }\n        }\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3) {\n            if(i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            } else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        list2 = std::any_cast<std::vector<long>>(list1);\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        auto list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            auto list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i:list3){\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n    for (auto i : list) {\n        if (i.type() == typeid(std::vector<std::any>)) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n        else {\n            result.push_back(std::any_cast<long>(i));\n        }\n    }\n    return result;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n      auto list3 = flatten_list(i);\n      list2.insert(list2.end(), list3.begin(), list3.end());\n    }\n  } else {\n    list2.push_back(std::any_cast<long>(list1));\n  }\n  return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    }\n    else if (list1.type() == typeid(long)) {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            if (i.type() == typeid(std::vector<long>)) {\n                auto list3 = flatten_list(i);\n                list2.insert(list2.end(), list3.begin(), list3.end());\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(long)) {\n        flat_list.push_back(std::any_cast<long>(list1));\n        return flat_list;\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    std::vector<std::any> list3;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            }\n            else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i: list3){\n            if(i.type() == typeid(std::vector<long>)){\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j: list4){\n                    list2.push_back(j);\n                }\n            }\n            else{\n                list2.push_back(i);\n            }\n        }\n    }\n    else{\n        list2.push_back(list1);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto &i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    } else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            for (auto &j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)){\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list3){\n            std::vector<long> list4 = flatten_list(i);\n            for(auto j : list4){\n                list2.push_back(j);\n            }\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto x : list3) {\n            std::vector<long> list4 = flatten_list(x);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type()==typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i=0;i<list3.size();i++){\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(),list4.begin(),list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(long i = 0; i < list3.size(); i++) {\n            if(list3[i].type() == typeid(std::vector<long>)) {\n                std::vector<long> list4 = flatten_list(list3[i]);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            }\n            else {\n                list2.push_back(list3[i]);\n            }\n        }\n    }\n    else {\n        list2.push_back(list1);\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(long i = 0; i < list3.size(); i++) {\n            list2.push_back(list3[i]);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(long i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            for(long j = 0; j < list4.size(); j++) {\n                list2.push_back(list4[j]);\n            }\n        }\n    }\n    else {\n        assert(false);\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i = 0; i < list3.size(); i++) {\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else if(list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<long>)) {\n        for (auto i : std::any_cast<std::vector<long>>(list1)) {\n            list2.push_back(i);\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            for (auto j : flatten_list(i)) {\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto temp = flatten_list(i);\n            list.insert(list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        list.push_back(std::any_cast<long>(list1));\n    }\n    return list;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(i);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else if(list1.type() == typeid(long)) {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        std::vector<long> list3 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list3){\n            if(i.type() == typeid(std::vector<long>)){\n                std::vector<long> list4 = std::any_cast<std::vector<long>>(i);\n                for(auto j : list4){\n                    list2.push_back(j);\n                }\n            }\n            else{\n                list2.push_back(i);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list3) {\n            if (i.type() == typeid(std::vector<std::any>)) {\n                std::vector<long> list4 = flatten_list(i);\n                list2.insert(list2.end(), list4.begin(), list4.end());\n            } else {\n                list2.push_back(std::any_cast<long>(i));\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for (auto &i : list3) {\n            std::vector<long> list4 = flatten_list(i);\n            list2.insert(list2.end(), list4.begin(), list4.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<long>)){\n        for(auto i:std::any_cast<std::vector<long>>(list1)){\n            list2.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        for(auto i:std::any_cast<std::vector<std::any>>(list1)){\n            for(auto j:flatten_list(i)){\n                list2.push_back(j);\n            }\n        }\n    }\n    return list2;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for (auto i : list) {\n            if (i.type() == typeid(std::vector<long>)) {\n                std::vector<long> temp = flatten_list(i);\n                flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n            } else {\n                flat_list.push_back(std::any_cast<long>(i));\n            }\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            auto list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(long)) {\n        result.push_back(std::any_cast<long>(list1));\n    } else {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    }\n    return result;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list3 = std::any_cast<std::vector<std::any>>(list1);\n        for(int i=0;i<list3.size();i++){\n            std::vector<long> list4 = flatten_list(list3[i]);\n            list2.insert(list2.end(),list4.begin(),list4.end());\n        }\n    }\n    else{\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list;\n    if(list1.type() == typeid(std::vector<long>)){\n        std::vector<long> list2 = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list2){\n            list.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)){\n        std::vector<std::any> list2 = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list2){\n            std::vector<long> list3 = flatten_list(i);\n            for(auto j : list3){\n                list.push_back(j);\n            }\n        }\n    }\n    return list;",
    "    std::vector<long> flat_list;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            flat_list.insert(flat_list.end(), temp.begin(), temp.end());\n        }\n    } else {\n        flat_list.push_back(std::any_cast<long>(list1));\n    }\n    return flat_list;",
    "  std::vector<long> list2;\n  if (list1.type() == typeid(std::vector<long>)) {\n    for (auto i : std::any_cast<std::vector<long>>(list1)) {\n      list2.push_back(i);\n    }\n  } else if (list1.type() == typeid(std::vector<std::any>)) {\n    for (auto i : std::any_cast<std::vector<std::any>>(list1)) {\n      for (auto j : flatten_list(i)) {\n        list2.push_back(j);\n      }\n    }\n  }\n  return list2;",
    "    std::vector<long> flat_list;\n    if(list1.type() == typeid(std::vector<long>)) {\n        std::vector<long> list = std::any_cast<std::vector<long>>(list1);\n        for(auto i : list) {\n            flat_list.push_back(i);\n        }\n    }\n    else if(list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for(auto i : list) {\n            std::vector<long> temp_list = flatten_list(i);\n            for(auto j : temp_list) {\n                flat_list.push_back(j);\n            }\n        }\n    }\n    return flat_list;",
    "    std::vector<long> result;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list1);\n        for (auto i : list) {\n            std::vector<long> temp = flatten_list(i);\n            result.insert(result.end(), temp.begin(), temp.end());\n        }\n    } else {\n        result.push_back(std::any_cast<long>(list1));\n    }\n    return result;",
    "    std::vector<long> list2;\n    if (list1.type() == typeid(std::vector<std::any>)) {\n        for (auto &i : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> list3 = flatten_list(i);\n            list2.insert(list2.end(), list3.begin(), list3.end());\n        }\n    } else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;",
    "    std::vector<long> list2;\n    if(list1.type() == typeid(std::vector<std::any>)) {\n        for(auto elem : std::any_cast<std::vector<std::any>>(list1)) {\n            std::vector<long> temp = flatten_list(elem);\n            list2.insert(list2.end(), temp.begin(), temp.end());\n        }\n    }\n    else {\n        list2.push_back(std::any_cast<long>(list1));\n    }\n    return list2;"
  ]
}