{
  "name": "mbpp_279_is_num_decagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth decagonal number.\nlong is_num_decagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_num_decagonal;\n    assert(candidate((3)) == (27));\n    assert(candidate((7)) == (175));\n    assert(candidate((10)) == (370));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long nth_decagonal_num = 0;\n    nth_decagonal_num = n * (3 * n - 2);\n    return nth_decagonal_num;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x * (3 * x - 1) / 2 == n;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long a = (3 * n * n - n) / 2;\n    return a;",
    "    double x = (sqrt(1 + 4 * 2 * n) + 1.0) / 2.0;\n    return x == (long long)x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x * (3 * x - 1) / 2 == n;",
    "    double x = (sqrt(1 + 4 * 2 * n) + 1) / 2;\n    return x == (long)x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long a = (3 * n * n - n) / 2;\n    return a;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    float a = (3 + sqrt(9 + 40 * n)) / 10;\n    if (a == (int) a)\n        return 1;\n    return 0;",
    "    long nth_decagonal = n * (3 * n - 1) / 2;\n    return nth_decagonal;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (int) x;",
    "    long num = n;\n    long nth_num = 0;\n    long count = 1;\n    while(nth_num < num) {\n        nth_num = (3*count*count - count)/2;\n        count++;\n    }\n    if(nth_num == num)\n        return 1;\n    return 0;",
    "    float a = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (a == (int)a)\n        return 1;\n    else\n        return 0;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    return a * (3 * a - 1) / 2 == n;",
    "    long num = 0;\n    for(long i = 1; i <= n; i++) {\n        num = i * (3 * i - 1) / 2;\n    }\n    return num;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n*(3*n-2))/2;\n    return nth_decagonal;",
    "    double num = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return num == (int)num;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3 * n * n - n) / 2;\n    return num;",
    "    float x = (sqrt(1 + 4*2*n) - 1)/2;\n    if(x == (int)x)\n        return 1;\n    return 0;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (int)x;",
    "    long num = n;\n    long nth_num = 0;\n    long count = 0;\n    while (nth_num < num) {\n        nth_num = (3*nth_num*nth_num - nth_num)/2;\n        count++;\n    }\n    if (nth_num == num) {\n        return count;\n    } else {\n        return 0;\n    }",
    "    long nth_decagonal = 0;\n    nth_decagonal = (3*n*n - n)/2;\n    return nth_decagonal;",
    "    long nth_decagonal_num = 0;\n    nth_decagonal_num = (n * (3 * n - 2)) / 2;\n    return nth_decagonal_num;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    return num == 0;",
    "  long a = (3 + sqrt(9 + 40 * n)) / 10;\n  return a * (3 * a - 1) / 2 == n;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return x;\n    }\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    long num = (3 * n * n - n) / 2;\n    return num;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 4;\n    }\n    if(n == 0) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    if (a * (3 * a - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "  long i = 1;\n  while(i*(3*i-2) < n) {\n    i++;\n  }\n  if(i*(3*i-2) == n) {\n    return 1;\n  }\n  return 0;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    if (a * (3 * a - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long num = n;\n    long nth_decagonal = 0;\n    long i = 0;\n    while(nth_decagonal < num) {\n        i++;\n        nth_decagonal = i * (3 * i - 1) / 2;\n    }\n    if(nth_decagonal == num) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "  long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  if (x * (3 * x - 1) / 2 == n) {\n    return 1;\n  }\n  return 0;",
    "    long num = n;\n    long num_decagonal = 0;\n    while(num > 0) {\n        num_decagonal = num_decagonal * 10 + num % 10;\n        num /= 10;\n    }\n    return num_decagonal;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    return num == 0;",
    "    long num = n;\n    long root = (1 + sqrt(1 + 4 * 2 * num)) / 2;\n    if (root * (3 * root - 1) / 2 == num)\n        return 1;\n    return 0;",
    "    long num = n;\n    long nth_term = (3*num*num - num)/2;\n    return nth_term;",
    "    long num = n;\n    long nth_num = 0;\n    long i = 1;\n    while(nth_num < num) {\n        nth_num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(nth_num == num) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long count = 0;\n    while(num > 0) {\n        num = num / 10;\n        count++;\n    }\n    if(count == 10) {\n        return 1;\n    }\n    return 0;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n*(3*n-2))/2;\n    return nth_decagonal;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "  long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  return x * (3 * x - 1) / 2 == n;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long num = n;\n    long nth_num = 0;\n    while(num > 0) {\n        nth_num = nth_num + num%10;\n        num = num/10;\n    }\n    if(nth_num == 10) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i * 10;\n        i++;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    long num = (3 * n * n - n) / 2;\n    return num;",
    "    double x = (sqrt(40*n+9)+3)/10;\n    if (x == (int)x)\n        return 1;\n    return 0;",
    "    long num = n;\n    long i = 1;\n    while (num > 0) {\n        num -= i;\n        i += 4;\n    }\n    return num == 0;",
    "  long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  if (x * (3 * x - 1) / 2 == n)\n    return 1;\n  return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) + 1.0) / 2.0;\n    return x == (int)x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i*10;\n        i++;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 4;\n    }\n    return n == 0;",
    "    long num = (3 * n * n - n) / 2;\n    return num;",
    "  long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  if (x * (3 * x - 1) / 2 == n) {\n    return 1;\n  }\n  return 0;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long num = n;\n    long nth_decagonal = 0;\n    long i = 1;\n    while(nth_decagonal < num) {\n        nth_decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(nth_decagonal == num) {\n        return 1;\n    } else {\n        return 0;\n    }",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    return a;",
    "    long i = 1;\n    long decagonal = 0;\n    while (decagonal < n) {\n        decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if (decagonal == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long num = n;\n    long decagonal = 0;\n    long i = 1;\n    while(decagonal < num) {\n        decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(decagonal == num) {\n        return 1;\n    }\n    return 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 4;\n    }\n    if(n == 0) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long) x;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    long num = n;\n    long nth_decagonal_num = 0;\n    long i = 1;\n    while(nth_decagonal_num < num) {\n        nth_decagonal_num = (i * (3 * i - 1)) / 2;\n        if(nth_decagonal_num == num) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    else\n        return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= 3*i + 1;\n        i++;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long num = n;\n    long nth_num = 0;\n    long i = 1;\n    while(nth_num < num) {\n        nth_num = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(nth_num == num) {\n        return 1;\n    } else {\n        return 0;\n    }",
    "    long num = n;\n    long root = sqrt(2*num);\n    if(root*(root+1) == 2*num) {\n        return 1;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x == (long) x)\n        return 1;\n    return 0;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    return a;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long a = (3 + sqrt(9 + 40*n))/10;\n    if(a*(3*a - 1)/2 == n)\n        return 1;\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    float a = (3 + sqrt(9 + 40*n))/10;\n    if (a == (int)a) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x * (3 * x - 1) / 2 == n;",
    "    long num = (3 * n * n - n) / 2;\n    return num;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x * (3 * x - 1) / 2 == n;",
    "    long num = n;\n    long nth_num = 0;\n    long i = 1;\n    while(num > 0) {\n        nth_num += i*10;\n        num--;\n        i++;\n    }\n    return nth_num;",
    "    long num = n;\n    long root = (sqrt(1 + 4 * 2 * num) - 1) / 2;\n    if (root * (3 * root - 1) / 2 == num) {\n        return 1;\n    }\n    return 0;",
    "  long nth_decagonal_number = 0;\n  nth_decagonal_number = n * (3 * n - 2);\n  return nth_decagonal_number;",
    "    long num = n;\n    long x = 1;\n    while (num > 0) {\n        num -= x;\n        x += 3;\n    }\n    if (num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long decagonal = 0;\n    long i = 1;\n    while (decagonal <= num) {\n        decagonal = i * (3 * i - 1) / 2;\n        if (decagonal == num) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "  long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  if (x * (3 * x - 1) / 2 == n) {\n    return 1;\n  }\n  return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    return a;",
    "    long a = (3 * n * n - n) / 2;\n    return a;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x * (3 * x - 1) / 2 == n;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (int)x;",
    "  long x = (sqrt(1 + 4*2*n) - 1)/2;\n  if(x*(3*x - 1)/2 == n)\n    return 1;\n  return 0;",
    "    long temp = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return temp * (3 * temp - 1) / 2 == n;",
    "    long nth_decagonal = 0;\n    nth_decagonal = n * (3 * n - 2);\n    return nth_decagonal;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "  long x = (3*n*n - n)/2;\n  return x;",
    "    long a = 1 + sqrt(1 + 40 * n);\n    if (a * a == 1 + 40 * n) {\n        return 1;\n    }\n    return 0;",
    "    long nth_decagonal_number = 0;\n    nth_decagonal_number = (n * (3 * n - 2)) / 2;\n    return nth_decagonal_number;",
    "  long a = (3 * n * n - n) / 2;\n  long b = (3 * n * n + n) / 2;\n  long c = (3 * n * n + 2 * n) / 2;\n  long d = (3 * n * n - 2 * n) / 2;\n  long e = (3 * n * n + 3 * n) / 2;\n  long f = (3 * n * n - 3 * n) / 2;\n  long g = (3 * n * n + 4 * n) / 2;\n  long h = (3 * n * n - 4 * n) / 2;\n  long i = (3 * n * n + 5 * n) / 2;\n  long j = (3 * n * n - 5 * n) / 2;\n  long k = (3 * n * n + 6 * n) / 2;\n  long l = (3 * n * n - 6 * n) / 2;\n  long m = (3 * n * n + 7 * n) / 2;\n  long o = (3 * n * n - 7 * n) / 2;\n  long p = (3 * n * n + 8 * n) / 2;\n  long q = (3 * n * n - 8 * n) / 2;\n  long r = (3 * n * n + 9 * n) / 2;\n  long s = (3 * n * n - 9 * n) / 2;\n  long t = (3 * n * n + 10 * n) / 2;\n  long u = (3 * n * n - 10 * n) / 2;\n  long v = (3 * n * n + 11 * n) / 2;\n  long w = (3 * n * n - 11 * n) / 2;\n  long x = (3 * n * n + 12 * n) / 2;\n  long y = (3 * n * n - 12 * n) / 2;\n  long z = (3 * n * n + 13 * n) / 2;\n  long aa = (3 * n * n - 13 * n) / 2;\n  long bb = (3 * n * n + 14 * n) / 2;\n",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 4*2*n) - 1)/2;\n    return x == (int)x;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long num = n;\n    long nth_decagonal = 0;\n    long i = 1;\n    while(num > 0) {\n        nth_decagonal = num * (3 * num - 1) / 2;\n        if(nth_decagonal == n) {\n            return 1;\n        }\n        num--;\n    }\n    return 0;",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 1)) / 2;\n    return nth_decagonal;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    long x = (1 + sqrt(1 + 4 * 2 * n)) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "  long num = n;\n  long nth_decagonal = 0;\n  long decagonal_num = 0;\n  long i = 1;\n  while (decagonal_num < num) {\n    nth_decagonal = i;\n    decagonal_num = nth_decagonal * (3 * nth_decagonal - 1) / 2;\n    i++;\n  }\n  if (decagonal_num == num) {\n    return nth_decagonal;\n  }\n  return -1;",
    "    long x = (3 * n * n - n) / 2;\n    return x;",
    "    long a = (3 * n * n - n) / 2;\n    return a;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= 3*i - 2;\n        i++;\n    }\n    if(num == 0) {\n        return 1;\n    }\n    return 0;",
    "    long nth_decagonal_num = 0;\n    nth_decagonal_num = (n * (3 * n - 2)) / 2;\n    return nth_decagonal_num;",
    "    long a = (3 * n * n - n) / 2;\n    long b = (3 * n * n + n) / 2;\n    long c = (3 * n * n + 2 * n) / 2;\n    long d = (3 * n * n - 2 * n) / 2;\n    if (a % 10 == 0) {\n        return a;\n    }\n    if (b % 10 == 0) {\n        return b;\n    }\n    if (c % 10 == 0) {\n        return c;\n    }\n    if (d % 10 == 0) {\n        return d;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    else\n        return 0;",
    "  long a = (3*n*n - n)/2;\n  return a;",
    "    long num = n*(3*n-2);\n    return num;",
    "    long num = n;\n    long nth_num = 0;\n    long i = 1;\n    while(nth_num < num) {\n        nth_num = (i * (3 * i - 1)) / 2;\n        i++;\n    }\n    if(nth_num == num) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long root = sqrt(2*num);\n    if(root*(root+1) == 2*num) {\n        return 1;\n    }\n    return 0;",
    "    long nth_decagonal = n * (3 * n - 2);\n    return nth_decagonal;",
    "    long nth_decagonal_number = 0;\n    nth_decagonal_number = (n * (3 * n - 1)) / 2;\n    return nth_decagonal_number;",
    "    long num = n;\n    long nth_decagonal = 0;\n    long i = 1;\n    while(nth_decagonal < num) {\n        nth_decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(nth_decagonal == num) {\n        return 1;\n    }\n    return 0;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long i = 1;\n    while(num > 0) {\n        num -= i;\n        i += 4;\n    }\n    if(num == 0)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    return x == (long)x;",
    "    long x = (sqrt(1 + 4*2*n) - 1)/2;\n    if(x*(3*x - 1)/2 == n)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x == (int)x)\n        return 1;\n    else\n        return 0;",
    "    long a = (3*n*n - n)/2;\n    return a;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long num = n;\n    long decagonal = 0;\n    long i = 1;\n    while(decagonal < num) {\n        decagonal = (i * (3 * i - 1)) / 2;\n        if(decagonal == num) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long a = (3 * n * n - n) / 2;\n    return a;",
    "    long num = n;\n    long num_decagonal = 0;\n    long i = 1;\n    while(num_decagonal < num) {\n        num_decagonal = i * (3 * i - 1) / 2;\n        if(num_decagonal == num) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long num = n;\n    long nth_term = 0;\n    while(num > 0) {\n        nth_term = nth_term + (num % 10);\n        num = num / 10;\n    }\n    return nth_term;",
    "    double x = (sqrt(1 + 40 * n) + 1) / 20;\n    return x == (int) x;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n)\n        return 1;\n    else\n        return 0;",
    "    long num = n;\n    long nth_decagonal = 0;\n    long i = 1;\n    while(nth_decagonal < num) {\n        nth_decagonal = i * (3 * i - 1) / 2;\n        i++;\n    }\n    if(nth_decagonal == num) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n    if (x * (3 * x - 1) / 2 == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long a = (3 + sqrt(9 + 40 * n)) / 10;\n    if (a * (3 * a - 1) / 2 == n) {\n        return 1;\n    } else {\n        return 0;\n    }",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "    long x = (3*n*n - n)/2;\n    return x;",
    "    long num = (3*n*n - n)/2;\n    return num;",
    "  double x = (sqrt(1 + 4 * 2 * n) - 1) / 2;\n  return x == floor(x);",
    "    long nth_decagonal = 0;\n    nth_decagonal = (n * (3 * n - 2)) / 2;\n    return nth_decagonal;",
    "    long num = n;\n    long nth_num = 0;\n    while(n > 0) {\n        nth_num += n;\n        n -= 10;\n    }\n    return nth_num;",
    "    long a = (3 * n * n - n) / 2;\n    return a;"
  ]
}