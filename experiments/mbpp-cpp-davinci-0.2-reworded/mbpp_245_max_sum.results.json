{
  "name": "mbpp_245_max_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for (long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for (long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        if (dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long max_sum = 0;\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, dp[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "tmp0fd1cumj: /tmp/tmp0fd1cumj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp1[n];\n    for(long i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i]) {\n                dp1[i] = dp1[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp1[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i] + dp1[i] - arr[i]) {\n            max = dp[i] + dp1[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i - 1] + arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i + 1] + arr[i]);\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "tmp7uhlg8w3: /tmp/tmp7uhlg8w3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long ans = INT_MIN;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++) dp[i] = arr[i];\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j]) dp[i] = std::max(dp[i],dp[j]+arr[i]);\n        }\n    }\n    long ans = dp[0];\n    for(long i=1;i<n;i++) ans = std::max(ans,dp[i]);\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "tmppoygzj39: /tmp/tmppoygzj39.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--){\n            if(arr[i]>arr[j]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<n;i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tstd::vector<long> inc(arr.size(), 0);\n\tstd::vector<long> dec(arr.size(), 0);\n\tinc[0] = arr[0];\n\tdec[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.size() - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (int i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(long i=1;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  // Write your code here\n  long n = arr.size();\n  long left[n];\n  long right[n];\n  left[0] = arr[0];\n  right[n-1] = arr[n-1];\n  for(long i = 1; i < n; i++)\n  {\n    left[i] = std::max(left[i-1], arr[i]);\n  }\n  for(long i = n-2; i >= 0; i--)\n  {\n    right[i] = std::max(right[i+1], arr[i]);\n  }\n  long sum = 0;\n  for(long i = 0; i < n; i++)\n  {\n    sum += std::min(left[i], right[i]) - arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "tmpr1ho4xen: /tmp/tmpr1ho4xen.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "tmpsbplmgk8: /tmp/tmpsbplmgk8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += arr[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmp6utzyqxj: /tmp/tmp6utzyqxj.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long *inc = new long[n];\n    long *dec = new long[n];\n    for(long i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++) {\n        dp[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i]>arr[j]) {\n                dp[i] = std::max(dp[i],dp[j]+arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i=0;i<n;i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i]>arr[j]) {\n                dp2[i] = std::max(dp2[i],dp2[j]+arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i=0;i<n;i++) {\n        ans = std::max(ans,dp[i]+dp2[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i - 1] + arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i + 1] + arr[i]);\n    }\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmpsofbtbpe: /tmp/tmpsofbtbpe.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i-1] + arr[i]);\n    }\n    for(long i = n-2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i+1] + arr[i]);\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmpeimhc_36: /tmp/tmpeimhc_36.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        left[i] = std::max(left[i-1],arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        right[i] = std::max(right[i+1],arr[i]);\n    }\n    long sum = 0;\n    for(long i=0;i<n;i++) {\n        sum += std::min(left[i],right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmpq_yda54c: /tmp/tmpq_yda54c.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        lis[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        lds[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i] + dp2[i] - arr[i]) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        if(dp[i] + dp2[i] - arr[i] > max_sum) {\n            max_sum = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = arr.size()-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size()-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++) {\n        dp[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i=0;i<n;i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i=0;i<n;i++) {\n        if(dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n][2];\n    for(long i = 0; i < n; i++) {\n        dp[i][0] = arr[i];\n        dp[i][1] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i][0] = std::max(dp[i][0], dp[j][0] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp[i][1] = std::max(dp[i][1], dp[j][1] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i][0] + dp[i][1] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++)\n    {\n        for(int j=0;j<i;j++)\n        {\n            if(arr[i]>arr[j])\n            {\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--)\n    {\n        for(int j=arr.size()-1;j>i;j--)\n        {\n            if(arr[i]>arr[j])\n            {\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long ans=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        ans=std::max(ans,inc[i]+dec[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    for(long i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmpzt9d_qpl: /tmp/tmpzt9d_qpl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long lis[n];\n    long lds[n];\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> max_sum_inc(arr.size(),0);\n    std::vector<long> max_sum_dec(arr.size(),0);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i = 1; i < arr.size(); i++) {\n        max_sum_inc[i] = std::max(max_sum_inc[i-1]+arr[i], arr[i]);\n    }\n    for(int i = arr.size()-2; i >= 0; i--) {\n        max_sum_dec[i] = std::max(max_sum_dec[i+1]+arr[i], arr[i]);\n    }\n    long max = max_sum_inc[0] + max_sum_dec[0] - arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(max_sum_inc[i] + max_sum_dec[i] - arr[i] > max) {\n            max = max_sum_inc[i] + max_sum_dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmp3s5yvrrs: /tmp/tmp3s5yvrrs.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++)\n        dp[i] = arr[i];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j])\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n        }\n    }\n    long dp1[n];\n    for(long i = 0; i < n; i++)\n        dp1[i] = arr[i];\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j])\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n        }\n    }\n    long max = dp[0] + dp1[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i] + dp1[i] - arr[i])\n            max = dp[i] + dp1[i] - arr[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong max_sum = 0;\n\tlong max_sum_inc = 0;\n\tlong max_sum_dec = 0;\n\tlong sum_inc = 0;\n\tlong sum_dec = 0;\n\tfor(int i = 0; i < arr.size(); i++) {\n\t\tsum_inc = sum_inc + arr[i];\n\t\tsum_dec = sum_dec + arr[i];\n\t\tif(sum_inc < 0) {\n\t\t\tsum_inc = 0;\n\t\t}\n\t\tif(sum_dec < 0) {\n\t\t\tsum_dec = 0;\n\t\t}\n\t\tif(sum_inc > max_sum_inc) {\n\t\t\tmax_sum_inc = sum_inc;\n\t\t}\n\t\tif(sum_dec > max_sum_dec) {\n\t\t\tmax_sum_dec = sum_dec;\n\t\t}\n\t}\n\tmax_sum = max_sum_inc + max_sum_dec;\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmppang38q2: /tmp/tmppang38q2.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,1);\n    std::vector<long> lds(n,1);\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmpf4df5f9_: /tmp/tmpf4df5f9_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long sum[n];\n    for(int i=0;i<n;i++)\n    {\n        sum[i] = arr[i];\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=0;j<i;j++)\n        {\n            if(arr[i]>arr[j] && sum[i]<sum[j]+arr[i])\n            {\n                sum[i] = sum[j]+arr[i];\n            }\n        }\n    }\n    long sum1[n];\n    for(int i=0;i<n;i++)\n    {\n        sum1[i] = arr[i];\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=0;j<i;j++)\n        {\n            if(arr[i]<arr[j] && sum1[i]<sum1[j]+arr[i])\n            {\n                sum1[i] = sum1[j]+arr[i];\n            }\n        }\n    }\n    long max = sum[0]+sum1[0]-arr[0];\n    for(int i=1;i<n;i++)\n    {\n        if(max<sum[i]+sum1[i]-arr[i])\n        {\n            max = sum[i]+sum1[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmp6uy1rcod: /tmp/tmp6uy1rcod.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    for(long i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmpzt9d_qpl: /tmp/tmpzt9d_qpl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i=0;i<n;i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> lis(n, 0);\n\tstd::vector<long> lds(n, 0);\n\tfor (long i = 0; i < n; i++) {\n\t\tlis[i] = arr[i];\n\t\tlds[i] = arr[i];\n\t}\n\tfor (long i = 1; i < n; i++) {\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tlis[i] = std::max(lis[i], lis[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tlds[i] = std::max(lds[i], lds[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (lis[i] + lds[i] - arr[i] > max) {\n\t\t\tmax = lis[i] + lds[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) dp[i] = arr[i];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i]) max = dp[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmpn1lk85kt: /tmp/tmpn1lk85kt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--){\n            if(arr[i]>arr[j]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=0;i<n;i++){\n        max_sum = std::max(max_sum,inc[i]+dec[i]-arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long *inc = new long[n];\n    long *dec = new long[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\t// Write your code here\n\tint n = arr.size();\n\tstd::vector<long> lis(n,1);\n\tstd::vector<long> lds(n,1);\n\tfor(int i=1;i<n;i++){\n\t\tfor(int j=0;j<i;j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tlis[i] = std::max(lis[i],lis[j]+1);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=n-2;i>=0;i--){\n\t\tfor(int j=n-1;j>i;j--){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tlds[i] = std::max(lds[i],lds[j]+1);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor(int i=0;i<n;i++){\n\t\tif(lis[i]+lds[i]-1>max){\n\t\t\tmax = lis[i]+lds[i]-1;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmp04wv4v3d: /tmp/tmp04wv4v3d.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> left(n);\n    std::vector<long> right(n);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    for(int i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmpx2lgqmuo: /tmp/tmpx2lgqmuo.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    std::vector<long> lis(n,1);\n    std::vector<long> lds(n,1);\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                lis[i] = std::max(lis[i],lis[j]+1);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--){\n        for(long j=n-1;j>i;j--){\n            if(arr[i]>arr[j]){\n                lds[i] = std::max(lds[i],lds[j]+1);\n            }\n        }\n    }\n    long max = 0;\n    for(long i=0;i<n;i++){\n        if(lis[i]+lds[i]-1>max){\n            max = lis[i]+lds[i]-1;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmpg83q6nej: /tmp/tmpg83q6nej.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    for(long i=1;i<n;i++){\n        left[i] = std::max(left[i-1],arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--){\n        right[i] = std::max(right[i+1],arr[i]);\n    }\n    long sum = 0;\n    for(long i=0;i<n;i++){\n        sum += std::min(left[i],right[i])-arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmp9_2b3taw: /tmp/tmp9_2b3taw.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 1);\n    std::vector<long> lds(n, 1);\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(max < lis[i] + lds[i] - 1) {\n            max = lis[i] + lds[i] - 1;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "tmp28vdupql: /tmp/tmp28vdupql.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += arr[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmpntbfo5mt: /tmp/tmpntbfo5mt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for (int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = arr.size() - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for (long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp1[n];\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n        dp2[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp1[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for (int i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        if (lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmpkdliopwt: /tmp/tmpkdliopwt.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(int i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(max < dp[i] + dp2[i] - arr[i]) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  long dp[n];\n  for(long i = 0; i < n; i++) {\n    dp[i] = arr[i];\n  }\n  for(long i = 1; i < n; i++) {\n    for(long j = 0; j < i; j++) {\n      if(arr[j] < arr[i]) {\n        dp[i] = std::max(dp[i], dp[j] + arr[i]);\n      }\n    }\n  }\n  long dp1[n];\n  for(long i = 0; i < n; i++) {\n    dp1[i] = arr[i];\n  }\n  for(long i = n - 2; i >= 0; i--) {\n    for(long j = n - 1; j > i; j--) {\n      if(arr[j] < arr[i]) {\n        dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n      }\n    }\n  }\n  long ans = INT_MIN;\n  for(long i = 0; i < n; i++) {\n    ans = std::max(ans, dp[i] + dp1[i] - arr[i]);\n  }\n  return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < n; i++)\n    {\n        sum = sum + arr[i];\n        if(sum > max)\n        {\n            max = sum;\n        }\n        if(sum < 0)\n        {\n            sum = 0;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmp75x74hjn: /tmp/tmp75x74hjn.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0];\n    for(int i = 1; i < n; i++) {\n        if(dp[i] > max) {\n            max = dp[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmp1v8z9h2v: /tmp/tmp1v8z9h2v.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    for(long i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmpz416blho: /tmp/tmpz416blho.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long max_sum_till_now = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_till_now += arr[i];\n        if(max_sum_till_now < 0) {\n            max_sum_till_now = 0;\n        }\n        if(max_sum_till_now > max_sum) {\n            max_sum = max_sum_till_now;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmp5411z6n6: /tmp/tmp5411z6n6.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n);\n    std::vector<long> lds(n);\n    for(int i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  std::vector<long> inc(n,0);\n  std::vector<long> dec(n,0);\n  inc[0] = arr[0];\n  for(long i = 1; i < n; i++) {\n    inc[i] = arr[i];\n    for(long j = 0; j < i; j++) {\n      if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n        inc[i] = inc[j] + arr[i];\n      }\n    }\n  }\n  dec[n-1] = arr[n-1];\n  for(long i = n-2; i >= 0; i--) {\n    dec[i] = arr[i];\n    for(long j = n-1; j > i; j--) {\n      if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n        dec[i] = dec[j] + arr[i];\n      }\n    }\n  }\n  long max = inc[0] + dec[0] - arr[0];\n  for(long i = 1; i < n; i++) {\n    if(max < inc[i] + dec[i] - arr[i]) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0];\n    for(long i = 1; i < n; i++) {\n        if(dp[i] > max) {\n            max = dp[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "tmpzhm7e4fy: /tmp/tmpzhm7e4fy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for (long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        left[i] = std::max(left[i-1],arr[i]);\n    }\n    for(long i=n-2;i>=0;i--) {\n        right[i] = std::max(right[i+1],arr[i]);\n    }\n    long sum = 0;\n    for(long i=0;i<n;i++) {\n        sum += std::min(left[i],right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "tmpj647xp99: /tmp/tmpj647xp99.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(int i=1;i<n;i++) {\n        lis[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]+arr[i]) {\n                lis[i] = lis[j]+arr[i];\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        lds[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]+arr[i]) {\n                lds[i] = lds[j]+arr[i];\n            }\n        }\n    }\n    long max = lis[0]+lds[0]-arr[0];\n    for(int i=1;i<n;i++) {\n        if(max < lis[i]+lds[i]-arr[i]) {\n            max = lis[i]+lds[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i=1;i<arr.size();i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        left[i] = std::max(left[i-1],arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        right[i] = std::max(right[i+1],arr[i]);\n    }\n    long sum = 0;\n    for(long i=0;i<n;i++) {\n        sum += std::min(left[i],right[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "tmpnqb9ncew: /tmp/tmpnqb9ncew.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for (long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp1[n];\n    long dp2[n];\n    for(long i=0;i<n;i++) {\n        dp1[i] = arr[i];\n        dp2[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                dp1[i] = std::max(dp1[i], dp1[j] + arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i=0;i<n;i++) {\n        ans = std::max(ans, dp1[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> left(arr.size(),0);\n    std::vector<long> right(arr.size(),0);\n    left[0]=arr[0];\n    for(int i=1;i<arr.size();i++){\n        left[i]=std::max(arr[i],arr[i]+left[i-1]);\n    }\n    right[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--){\n        right[i]=std::max(arr[i],arr[i]+right[i+1]);\n    }\n    long max=left[0]+right[1];\n    for(int i=1;i<arr.size()-1;i++){\n        if(left[i]+right[i+1]>max){\n            max=left[i]+right[i+1];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "tmp48i5xqy2: /tmp/tmp48i5xqy2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long ans = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(ans < inc[i] + dec[i] - arr[i]) {\n            ans = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++)\n    {\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++)\n        {\n            if(arr[j]<arr[i])\n            {\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--)\n    {\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--)\n        {\n            if(arr[j]<arr[i])\n            {\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        if(inc[i]+dec[i]-arr[i]>max)\n        {\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  std::vector<long> inc(n, 0);\n  std::vector<long> dec(n, 0);\n  inc[0] = arr[0];\n  for (long i = 1; i < n; i++) {\n    inc[i] = arr[i];\n    for (long j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        inc[i] = std::max(inc[i], inc[j] + arr[i]);\n      }\n    }\n  }\n  dec[n - 1] = arr[n - 1];\n  for (long i = n - 2; i >= 0; i--) {\n    dec[i] = arr[i];\n    for (long j = n - 1; j > i; j--) {\n      if (arr[i] > arr[j]) {\n        dec[i] = std::max(dec[i], dec[j] + arr[i]);\n      }\n    }\n  }\n  long max = 0;\n  for (long i = 0; i < n; i++) {\n    if (inc[i] + dec[i] - arr[i] > max) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far += arr[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "tmp7vh2ks7a: /tmp/tmp7vh2ks7a.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        if (inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++)\n        dp[i] = arr[i];\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i])\n                dp[i] = dp[j] + arr[i];\n        }\n    }\n    long max = INT_MIN;\n    for(long i=0;i<n;i++) {\n        if(dp[i] > max)\n            max = dp[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "tmp0c09i52b: /tmp/tmp0c09i52b.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_so_far = max_sum_so_far + arr[i];\n        if(max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        max_sum = std::max(max_sum, max_sum_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "tmp4mb0gwth: /tmp/tmp4mb0gwth.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1; i<n; i++) {\n        inc[i] = arr[i];\n        for(long j=0; j<i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i=n-2; i>=0; i--) {\n        dec[i] = arr[i];\n        for(long j=n-1; j>i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1; i<n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long max_sum = 0;\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++)\n        dp[i] = arr[i];\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i])\n                dp[i] = dp[j] + arr[i];\n        }\n    }\n    long max = dp[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i])\n            max = dp[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "tmps2elf540: /tmp/tmps2elf540.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  int n = arr.size();\n  std::vector<long> left(n, 0);\n  std::vector<long> right(n, 0);\n  left[0] = arr[0];\n  for (int i = 1; i < n; i++) {\n    left[i] = std::max(left[i - 1], arr[i]);\n  }\n  right[n - 1] = arr[n - 1];\n  for (int i = n - 2; i >= 0; i--) {\n    right[i] = std::max(right[i + 1], arr[i]);\n  }\n  long sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += std::min(left[i], right[i]) - arr[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "tmps2j1_uvq: /tmp/tmps2j1_uvq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += arr[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "tmp6utzyqxj: /tmp/tmp6utzyqxj.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long i, j;\n    long max = 0;\n    long *inc = new long[n];\n    long *dec = new long[n];\n    for (i = 0; i < n; i++) {\n        inc[i] = arr[i];\n        dec[i] = arr[i];\n    }\n    for (i = 1; i < n; i++) {\n        for (j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (i = n - 2; i >= 0; i--) {\n        for (j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (max < (inc[i] + dec[i] - arr[i])) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    delete[] inc;\n    delete[] dec;\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(long i=1;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> lis(arr.size(), 0);\n    std::vector<long> lds(arr.size(), 0);\n    for(int i = 0; i < arr.size(); i++) {\n        lis[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long lis[n];\n    long lds[n];\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < dp[i] + dp2[i] - arr[i]) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i=1;i<arr.size();i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(int i=0;i<arr.size();i++) {\n        max_sum = std::max(max_sum,inc[i]+dec[i]-arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp1[n];\n    long dp2[n];\n    for(long i=0;i<n;i++)\n    {\n        dp1[i] = arr[i];\n        dp2[i] = arr[i];\n    }\n    for(long i=1;i<n;i++)\n    {\n        for(long j=0;j<i;j++)\n        {\n            if(arr[i]>arr[j] && dp1[i]<dp1[j]+arr[i])\n            {\n                dp1[i] = dp1[j]+arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--)\n    {\n        for(long j=n-1;j>i;j--)\n        {\n            if(arr[i]>arr[j] && dp2[i]<dp2[j]+arr[i])\n            {\n                dp2[i] = dp2[j]+arr[i];\n            }\n        }\n    }\n    long max = dp1[0]+dp2[0]-arr[0];\n    for(long i=1;i<n;i++)\n    {\n        if(max<dp1[i]+dp2[i]-arr[i])\n        {\n            max = dp1[i]+dp2[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123925,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++){\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--){\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++){\n        if(max<inc[i]+dec[i]-arr[i]){\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(long i=1;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++)\n        dp[i] = arr[i];\n    for(long i=1;i<n;i++)\n    {\n        for(long j=0;j<i;j++)\n        {\n            if(arr[i] > arr[j])\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n        }\n    }\n    long ans = dp[0];\n    for(long i=1;i<n;i++)\n        ans = std::max(ans, dp[i]);\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "tmpjqp4vwlz: /tmp/tmpjqp4vwlz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long sum = 0;\n    long max_sum_left = 0;\n    long max_sum_right = 0;\n    std::vector<long> max_sum_left_arr(n, 0);\n    std::vector<long> max_sum_right_arr(n, 0);\n    for(long i = 0; i < n; i++) {\n        max_sum_left_arr[i] = arr[i];\n        max_sum_right_arr[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_sum_left_arr[i] = std::max(max_sum_left_arr[i], max_sum_left_arr[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                max_sum_right_arr[i] = std::max(max_sum_right_arr[i], max_sum_right_arr[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, max_sum_left_arr[i] + max_sum_right_arr[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i=0;i<n;i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 1);\n    std::vector<long> lds(n, 1);\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - 1;\n    for (long i = 1; i < n; i++) {\n        if (max < lis[i] + lds[i] - 1) {\n            max = lis[i] + lds[i] - 1;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "tmplgj8i2vu: /tmp/tmplgj8i2vu.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long dp[n];\n    for(int i=0;i<n;i++)\n    {\n        dp[i] = arr[i];\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=0;j<i;j++)\n        {\n            if(arr[i]>arr[j])\n            {\n                dp[i] = std::max(dp[i],dp[j]+arr[i]);\n            }\n        }\n    }\n    long dp1[n];\n    for(int i=0;i<n;i++)\n    {\n        dp1[i] = arr[i];\n    }\n    for(int i=n-2;i>=0;i--)\n    {\n        for(int j=n-1;j>i;j--)\n        {\n            if(arr[i]>arr[j])\n            {\n                dp1[i] = std::max(dp1[i],dp1[j]+arr[i]);\n            }\n        }\n    }\n    long max = dp[0]+dp1[0]-arr[0];\n    for(int i=1;i<n;i++)\n    {\n        if(max<dp[i]+dp1[i]-arr[i])\n        {\n            max = dp[i]+dp1[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++){\n        for(int j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--){\n        for(int j=arr.size()-1;j>i;j--){\n            if(arr[i]>arr[j]){\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i=0;i<n;i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(int i=1;i<n;i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tlong dp[n];\n\tfor(long i = 0; i < n; i++) {\n\t\tdp[i] = arr[i];\n\t}\n\tfor(long i = 1; i < n; i++) {\n\t\tfor(long j = 0; j < i; j++) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tdp[i] = std::max(dp[i], dp[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong dp2[n];\n\tfor(long i = 0; i < n; i++) {\n\t\tdp2[i] = arr[i];\n\t}\n\tfor(long i = n - 2; i >= 0; i--) {\n\t\tfor(long j = n - 1; j > i; j--) {\n\t\t\tif(arr[i] > arr[j]) {\n\t\t\t\tdp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor(long i = 0; i < n; i++) {\n\t\tif(dp[i] + dp2[i] - arr[i] > max) {\n\t\t\tmax = dp[i] + dp2[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = arr[0];\n    long sum = arr[0];\n    for(long i = 1; i < n; i++){\n        if(arr[i] > arr[i-1]){\n            sum += arr[i];\n        }\n        else{\n            max_sum = std::max(max_sum, sum);\n            sum = arr[i];\n        }\n    }\n    max_sum = std::max(max_sum, sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "tmpxeicwms1: /tmp/tmpxeicwms1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    lds[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n], dec[n];\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long max = dp[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i]) {\n            max = dp[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "tmpj5nrjstq: /tmp/tmpj5nrjstq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(int i=1;i<n;i++){\n        for(int j=0;j<i;j++){\n            if(arr[i]>arr[j] && lis[i]<lis[j]){\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--){\n        for(int j=n-1;j>i;j--){\n            if(arr[i]>arr[j] && lds[i]<lds[j]){\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i=1;i<n;i++){\n        if(lis[i] + lds[i] - arr[i] > max){\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        for(long j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i],lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        for(long j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i],lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max_sum = 0;\n    for(long i=0;i<n;i++) {\n        max_sum = std::max(max_sum,lis[i]+lds[i]-arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n  long n = arr.size();\n  std::vector<long> inc(n, 0);\n  std::vector<long> dec(n, 0);\n  inc[0] = arr[0];\n  for(long i = 1; i < n; i++) {\n    inc[i] = arr[i];\n    for(long j = 0; j < i; j++) {\n      if(arr[j] < arr[i]) {\n        inc[i] = std::max(inc[i], inc[j] + arr[i]);\n      }\n    }\n  }\n  dec[n - 1] = arr[n - 1];\n  for(long i = n - 2; i >= 0; i--) {\n    dec[i] = arr[i];\n    for(long j = n - 1; j > i; j--) {\n      if(arr[j] < arr[i]) {\n        dec[i] = std::max(dec[i], dec[j] + arr[i]);\n      }\n    }\n  }\n  long max = 0;\n  for(long i = 0; i < n; i++) {\n    if(inc[i] + dec[i] - arr[i] > max) {\n      max = inc[i] + dec[i] - arr[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 1);\n    std::vector<long> lds(n, 1);\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "tmps73qduqw: /tmp/tmps73qduqw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0] = arr[0];\n    for(int i=1;i<arr.size();i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1] = arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=arr.size()-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long dp[n];\n    long dp2[n];\n    dp[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        dp[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    dp2[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        dp2[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123923,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long *inc = new long[n];\n    long *dec = new long[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123916,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++){\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[i]>arr[j] && inc[i]<inc[j]+arr[i]){\n                inc[i]=inc[j]+arr[i];\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--){\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--){\n            if(arr[i]>arr[j] && dec[i]<dec[j]+arr[i]){\n                dec[i]=dec[j]+arr[i];\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++){\n        if(max<inc[i]+dec[i]-arr[i]){\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++)\n        dp[i] = arr[i];\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j])\n                dp[i] = std::max(dp[i],dp[j]+arr[i]);\n        }\n    }\n    long ans = dp[0];\n    for(long i=1;i<n;i++)\n        ans = std::max(ans,dp[i]);\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "tmplvl5hwxb: /tmp/tmplvl5hwxb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(int i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp2[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(max < dp[i] + dp2[i] - arr[i]) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> lis(n, 1);\n\tstd::vector<long> lds(n, 1);\n\tfor (long i = 1; i < n; i++) {\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tlis[i] = std::max(lis[i], lis[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tlds[i] = std::max(lds[i], lds[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tif (lis[i] + lds[i] - 1 > max) {\n\t\t\tmax = lis[i] + lds[i] - 1;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "tmps64vgo94: /tmp/tmps64vgo94.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for (long i = 1; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += arr[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "tmpz01pai6g: /tmp/tmpz01pai6g.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n - 1] = arr[n - 1];\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    long dp[n];\n    for(int i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(int i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(int i = n - 2; i >= 0; i--) {\n        for(int j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n);\n    std::vector<long> right(n);\n    left[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmppecnt2hh: /tmp/tmppecnt2hh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i=1;i<n;i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n, 1);\n    std::vector<long> lds(n, 1);\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n        }\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        ans = std::max(ans, lis[i] + lds[i] - 1);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmpqqd_peyq: /tmp/tmpqqd_peyq.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for (int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n - 1] = arr[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (int i = 0; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        left[i] = std::max(left[i-1], arr[i]);\n    }\n    for(int i = n-2; i >= 0; i--) {\n        right[i] = std::max(right[i+1], arr[i]);\n    }\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmppiirr6ks: /tmp/tmppiirr6ks.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, inc[i] + dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123922,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> max_sum_inc(n, 0);\n    std::vector<long> max_sum_dec(n, 0);\n    max_sum_inc[0] = arr[0];\n    max_sum_dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        max_sum_inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                max_sum_inc[i] = std::max(max_sum_inc[i], max_sum_inc[j] + arr[i]);\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        max_sum_dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                max_sum_dec[i] = std::max(max_sum_dec[i], max_sum_dec[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmp439e5cos: /tmp/tmp439e5cos.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    for(long i = 0; i < n; i++) {\n        lis[i] = arr[i];\n        lds[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    long max_sum_till_now = 0;\n    long max_sum_till_now_rev = 0;\n    for(int i = 0; i < n; i++) {\n        max_sum_till_now = max_sum_till_now + arr[i];\n        if(max_sum_till_now < 0) {\n            max_sum_till_now = 0;\n        }\n        if(max_sum_till_now > max_sum) {\n            max_sum = max_sum_till_now;\n        }\n    }\n    for(int i = n-1; i >= 0; i--) {\n        max_sum_till_now_rev = max_sum_till_now_rev + arr[i];\n        if(max_sum_till_now_rev < 0) {\n            max_sum_till_now_rev = 0;\n        }\n        if(max_sum_till_now_rev > max_sum) {\n            max_sum = max_sum_till_now_rev;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "tmpwjf3w32d: /tmp/tmpwjf3w32d.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    // Write your code here\n    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++)\n        dp[i] = arr[i];\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i] > arr[j])\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n        }\n    }\n    long ans = dp[0];\n    for(long i=1;i<n;i++)\n        ans = std::max(ans, dp[i]);\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmpcsnbquh8: /tmp/tmpcsnbquh8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(),0);\n    std::vector<long> dec(arr.size(),0);\n    inc[0]=arr[0];\n    for(int i=1;i<arr.size();i++){\n        inc[i]=arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i]=std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[arr.size()-1]=arr[arr.size()-1];\n    for(int i=arr.size()-2;i>=0;i--){\n        dec[i]=arr[i];\n        for(int j=arr.size()-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i]=std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max=0;\n    for(int i=0;i<arr.size();i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max=inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long inc[n];\n    long dec[n];\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, inc[i] + dec[i] - arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n,0);\n    std::vector<long> right(n,0);\n    left[0] = arr[0];\n    for(long i=1;i<n;i++) {\n        left[i] = std::max(left[i-1],arr[i]);\n    }\n    right[n-1] = arr[n-1];\n    for(long i=n-2;i>=0;i--) {\n        right[i] = std::max(right[i+1],arr[i]);\n    }\n    for(long i=0;i<n;i++) {\n        max_sum += std::min(left[i],right[i]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "tmpy58s87v0: /tmp/tmpy58s87v0.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    std::vector<long> inc(arr.size(), 0);\n    std::vector<long> dec(arr.size(), 0);\n    inc[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[arr.size() - 1] = arr[arr.size() - 1];\n    for(int i = arr.size() - 2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = arr.size() - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        max = std::max(max, inc[i] + dec[i] - arr[i]);\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for (long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for (long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for (long j = n-1; j > i; j--) {\n            if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        if (max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i], inc[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i], dec[j] + arr[i]);\n            }\n        }\n    }\n    long max = inc[0] + dec[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(inc[i] + dec[i] - arr[i] > max) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123928,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n\tlong n = arr.size();\n\tstd::vector<long> inc(n);\n\tstd::vector<long> dec(n);\n\tinc[0] = arr[0];\n\tdec[n - 1] = arr[n - 1];\n\tfor (long i = 1; i < n; i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (long i = n - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (long j = n - 1; j > i; j--) {\n\t\t\tif (arr[j] < arr[i]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = inc[0] + dec[0] - arr[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[j]<arr[i]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    dec[n-1] = arr[n-1];\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--){\n            if(arr[j]<arr[i]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(int i=0;i<n;i++){\n        ans = std::max(ans,inc[i]+dec[i]-arr[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
      "timestamp": 1666123932,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}