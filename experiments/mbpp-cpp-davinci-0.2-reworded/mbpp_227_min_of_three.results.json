{
  "name": "mbpp_227_min_of_three",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c)\n        return a;\n    else if (b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n\tif (a < b) {\n\t\tif (a < c) {\n\t\t\treturn a;\n\t\t}\n\t\telse {\n\t\t\treturn c;\n\t\t}\n\t}\n\telse {\n\t\tif (b < c) {\n\t\t\treturn b;\n\t\t}\n\t\telse {\n\t\t\treturn c;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c)\n        return a;\n    else if (b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c)\n        return a;\n    else if (b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if(a<b && a<c)\n    return a;\n  else if(b<a && b<c)\n    return b;\n  else\n    return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c) {\n    return a;\n  }\n  if (b < a && b < c) {\n    return b;\n  }\n  return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n\treturn std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a < b && a < c) {\n        return a;\n    } else if(b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  long min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a <= b && a <= c) {\n        return a;\n    } else if (b <= a && b <= c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c)\n    return a;\n  else if (b < a && b < c)\n    return b;\n  else\n    return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c)\n        return a;\n    else if (b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c)\n        return a;\n    else if (b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a < b && a < c)\n        return a;\n    else if(b < a && b < c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  // Write your code here\n  if(a<b && a<c)\n  {\n      return a;\n  }\n  else if(b<a && b<c)\n  {\n      return b;\n  }\n  else\n  {\n      return c;\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c) {\n    return a;\n  }\n  else if (b < a && b < c) {\n    return b;\n  }\n  else {\n    return c;\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        if (b < c) {\n            return b;\n        }\n        else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min_of_two = (a < b) ? a : b;\n    return (min_of_two < c) ? min_of_two : c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if(b < min)\n        min = b;\n    if(c < min)\n        min = c;\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a,b),c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b) {\n    if (a < c) {\n      return a;\n    } else {\n      return c;\n    }\n  } else {\n    if (b < c) {\n      return b;\n    } else {\n      return c;\n    }\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c) {\n    return a;\n  } else if (b < c) {\n    return b;\n  } else {\n    return c;\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    if(b<a && b<c)\n        return b;\n    if(c<a && c<b)\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b) {\n        if (a < c) {\n            return a;\n        } else {\n            return c;\n        }\n    } else {\n        if (b < c) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c) {\n        return a;\n    } else if(b<a && b<c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b) {\n    if (a < c) {\n      return a;\n    }\n    else {\n      return c;\n    }\n  }\n  else {\n    if (b < c) {\n      return b;\n    }\n    else {\n      return c;\n    }\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min)\n        min = b;\n    if (c < min)\n        min = c;\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a < b && a < c) {\n        return a;\n    }\n    else if(b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min)\n        min = b;\n    if (c < min)\n        min = c;\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n\tif (a < b && a < c) {\n\t\treturn a;\n\t}\n\telse if (b < a && b < c) {\n\t\treturn b;\n\t}\n\telse {\n\t\treturn c;\n\t}\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  long min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  long min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c)\n    return a;\n  else if (b < a && b < c)\n    return b;\n  else\n    return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c) {\n    return a;\n  } else if (b < a && b < c) {\n    return b;\n  } else {\n    return c;\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a < b && a < c) {\n        return a;\n    }\n    else if(b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(a, std::min(b, c));\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a < b && a < c) {\n        return a;\n    }\n    else if(b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    }\n    else if (b < a && b < c) {\n        return b;\n    }\n    else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if (a < b && a < c) {\n        return a;\n    } else if (b < a && b < c) {\n        return b;\n    } else {\n        return c;\n    }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    long min = a;\n    if (b < min) {\n        min = b;\n    }\n    if (c < min) {\n        min = c;\n    }\n    return min;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    return std::min(std::min(a, b), c);\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n  if (a < b && a < c) {\n    return a;\n  } else if (b < a && b < c) {\n    return b;\n  } else {\n    return c;\n  }\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1666122629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find minimum of three numbers.\nlong min_of_three(long a, long b, long c) {\n    if(a<b && a<c)\n        return a;\n    else if(b<a && b<c)\n        return b;\n    else\n        return c;\n}\nint main() {\n    auto candidate = min_of_three;\n    assert(candidate((10), (20), (0)) == (0));\n    assert(candidate((19), (15), (18)) == (15));\n    assert(candidate((-10), (-20), (-30)) == (-30));\n}\n",
      "timestamp": 1665517175,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}