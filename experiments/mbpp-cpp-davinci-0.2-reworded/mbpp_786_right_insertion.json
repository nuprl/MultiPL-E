{
  "name": "mbpp_786_right_insertion",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the right insertion point for a specified value in sorted order.\nlong right_insertion(std::vector<long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = right_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = a.size();\n    long l = 0;\n    long r = n - 1;\n    long mid;\n    while (l <= r) {\n        mid = (l + r) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;",
    "    long l = 0, r = a.size() - 1;\n    while (l < r) {\n        long m = l + (r - l) / 2;\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0;\n    long r = n - 1;\n    long m;\n    while (l <= r) {\n        m = (l + r) / 2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;",
    "    long n = a.size();\n    long l = 0, r = n-1;\n    while(l <= r) {\n        long m = l + (r-l)/2;\n        if(a[m] == x) {\n            return m;\n        } else if(a[m] < x) {\n            l = m+1;\n        } else {\n            r = m-1;\n        }\n    }\n    return l;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0, r = n-1;\n    while (l <= r) {\n        long m = l + (r-l)/2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m+1;\n        } else {\n            r = m-1;\n        }\n    }\n    return l;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low < high) {\n        mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;",
    "    long low = 0;\n    long high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        }\n        else if (a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = a.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;",
    "    long n = a.size();\n    long l = 0;\n    long r = n - 1;\n    long mid;\n    while (l <= r) {\n        mid = (l + r) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;",
    "    long low = 0, high = a.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(a[mid] == x) {\n            return mid;\n        }\n        else if(a[mid] < x) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "  long low = 0;\n  long high = a.size() - 1;\n  long mid;\n  while (low <= high) {\n    mid = (low + high) / 2;\n    if (a[mid] == x) {\n      return mid;\n    } else if (a[mid] < x) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;"
  ]
}