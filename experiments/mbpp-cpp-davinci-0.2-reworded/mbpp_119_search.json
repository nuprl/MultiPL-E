{
  "name": "mbpp_119_search",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the element that appears only once in a sorted vector.\nlong search(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)3, (long)3, (long)4, (long)4, (long)5, (long)5, (long)7, (long)7, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4, (long)4}))) == (1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long low = 0;\n    long high = arr.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if ((mid - 1) % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    long n = arr.size();\n    long low = 0;\n    long high = n-1;\n    while(low < high) {\n        long mid = low + (high - low)/2;\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            } else {\n                low = mid+1;\n            }\n        } else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[low];",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    int mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid] == arr[mid-1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        else if(arr[mid] == arr[mid+1]) {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(mid==0 || mid==arr.size()-1){\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            if(mid%2==0){\n                high = mid-1;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size() - 1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(mid == 0 || mid == arr.size() - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0, high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                high = mid-2;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        if(arr[mid] == arr[mid+1]) {\n            if(mid%2 == 0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    long mid;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(arr[mid]==arr[mid-1]){\n            if(mid%2==0){\n                high = mid-2;\n            }\n            else{\n                low = mid+1;\n            }\n        }\n        else if(arr[mid]==arr[mid+1]){\n            if(mid%2==0){\n                low = mid+2;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n        else{\n            return arr[mid];\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = (low+high)/2;\n        if(mid==0 || mid==n-1) {\n            return arr[mid];\n        }\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]) {\n            return arr[mid];\n        }\n        else if(arr[mid]==arr[mid-1]) {\n            if((mid-1)%2==0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(mid%2==0) {\n                low = mid+2;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(mid%2 == 0) {\n            if(arr[mid] == arr[mid+1]) {\n                low = mid+2;\n            }\n            else {\n                high = mid-2;\n            }\n        }\n        else {\n            if(arr[mid] == arr[mid-1]) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while(low <= high) {\n        int mid = (low + high) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if(mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - 1) % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(mid == 0 || mid == n-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            } else {\n                high = mid-1;\n            }\n        } else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            } else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(mid == 0 || mid == arr.size()-1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid-1]) {\n            if(mid%2 == 0) {\n                low = mid+1;\n            }\n            else {\n                high = mid-1;\n            }\n        }\n        else {\n            if(mid%2 == 0) {\n                high = mid-1;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n    }\n    return -1;",
    "    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n    while(low <= high) {\n        int mid = low + (high - low) / 2;\n        if(mid == 0 || mid == n - 1) {\n            return arr[mid];\n        }\n        if(arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if(arr[mid] == arr[mid - 1]) {\n            if(mid % 2 == 0) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        if(arr[mid] == arr[mid + 1]) {\n            if(mid % 2 == 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = arr.size()-1;\n    while(low<=high){\n        long mid = low + (high-low)/2;\n        if(arr[mid]!=arr[mid-1] && arr[mid]!=arr[mid+1]){\n            return arr[mid];\n        }\n        if(mid%2==0){\n            if(arr[mid]==arr[mid+1]){\n                low = mid+2;\n            }\n            else{\n                high = mid-2;\n            }\n        }\n        else{\n            if(arr[mid]==arr[mid-1]){\n                low = mid+1;\n            }\n            else{\n                high = mid-1;\n            }\n        }\n    }\n    return -1;"
  ]
}