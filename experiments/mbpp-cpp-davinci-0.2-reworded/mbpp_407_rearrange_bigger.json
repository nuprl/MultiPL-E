{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) j--;\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; i--) {\n        if(digits[i - 1] < digits[i]) {\n            int min_index = i;\n            for(int j = i + 1; j < digits.size(); j++) {\n                if(digits[j] < digits[min_index] && digits[j] > digits[i - 1]) {\n                    min_index = j;\n                }\n            }\n            std::swap(digits[i - 1], digits[min_index]);\n            std::sort(digits.begin() + i, digits.end());\n            break;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result == n) {\n        return std::nullopt;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i>0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i==0) {\n        return std::any();\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i<j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i=0; i<digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; --i) {\n        if(digits[i] > digits[i - 1]) {\n            std::swap(digits[i], digits[i - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for(int j = 0; j < digits.size(); ++j) {\n                result = result * 10 + digits[j];\n            }\n            return result;\n        }\n    }\n    return std::any();",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss(s);\n    long x = 0;\n    ss >> x;\n    return x;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    for(; i > 0; i--) {\n        if(s[i] > s[i-1]) {\n            break;\n        }\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int min_index = i;\n    for(int j = i; j < len; j++) {\n        if(s[j] > s[i-1] && s[j] < s[min_index]) {\n            min_index = j;\n        }\n    }\n    std::swap(s[i-1], s[min_index]);\n    std::sort(s.begin()+i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::any();\n    }\n    std::sort(s.begin(), s.end());\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != '0') {\n            std::swap(s[0], s[i]);\n            break;\n        }\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (auto c : s) {\n        v.push_back(c - '0');\n    }\n    std::sort(v.begin(), v.end());\n    do {\n        long num = 0;\n        for (auto i : v) {\n            num = num * 10 + i;\n        }\n        if (num > n) {\n            return num;\n        }\n    } while (std::next_permutation(v.begin(), v.end()));\n    return -1;"
  ]
}