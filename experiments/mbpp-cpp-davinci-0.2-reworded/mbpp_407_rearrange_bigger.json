{
  "name": "mbpp_407_rearrange_bigger",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nstd::any rearrange_bigger(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = rearrange_bigger;\n    assert(candidate((12)) == (std::any(21)));\n    assert(candidate((10)) == (std::any(false)));\n    assert(candidate((102)) == (std::any(120)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) i--;\n    if(i == 0) return std::nullopt;\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) j--;\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; i--) {\n        if(digits[i - 1] < digits[i]) {\n            int min_index = i;\n            for(int j = i + 1; j < digits.size(); j++) {\n                if(digits[j] < digits[min_index] && digits[j] > digits[i - 1]) {\n                    min_index = j;\n                }\n            }\n            std::swap(digits[i - 1], digits[min_index]);\n            std::sort(digits.begin() + i, digits.end());\n            break;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result == n) {\n        return std::nullopt;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i>0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i==0) {\n        return std::any();\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i<j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i=0; i<digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; --i) {\n        if(digits[i] > digits[i - 1]) {\n            std::swap(digits[i], digits[i - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for(int j = 0; j < digits.size(); ++j) {\n                result = result * 10 + digits[j];\n            }\n            return result;\n        }\n    }\n    return std::any();",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss(s);\n    long x = 0;\n    ss >> x;\n    return x;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    for(; i > 0; i--) {\n        if(s[i] > s[i-1]) {\n            break;\n        }\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int min_index = i;\n    for(int j = i; j < len; j++) {\n        if(s[j] > s[i-1] && s[j] < s[min_index]) {\n            min_index = j;\n        }\n    }\n    std::swap(s[i-1], s[min_index]);\n    std::sort(s.begin()+i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::any();\n    }\n    std::sort(s.begin(), s.end());\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] != '0') {\n            std::swap(s[0], s[i]);\n            break;\n        }\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (auto c : s) {\n        v.push_back(c - '0');\n    }\n    std::sort(v.begin(), v.end());\n    do {\n        long num = 0;\n        for (auto i : v) {\n            num = num * 10 + i;\n        }\n        if (num > n) {\n            return num;\n        }\n    } while (std::next_permutation(v.begin(), v.end()));\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for(int i = 0; i < s.size(); i++) {\n        v.push_back(s[i] - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::string s1 = \"\";\n    for(int i = 0; i < v.size(); i++) {\n        s1 += std::to_string(v[i]);\n    }\n    return std::stoi(s1);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i;\n    for(i = len - 1; i > 0; i--) {\n        if(s[i] > s[i - 1]) {\n            break;\n        }\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int x = s[i - 1], min = i;\n    for(int j = i + 1; j < len; j++) {\n        if(s[j] > x && s[j] < s[min]) {\n            min = j;\n        }\n    }\n    std::swap(s[i - 1], s[min]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(auto d : digits) {\n        result = result*10 + d;\n    }\n    return result;",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long res = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        res += digits[i] * pow(10, i);\n    }\n    return res;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while (j < s.size() && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::any(std::stol(s));",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss(s);\n    long result;\n    ss >> result;\n    return result;",
    "  std::vector<int> digits;\n  while (n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  for (int i = digits.size() - 1; i > 0; i--) {\n    if (digits[i] > digits[i - 1]) {\n      std::swap(digits[i], digits[i - 1]);\n      std::sort(digits.begin() + i, digits.end());\n      long result = 0;\n      for (int j = 0; j < digits.size(); j++) {\n        result = result * 10 + digits[j];\n      }\n      return result;\n    }\n  }\n  return std::nullopt;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    std::reverse(s1.begin(), s1.end());\n    long min = std::stol(s1);\n    if (min == n) {\n        return std::nullopt;\n    }\n    std::string s2 = std::to_string(n);\n    std::sort(s2.begin(), s2.end());\n    long min_after_sort = std::stol(s2);\n    if (min_after_sort == n) {\n        return std::nullopt;\n    }\n    std::string s3 = std::to_string(n);\n    std::sort(s3.begin(), s3.end());\n    std::reverse(s3.begin(), s3.end());\n    long max_after_sort = std::stol(s3);\n    if (max_after_sort == n) {\n        return std::nullopt;\n    }\n    std::string s4 = std::to_string(n);\n    std::sort(s4.begin(), s4.end());\n    std::reverse(s4.begin(), s4.end());\n    long max_after_sort_2 = std::stol(s4);\n    if (max_after_sort_2 == n) {\n        return std::nullopt;\n    }\n    std::string s5 = std::to_string(n);\n    std::sort(s5.begin(), s5.end());\n    long min_after_sort_2 = std::stol(s5);\n    if (min_after_sort_2 == n) {\n        return std::nullopt;\n    }\n    std::string s6 = std::to_string(n);\n    std::sort(s6",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 2;\n    while (i >= 0 && digits[i] >= digits[i + 1]) {\n        i--;\n    }\n    if (i < 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (j > i && digits[j] <= digits[i]) {\n        j--;\n    }\n    std::swap(digits[i], digits[j]);\n    std::reverse(digits.begin() + i + 1, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long l;\n    ss >> l;\n    return l;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for (int i = digits.size() - 1; i >= 0; i--) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long res;\n    ss >> res;\n    return res;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (int i = 0; i < s.size(); i++) {\n        v.push_back(s[i] - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::string s1 = \"\";\n    for (int i = 0; i < v.size(); i++) {\n        s1 += std::to_string(v[i]);\n    }\n    return std::stol(s1);",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for (auto digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.size() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "\tstd::string s = std::to_string(n);\n\tint len = s.length();\n\tint i = len - 1;\n\twhile (i > 0 && s[i] <= s[i - 1]) {\n\t\ti--;\n\t}\n\tif (i == 0) {\n\t\treturn -1;\n\t}\n\tint x = s[i - 1];\n\tint smallest = i;\n\tfor (int j = i + 1; j < len; j++) {\n\t\tif (s[j] > x && s[j] < s[smallest]) {\n\t\t\tsmallest = j;\n\t\t}\n\t}\n\tstd::swap(s[i - 1], s[smallest]);\n\tstd::sort(s.begin() + i, s.end());\n\treturn std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::sort(s.begin(), s.end());\n    long min = std::stol(s);\n    if (min == n) {\n        return max;\n    }\n    return min;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for(auto digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long long max = std::stoll(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    long long min = std::stoll(s1);\n    if (min == n) {\n        return std::nullopt;\n    }\n    std::string s2 = std::to_string(n);\n    std::sort(s2.begin(), s2.end());\n    std::reverse(s2.begin(), s2.end());\n    long long next = std::stoll(s2);\n    return next;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while (j < s.size() && s[j] > s[i - 1]) {\n        j++;\n    }\n    std::swap(s[i - 1], s[j - 1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    if (s[0] == '0') {\n        return std::nullopt;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[j], digits[i - 1]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len-1;\n    for(; i > 0; i--) {\n        if(s[i] > s[i-1]) {\n            break;\n        }\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int min_index = i;\n    for(int j = i+1; j < len; j++) {\n        if(s[j] > s[i-1] && s[j] < s[min_index]) {\n            min_index = j;\n        }\n    }\n    std::swap(s[i-1], s[min_index]);\n    std::sort(s.begin()+i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = len - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result > n) {\n        return result;\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long result = std::stol(s);\n    if (result == n) {\n        return std::nullopt;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while(j > i && digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long res = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        res = res*10 + digits[i];\n    }\n    return res;",
    "  std::vector<int> digits;\n  while(n) {\n    digits.push_back(n%10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = digits.size() - 1;\n  while(i > 0 && digits[i-1] >= digits[i]) {\n    i--;\n  }\n  if(i == 0) {\n    return std::nullopt;\n  }\n  int j = digits.size() - 1;\n  while(digits[j] <= digits[i-1]) {\n    j--;\n  }\n  std::swap(digits[i-1], digits[j]);\n  j = digits.size() - 1;\n  while(i < j) {\n    std::swap(digits[i], digits[j]);\n    i++;\n    j--;\n  }\n  long result = 0;\n  for(int d : digits) {\n    result = result * 10 + d;\n  }\n  return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[j], s[i-1]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = i;\n    while(j < s.size() && s[j] > s[i-1]) {\n        j++;\n    }\n    std::swap(s[i-1], s[j-1]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); ++i) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (int i = 0; i < s.size(); i++) {\n        v.push_back(s[i] - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::string s1 = \"\";\n    for (int i = 0; i < v.size(); i++) {\n        s1 += std::to_string(v[i]);\n    }\n    return s1;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; i--) {\n        if(digits[i] > digits[i - 1]) {\n            std::swap(digits[i], digits[i - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for(int j = 0; j < digits.size(); j++) {\n                result = result * 10 + digits[j];\n            }\n            return result;\n        }\n    }\n    return std::nullopt;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = len - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = len - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (auto c : s) {\n        v.push_back(c - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::string s1 = \"\";\n    for (auto c : v) {\n        s1 += std::to_string(c);\n    }\n    return std::stol(s1);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    // find the first digit that is smaller than the next digit\n    int i = 0;\n    for (; i < digits.size() - 1; i++) {\n        if (digits[i] < digits[i + 1]) {\n            break;\n        }\n    }\n    if (i == digits.size() - 1) {\n        return std::nullopt;\n    }\n    // find the smallest digit that is larger than digits[i]\n    int j = i + 1;\n    for (; j < digits.size(); j++) {\n        if (digits[j] < digits[i]) {\n            break;\n        }\n    }\n    std::swap(digits[i], digits[j - 1]);\n    std::sort(digits.begin() + i + 1, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::any();\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size() - 1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for (auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size()-1; i > 0; i--) {\n        if(digits[i] > digits[i-1]) {\n            int j = i;\n            while(j < digits.size() && digits[j] > digits[i-1]) {\n                j++;\n            }\n            std::swap(digits[i-1], digits[j-1]);\n            std::sort(digits.begin()+i, digits.end());\n            break;\n        }\n    }\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        --i;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        --j;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 2;\n    while(i >= 0 && digits[i] >= digits[i + 1]) {\n        i--;\n    }\n    if(i < 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(j > i && digits[j] <= digits[i]) {\n        j--;\n    }\n    std::swap(digits[i], digits[j]);\n    std::reverse(digits.begin() + i + 1, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    std::next_permutation(digits.begin(), digits.end());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size()-1; i > 0; i--) {\n        if(digits[i] > digits[i-1]) {\n            std::swap(digits[i], digits[i-1]);\n            std::sort(digits.begin()+i, digits.end());\n            long result = 0;\n            for(int i = 0; i < digits.size(); i++) {\n                result = result*10 + digits[i];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> v;\n    while(n) {\n        v.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(v.begin(), v.end());\n    for(int i = v.size()-1; i > 0; i--) {\n        if(v[i] > v[i-1]) {\n            std::swap(v[i], v[i-1]);\n            std::sort(v.begin()+i, v.end());\n            break;\n        }\n    }\n    long res = 0;\n    for(int i = 0; i < v.size(); i++) {\n        res = res*10 + v[i];\n    }\n    return res;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end(), std::greater<char>());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.size() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(auto d : digits) {\n        result = result*10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    // find the first digit that is smaller than the digit to its right\n    int i = 0;\n    for(; i < digits.size() - 1; i++) {\n        if(digits[i] < digits[i+1]) {\n            break;\n        }\n    }\n    if(i == digits.size() - 1) {\n        return std::nullopt;\n    }\n    // find the smallest digit that is larger than digits[i]\n    int j = i + 1;\n    for(; j < digits.size(); j++) {\n        if(digits[j] < digits[i]) {\n            break;\n        }\n    }\n    j--;\n    // swap digits[i] and digits[j]\n    std::swap(digits[i], digits[j]);\n    // sort the digits to the right of i\n    std::sort(digits.begin() + i + 1, digits.end());\n    long result = 0;\n    for(int k = digits.size() - 1; k >= 0; k--) {\n        result = result * 10 + digits[k];\n    }\n    return result;",
    "    auto digits = std::to_string(n);\n    auto it = std::is_sorted_until(digits.rbegin(), digits.rend());\n    if (it == digits.rend()) {\n        return std::nullopt;\n    }\n    auto pivot = std::distance(it, digits.rend()) - 1;\n    auto next = std::upper_bound(digits.rbegin(), it, digits[pivot]);\n    std::swap(digits[pivot], *next);\n    std::sort(digits.rbegin(), next);\n    return std::stol(digits);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return -1;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    j = digits.size() - 1;\n    while (i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i-1] >= s[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.size() - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    std::stringstream ss;\n    ss << s;\n    long l;\n    ss >> l;\n    return l;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        --i;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        --j;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    long result = 0;\n    for (int i = digits.size() - 1; i >= 0; i--) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i;\n    for(i = digits.size() - 1; i > 0; i--) {\n        if(digits[i] > digits[i-1]) {\n            break;\n        }\n    }\n    if(i == 0) {\n        return -1;\n    }\n    int x = digits[i-1];\n    int smallest = i;\n    for(int j = i+1; j < digits.size(); j++) {\n        if(digits[j] > x && digits[j] < digits[smallest]) {\n            smallest = j;\n        }\n    }\n    std::swap(digits[i-1], digits[smallest]);\n    std::sort(digits.begin() + i, digits.end());\n    long num = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        num = num*10 + digits[i];\n    }\n    return num;",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::sort(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n/=10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i>0 && digits[i-1]>=digits[i]) {\n        --i;\n    }\n    if(i==0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j]<=digits[i-1]) {\n        --j;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::reverse(digits.begin()+i, digits.end());\n    long result = 0;\n    for(int i=0; i<digits.size(); ++i) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for(int i = digits.size() - 1; i > 0; i--) {\n        if(digits[i] > digits[i - 1]) {\n            std::swap(digits[i], digits[i - 1]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for(int i = 0; i < digits.size(); i++) {\n                result = result * 10 + digits[i];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::string s1 = std::to_string(n);\n    std::sort(s1.begin(), s1.end());\n    std::reverse(s1.begin(), s1.end());\n    long min = std::stol(s1);\n    if (min == n) {\n        return std::nullopt;\n    }\n    std::string s2 = std::to_string(n);\n    std::sort(s2.begin(), s2.end());\n    long min_next = std::stol(s2);\n    if (min_next == n) {\n        return std::nullopt;\n    }\n    std::string s3 = std::to_string(n);\n    std::sort(s3.begin(), s3.end());\n    std::reverse(s3.begin(), s3.end());\n    long max_next = std::stol(s3);\n    if (max_next == n) {\n        return std::nullopt;\n    }\n    return std::nullopt;",
    "  std::vector<int> digits;\n  while (n > 0) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = digits.size() - 1;\n  while (i > 0 && digits[i - 1] >= digits[i]) {\n    i--;\n  }\n  if (i == 0) {\n    return std::nullopt;\n  }\n  int j = digits.size() - 1;\n  while (digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  std::swap(digits[i - 1], digits[j]);\n  j = digits.size() - 1;\n  while (i < j) {\n    std::swap(digits[i], digits[j]);\n    i++;\n    j--;\n  }\n  long result = 0;\n  for (int i = 0; i < digits.size(); i++) {\n    result = result * 10 + digits[i];\n  }\n  return result;",
    "    std::vector<int> digits;\n    while (n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<>());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 2;\n    while (i >= 0 && digits[i] >= digits[i + 1]) {\n        i--;\n    }\n    if (i < 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (j > i && digits[j] <= digits[i]) {\n        j--;\n    }\n    std::swap(digits[i], digits[j]);\n    std::reverse(digits.begin() + i + 1, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    // convert to string\n    std::string s = std::to_string(n);\n    // find the first decreasing digit\n    int i = s.size() - 1;\n    while (i > 0 && s[i - 1] >= s[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    // find the smallest digit greater than s[i - 1]\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    // swap s[i - 1] and s[j]\n    std::swap(s[i - 1], s[j]);\n    // reverse s[i:]\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i] <= digits[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    std::sort(digits.begin()+i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result*10 + digits[i];\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::vector<int> v;\n    for (auto i : s) {\n        v.push_back(i - '0');\n    }\n    std::sort(v.begin(), v.end());\n    std::string res;\n    for (auto i : v) {\n        res += std::to_string(i);\n    }\n    return res;",
    "    std::string s = std::to_string(n);\n    int i = s.length() - 1;\n    while (i > 0 && s[i-1] >= s[i]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.length() - 1;\n    while (s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    j = s.length() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "  std::string s = std::to_string(n);\n  int i = s.size() - 1;\n  while (i > 0 && s[i] <= s[i - 1]) {\n    i--;\n  }\n  if (i == 0) {\n    return std::nullopt;\n  }\n  int j = s.size() - 1;\n  while (s[j] <= s[i - 1]) {\n    j--;\n  }\n  std::swap(s[i - 1], s[j]);\n  j = s.size() - 1;\n  while (i < j) {\n    std::swap(s[i], s[j]);\n    i++;\n    j--;\n  }\n  return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end(), std::greater<char>());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    for (int i = digits.size() - 1; i > 0; i--) {\n        if (digits[i] > digits[i - 1]) {\n            int min_index = i;\n            for (int j = i + 1; j < digits.size(); j++) {\n                if (digits[j] > digits[i - 1] && digits[j] < digits[min_index]) {\n                    min_index = j;\n                }\n            }\n            std::swap(digits[i - 1], digits[min_index]);\n            std::sort(digits.begin() + i, digits.end());\n            long result = 0;\n            for (int i = 0; i < digits.size(); i++) {\n                result = result * 10 + digits[i];\n            }\n            return result;\n        }\n    }\n    return -1;",
    "    std::vector<int> digits;\n    while(n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while(i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while(digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::reverse(digits.begin() + i, digits.end());\n    long result = 0;\n    for(int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    auto it = std::is_sorted_until(digits.begin(), digits.end(), std::greater<int>());\n    if(it == digits.end()) {\n        return std::nullopt;\n    }\n    auto it2 = std::upper_bound(digits.begin(), digits.end(), *it, std::greater<int>());\n    std::swap(*it, *it2);\n    std::sort(it + 1, digits.end(), std::greater<int>());\n    long result = 0;\n    for(auto d : digits) {\n        result = result * 10 + d;\n    }\n    return result;",
    "    std::string s = std::to_string(n);\n    int len = s.length();\n    int i = len - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::any();\n    }\n    int j = len - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = len - 1;\n    while(i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::any(std::stol(s));",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stoi(s);",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while (n > 0) {\n        digits.push_back(n % 10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size() - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size() - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    std::swap(digits[i - 1], digits[j]);\n    std::sort(digits.begin() + i, digits.end());\n    long result = 0;\n    for (int i = 0; i < digits.size(); i++) {\n        result = result * 10 + digits[i];\n    }\n    return result;",
    "  if (n < 0) {\n    return std::nullopt;\n  }\n  std::vector<int> digits;\n  while (n) {\n    digits.push_back(n % 10);\n    n /= 10;\n  }\n  std::reverse(digits.begin(), digits.end());\n  int i = digits.size() - 1;\n  while (i > 0 && digits[i - 1] >= digits[i]) {\n    --i;\n  }\n  if (i == 0) {\n    return std::nullopt;\n  }\n  int j = digits.size() - 1;\n  while (digits[j] <= digits[i - 1]) {\n    --j;\n  }\n  std::swap(digits[i - 1], digits[j]);\n  std::reverse(digits.begin() + i, digits.end());\n  long result = 0;\n  for (int d : digits) {\n    result = result * 10 + d;\n  }\n  return result;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long res = std::stol(s);\n    if (res == n) {\n        return std::nullopt;\n    }\n    return res;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    if (s[0] == '0') {\n        return -1;\n    }\n    return std::stol(s);",
    "    std::vector<int> digits;\n    while(n) {\n        digits.push_back(n%10);\n        n /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    int i = digits.size()-1;\n    while(i > 0 && digits[i-1] >= digits[i]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = digits.size()-1;\n    while(digits[j] <= digits[i-1]) {\n        j--;\n    }\n    std::swap(digits[i-1], digits[j]);\n    j = digits.size()-1;\n    while(i < j) {\n        std::swap(digits[i], digits[j]);\n        i++;\n        j--;\n    }\n    long result = 0;\n    for(auto d : digits) {\n        result = result*10 + d;\n    }\n    return result;",
    "  std::string s = std::to_string(n);\n  std::sort(s.begin(), s.end());\n  std::reverse(s.begin(), s.end());\n  return std::stol(s);",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    long max = std::stol(s);\n    if (max == n) {\n        return std::nullopt;\n    }\n    std::sort(s.begin(), s.end());\n    std::string s1 = std::to_string(n);\n    std::string s2 = s;\n    std::string s3;\n    int i = 0;\n    while (s1[i] == s2[i]) {\n        s3 += s1[i];\n        i++;\n    }\n    s3 += s2[i];\n    s2.erase(i, 1);\n    s2.insert(0, s3);\n    return std::stol(s2);",
    "    std::string s = std::to_string(n);\n    int i = s.size()-1;\n    while(i>0 && s[i-1]>=s[i]) {\n        i--;\n    }\n    if(i==0) {\n        return std::any();\n    }\n    int j = s.size()-1;\n    while(s[j]<=s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin()+i, s.end());\n    return std::any(std::stol(s));",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    j = s.size() - 1;\n    while (i < j) {\n        std::swap(s[i], s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while (i > 0 && s[i] <= s[i - 1]) {\n        i--;\n    }\n    if (i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while (s[j] <= s[i - 1]) {\n        j--;\n    }\n    std::swap(s[i - 1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return std::stol(s);",
    "    std::string s = std::to_string(n);\n    int i = s.size()-1;\n    while(i>0 && s[i-1]>=s[i])\n        i--;\n    if(i==0)\n        return std::nullopt;\n    int j = s.size()-1;\n    while(s[j]<=s[i-1])\n        j--;\n    std::swap(s[i-1],s[j]);\n    j = s.size()-1;\n    while(i<j) {\n        std::swap(s[i],s[j]);\n        i++;\n        j--;\n    }\n    return std::stol(s);",
    "    std::string str = std::to_string(n);\n    std::sort(str.begin(), str.end());\n    std::reverse(str.begin(), str.end());\n    return std::stol(str);",
    "    std::string s = std::to_string(n);\n    int i = s.size() - 1;\n    while(i > 0 && s[i] <= s[i-1]) {\n        i--;\n    }\n    if(i == 0) {\n        return std::nullopt;\n    }\n    int j = s.size() - 1;\n    while(s[j] <= s[i-1]) {\n        j--;\n    }\n    std::swap(s[i-1], s[j]);\n    std::reverse(s.begin() + i, s.end());\n    return s;",
    "    std::string s = std::to_string(n);\n    std::sort(s.begin(), s.end());\n    std::reverse(s.begin(), s.end());\n    return std::stol(s);"
  ]
}