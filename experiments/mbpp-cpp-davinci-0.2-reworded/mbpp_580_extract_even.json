{
  "name": "mbpp_580_extract_even",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_long{\n    long f1;    Union_long_long(long _f1) : f1(_f1) {}\n    ~Union_long_long() {}\n    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\nunion Union_long_Union_long_long{\n    long f0;\n    Union_long_long f1;    Union_long_Union_long_long(long _f0) : f0(_f0) {}\n    Union_long_Union_long_long(Union_long_long _f1) : f1(_f1) {}\n    ~Union_long_Union_long_long() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(Union_long_long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to remove uneven elements in the nested mixed tuple.\nUnion_long_Union_long_long extract_even(Union_long_Union_long_long test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = extract_even;\n    assert(candidate(std::make_tuple(4, 5, std::make_tuple(7, 6, std::make_tuple(2, 4)), 6, 8)) == std::make_tuple(4, std::make_tuple(6, std::make_tuple(2, 4)), 6, 8));\n    assert(candidate(std::make_tuple(5, 6, std::make_tuple(8, 7, std::make_tuple(4, 8)), 7, 9)) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 8))));\n    assert(candidate(std::make_tuple(5, 6, std::make_tuple(9, 8, std::make_tuple(4, 6)), 8, 10)) == std::make_tuple(6, std::make_tuple(8, std::make_tuple(4, 6)), 8, 10));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return test_tuple;",
    "    if (test_tuple == (Union_long_Union_long_long)0) {\n        return (Union_long_Union_long_long)0;\n    } else if (test_tuple == (Union_long_Union_long_long)1) {\n        return (Union_long_Union_long_long)1;\n    } else if (test_tuple == (Union_long_Union_long_long)2) {\n        return (Union_long_Union_long_long)2;\n    } else if (test_tuple == (Union_long_Union_long_long)3) {\n        return (Union_long_Union_long_long)3;\n    } else if (test_tuple == (Union_long_Union_long_long)4) {\n        return (Union_long_Union_long_long)4;\n    } else if (test_tuple == (Union_long_Union_long_long)5) {\n        return (Union_long_Union_long_long)5;\n    } else if (test_tuple == (Union_long_Union_long_long)6) {\n        return (Union_long_Union_long_long)6;\n    } else if (test_tuple == (Union_long_Union_long_long)7) {\n        return (Union_long_Union_long_long)7;\n    } else if (test_tuple == (Union_long_Union_long_long)8) {\n        return (Union_long_Union_long_long)8;\n    } else if (test_tuple == (Union_long_Union_long_long)9) {\n        return (Union_long_Union_long_long)9;\n    } else if (test_tuple == (Union_long_Union_long_long)10) {\n        return (Union_long_Union_long_long)10;\n    } else if (test_tuple == (Union_long_Union_long_long)11) {\n        return (Union_long_Union_long_long)11;\n    } else if (test_tuple == (Union_long_Union_long_long)",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(test_tuple.f1));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else if (test_tuple == 1) {\n        return Union_long_Union_long_long(1);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return Union_long_Union_long_long(test_tuple.f0);",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return 0;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    Union_long_Union_long_long result;\n    if (test_tuple == test_tuple.f0) {\n        result = test_tuple.f0;\n    } else {\n        result = test_tuple.f1;\n    }\n    return result;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    Union_long_Union_long_long result;\n    if (test_tuple == 0) {\n        result = 0;\n    } else {\n        result = Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }\n    return result;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(Union_long_long(0));\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(test_tuple.f1).f1));\n    }",
    "    if (test_tuple == 1) {\n        return Union_long_Union_long_long(1);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(2));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(test_tuple.f1));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if(test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    }\n    return extract_even(test_tuple.f1);",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return 0;\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if(test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 2) {\n        return Union_long_Union_long_long(Union_long_long(2));\n    }\n    return Union_long_Union_long_long(1);",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        Union_long_long temp = extract_even(Union_long_Union_long_long(test_tuple.f1));\n        return Union_long_Union_long_long(temp);\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(test_tuple.f1).f1.f1));\n    }",
    "    if (test_tuple == (Union_long_Union_long_long)0) {\n        return (Union_long_Union_long_long)0;\n    } else {\n        return (Union_long_Union_long_long)test_tuple.f1.f1;\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    }\n    if (test_tuple == 1) {\n        return Union_long_Union_long_long(Union_long_long(1));\n    }\n    return Union_long_Union_long_long(Union_long_long(2));",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    if (test_tuple == 0) {\n        return 0;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)).f1.f1));\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return 0;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return test_tuple;\n    } else {\n        return extract_even(test_tuple.f1);\n    }",
    "    return test_tuple;",
    "    return test_tuple;",
    "    if (test_tuple == 0) {\n        return Union_long_Union_long_long(0);\n    } else {\n        return Union_long_Union_long_long(extract_even(Union_long_Union_long_long(test_tuple.f1.f1)));\n    }"
  ]
}