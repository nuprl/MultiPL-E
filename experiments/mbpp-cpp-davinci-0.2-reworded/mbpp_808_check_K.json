{
  "name": "mbpp_808_check_K",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given tuples contain the k or not.\nbool check_K(long test_tup, long K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_K;\n    assert(candidate(std::make_tuple(10, 4, 5, 6, 8), (6)) == (true));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6), (7)) == (false));\n    assert(candidate(std::make_tuple(7, 8, 9, 44, 11, 12), (11)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int i = 0;\n    while (test_tup) {\n        if (test_tup % 10 == K) {\n            return true;\n        }\n        test_tup /= 10;\n        i++;\n    }\n    return false;",
    "    long mask = 1;\n    for (int i = 0; i < 32; i++) {\n        if ((test_tup & mask) == K) {\n            return true;\n        }\n        mask = mask << 1;\n    }\n    return false;",
    "    long temp = test_tup;\n    while(temp) {\n        if(temp%10 == K)\n            return true;\n        temp /= 10;\n    }\n    return false;",
    "    if (test_tup == K) {\n        return true;\n    }\n    return false;",
    "    return (test_tup & K) == K;",
    "    while(test_tup > 0) {\n        if(test_tup % 10 == K) {\n            return true;\n        }\n        test_tup /= 10;\n    }\n    return false;",
    "    long temp = test_tup;\n    while(temp) {\n        if(temp%10 == K) {\n            return true;\n        }\n        temp = temp/10;\n    }\n    return false;",
    "    return (test_tup & K) == K;",
    "    if (test_tup == K) {\n        return true;\n    }\n    return false;",
    "    long temp = test_tup;\n    while(temp != 0) {\n        if(temp % 10 == K) {\n            return true;\n        }\n        temp /= 10;\n    }\n    return false;",
    "    if(test_tup == K) {\n        return true;\n    }\n    return false;",
    "    // Write your code here\n    int count = 0;\n    while(test_tup > 0) {\n        if(test_tup % 10 == K) {\n            count++;\n        }\n        test_tup /= 10;\n    }\n    if(count > 0) {\n        return true;\n    }\n    return false;",
    "  long temp = test_tup;\n  while(temp != 0) {\n    if(temp % 10 == K) {\n      return true;\n    }\n    temp /= 10;\n  }\n  return false;",
    "    return (test_tup & K) == K;",
    "    // Write your code here\n    long temp = test_tup;\n    while(temp > 0) {\n        if(temp % 10 == K) {\n            return true;\n        }\n        temp /= 10;\n    }\n    return false;",
    "    int count = 0;\n    while (test_tup > 0) {\n        if (test_tup % 10 == K) {\n            count++;\n        }\n        test_tup = test_tup / 10;\n    }\n    if (count == 2) {\n        return true;\n    }\n    return false;",
    "    long temp = test_tup;\n    while(temp) {\n        if(temp%10 == K)\n            return true;\n        temp /= 10;\n    }\n    return false;",
    "    // Write your code here\n    long temp = test_tup;\n    while(temp > 0) {\n        if(temp % 10 == K) {\n            return true;\n        }\n        temp = temp / 10;\n    }\n    return false;",
    "    long temp = test_tup;\n    while (temp > 0) {\n        if (temp % 10 == K) {\n            return true;\n        }\n        temp /= 10;\n    }\n    return false;",
    "    int count = 0;\n    while(test_tup) {\n        if(test_tup & 1) {\n            count++;\n        }\n        test_tup = test_tup >> 1;\n    }\n    if(count == K) {\n        return true;\n    }\n    return false;"
  ]
}