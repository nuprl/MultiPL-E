{
  "name": "mbpp_616_tuple_modulo",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which takes two tuples of the same length and performs the element wise modulo.\nlong tuple_modulo(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_modulo;\n    assert(candidate(std::make_tuple(10, 4, 5, 6), std::make_tuple(5, 6, 7, 5)) == std::make_tuple(0, 4, 5, 1));\n    assert(candidate(std::make_tuple(11, 5, 6, 7), std::make_tuple(6, 7, 8, 6)) == std::make_tuple(5, 5, 6, 1));\n    assert(candidate(std::make_tuple(12, 6, 7, 8), std::make_tuple(7, 8, 9, 7)) == std::make_tuple(5, 6, 7, 1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "    long result = test_tup1 % test_tup2;\n    return result;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "  long tuple_modulo = test_tup1 % test_tup2;\n  return tuple_modulo;",
    "    return test_tup1 % test_tup2;",
    "    long tuple_modulo_result = test_tup1 % test_tup2;\n    return tuple_modulo_result;",
    "    return test_tup1 % test_tup2;",
    "    long test_tup3 = test_tup1 % test_tup2;\n    return test_tup3;",
    "    return test_tup1 % test_tup2;",
    "    long test_tup3;\n    test_tup3 = test_tup1 % test_tup2;\n    return test_tup3;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "    long test_tup3;\n    test_tup3 = test_tup1 % test_tup2;\n    return test_tup3;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;",
    "    return test_tup1 % test_tup2;"
  ]
}