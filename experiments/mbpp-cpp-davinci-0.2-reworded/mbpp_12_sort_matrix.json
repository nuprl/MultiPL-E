{
  "name": "mbpp_12_sort_matrix",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nstd::vector<std::vector<long>> sort_matrix(std::vector<std::vector<long>> M) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = sort_matrix;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)4, (long)5})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)-2, (long)4, (long)-5}), (std::vector<long>)std::vector<long>({(long)1, (long)-1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4})}))) == (std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)8, (long)9})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++)\n    {\n        for(int j=0;j<sums.size();j++)\n        {\n            if(sorted_sums[i]==sums[j])\n            {\n                result.push_back(M[j]);\n                sums[j]=0;\n                break;\n            }\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<std::pair<long, long>> v;\n    for(int i = 0; i < M.size(); i++){\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++){\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<std::vector<long>> res;\n    for(int i = 0; i < v.size(); i++){\n        res.push_back(M[v[i].second]);\n    }\n    return res;",
    "    std::vector<std::pair<long, std::vector<long>>> sum_row;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sum_row.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sum_row.begin(), sum_row.end());\n    std::vector<std::vector<long>> res;\n    for (auto row : sum_row) {\n        res.push_back(row.second);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, M[i]));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        result.push_back(sums[i].second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<std::pair<long, int>> sums_index;\n    for(int i = 0; i < sums.size(); i++) {\n        sums_index.push_back(std::make_pair(sums[i], i));\n    }\n    std::sort(sums_index.begin(), sums_index.end());\n    for(int i = 0; i < sums_index.size(); i++) {\n        result.push_back(M[sums_index[i].second]);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::vector<std::vector<long>> sorted_matrix;\n    std::vector<long> row_sum;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        row_sum.push_back(sum);\n    }\n    std::vector<long> row_sum_copy = row_sum;\n    std::sort(row_sum_copy.begin(),row_sum_copy.end());\n    for(int i=0;i<row_sum_copy.size();i++){\n        for(int j=0;j<row_sum.size();j++){\n            if(row_sum_copy[i]==row_sum[j]){\n                sorted_matrix.push_back(M[j]);\n                row_sum[j]=-1;\n                break;\n            }\n        }\n    }\n    return sorted_matrix;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto pair : sums) {\n        result.push_back(pair.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for (auto row : M) {\n        long sum = 0;\n        for (auto elem : row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (auto row : sums) {\n        result.push_back(row.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<int> indices(M.size());\n    std::iota(indices.begin(), indices.end(), 0);\n    std::sort(indices.begin(), indices.end(), [&sums](int i, int j) {\n        return sums[i] < sums[j];\n    });\n    for(int i = 0; i < indices.size(); i++) {\n        res.push_back(M[indices[i]]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<std::pair<long, int>> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(std::make_pair(sum, i));\n    }\n    std::sort(sums.begin(), sums.end());\n    for (int i = 0; i < sums.size(); i++) {\n        res.push_back(M[sums[i].second]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<std::pair<long, std::vector<long>>> sums;\n    for(auto row: M) {\n        long sum = 0;\n        for(auto elem: row) {\n            sum += elem;\n        }\n        sums.push_back(std::make_pair(sum, row));\n    }\n    std::sort(sums.begin(), sums.end());\n    for(auto sum: sums) {\n        result.push_back(sum.second);\n    }\n    return result;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sum;\n    for(int i=0;i<M.size();i++)\n    {\n        long sum_row=0;\n        for(int j=0;j<M[i].size();j++)\n        {\n            sum_row+=M[i][j];\n        }\n        sum.push_back(sum_row);\n    }\n    for(int i=0;i<sum.size();i++)\n    {\n        for(int j=i+1;j<sum.size();j++)\n        {\n            if(sum[i]>sum[j])\n            {\n                long temp=sum[i];\n                sum[i]=sum[j];\n                sum[j]=temp;\n                std::vector<long> temp_row=M[i];\n                M[i]=M[j];\n                M[j]=temp_row;\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i=0;i<M.size();i++){\n        long sum=0;\n        for(int j=0;j<M[i].size();j++){\n            sum+=M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums=sums;\n    std::sort(sorted_sums.begin(),sorted_sums.end());\n    for(int i=0;i<sorted_sums.size();i++){\n        for(int j=0;j<sums.size();j++){\n            if(sorted_sums[i]==sums[j]){\n                res.push_back(M[j]);\n                sums[j]=0;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<std::vector<long>> res;\n    std::vector<long> sum;\n    long s = 0;\n    for(int i=0;i<M.size();i++){\n        for(int j=0;j<M[i].size();j++){\n            s+=M[i][j];\n        }\n        sum.push_back(s);\n        s=0;\n    }\n    std::vector<long> temp;\n    for(int i=0;i<sum.size();i++){\n        for(int j=0;j<sum.size()-i-1;j++){\n            if(sum[j]>sum[j+1]){\n                std::swap(sum[j],sum[j+1]);\n                temp = M[j];\n                M[j] = M[j+1];\n                M[j+1] = temp;\n            }\n        }\n    }\n    return M;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for(int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for(int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for(int i = 0; i < sorted_sums.size(); i++) {\n        for(int j = 0; j < sums.size(); j++) {\n            if(sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::vector<std::vector<long>> res;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                res.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return res;",
    "    // Write your code here\n    int n = M.size();\n    int m = M[0].size();\n    std::vector<std::pair<int, int>> v;\n    for(int i = 0; i < n; i++) {\n        int sum = 0;\n        for(int j = 0; j < m; j++) {\n            sum += M[i][j];\n        }\n        v.push_back(std::make_pair(sum, i));\n    }\n    std::sort(v.begin(), v.end());\n    std::vector<std::vector<long>> res;\n    for(int i = 0; i < n; i++) {\n        res.push_back(M[v[i].second]);\n    }\n    return res;",
    "    std::vector<std::vector<long>> result;\n    std::vector<long> sums;\n    for (int i = 0; i < M.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < M[i].size(); j++) {\n            sum += M[i][j];\n        }\n        sums.push_back(sum);\n    }\n    std::vector<long> sorted_sums = sums;\n    std::sort(sorted_sums.begin(), sorted_sums.end());\n    for (int i = 0; i < sorted_sums.size(); i++) {\n        for (int j = 0; j < sums.size(); j++) {\n            if (sorted_sums[i] == sums[j]) {\n                result.push_back(M[j]);\n                sums[j] = -1;\n                break;\n            }\n        }\n    }\n    return result;"
  ]
}