{
  "name": "mbpp_94_index_minimum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a vector of tuples, write a function that returns the first value of the tuple with the smallest second value.\nstd::string index_minimum(std::vector<Union_std_string_long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = index_minimum;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Rash\", 143), (std::tuple<std::string, long>)std::make_tuple(\"Manjeet\", 200), (std::tuple<std::string, long>)std::make_tuple(\"Varsha\", 100)}))) == (\"Varsha\"));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Yash\", 185), (std::tuple<std::string, long>)std::make_tuple(\"Dawood\", 125), (std::tuple<std::string, long>)std::make_tuple(\"Sanya\", 175)}))) == (\"Dawood\"));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Sai\", 345), (std::tuple<std::string, long>)std::make_tuple(\"Salman\", 145), (std::tuple<std::string, long>)std::make_tuple(\"Ayesha\", 96)}))) == (\"Ayesha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_val = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_val = test_list[i].f0;\n        }\n    }\n    return min_val;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            min_index = test_list[i].f0;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string index_minimum_result;\n    std::string current_minimum = test_list[0].f0;\n    long current_minimum_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < current_minimum_index) {\n            current_minimum = test_list[i].f0;\n            current_minimum_index = test_list[i].f1;\n        }\n    }\n    index_minimum_result = current_minimum;\n    return index_minimum_result;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    std::string ret = \"\";\n    long min = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < min) {\n            min = i.f1;\n            ret = i.f0;\n        }\n    }\n    return ret;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_value = std::numeric_limits<long>::max();\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    std::string result = \"\";\n    long min = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    long min = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value;\n    long min_index = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    std::string result;\n    long index = 0;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            index = i;\n        }\n    }\n    result = test_list[index].f0;\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    std::vector<Union_std_string_long>::iterator it = std::min_element(test_list.begin(), test_list.end(),\n        [](const Union_std_string_long& a, const Union_std_string_long& b) {\n            return a.f1 < b.f1;\n        });\n    result = it->f0;\n    return result;",
    "    std::string result;\n    int index = 0;\n    int min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            index = i;\n        }\n    }\n    result = test_list[index].f0;\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            min_index = test_list[i].f0;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long minimum = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    long minimum = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < minimum) {\n            minimum = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    int min_index = 0;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_val = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_val = test_list[i].f0;\n        }\n    }\n    return min_val;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = \"\";\n    long min_value = 0;\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            min_index = i.f0;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long minimum = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string index = \"\";\n    long minimum = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            index = test_list[i].f0;\n        }\n    }\n    return index;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = \"\";\n    long min_index = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value;\n    long min_index = std::numeric_limits<long>::max();\n    for (auto t : test_list) {\n        if (t.f1 < min_index) {\n            min_index = t.f1;\n            min_value = t.f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string index_min = test_list[0].f0;\n    long min = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            index_min = test_list[i].f0;\n        }\n    }\n    return index_min;",
    "    std::string min_index = \"\";\n    long min_value = LONG_MAX;\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            min_index = i.f0;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    result = min_value;\n    return result;",
    "    std::string result;\n    long min_value = std::numeric_limits<long>::max();\n    for (auto &item : test_list) {\n        if (item.f1 < min_value) {\n            min_value = item.f1;\n            result = item.f0;\n        }\n    }\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = \"\";\n    long min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long min = std::numeric_limits<long>::max();\n    for(auto i : test_list) {\n        if(i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long minimum = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long minimum = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < minimum) {\n            minimum = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = \"\";\n    long min_index = -1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (min_index == -1 || test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i=0; i<test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    result = test_list[0].f0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min_value = std::numeric_limits<long>::max();\n    for (auto& t : test_list) {\n        if (t.f1 < min_value) {\n            min_value = t.f1;\n            result = t.f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result = \"\";\n    long min = LONG_MAX;\n    for (auto i : test_list) {\n        if (i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++){\n        if(test_list[i].f1 < min){\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    int index = 0;\n    int min_index = 0;\n    int min_value = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            min_index = index;\n        }\n        index++;\n    }\n    result = test_list[min_index].f0;\n    return result;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (i->f1 < min) {\n            min = i->f1;\n            result = i->f0;\n        }\n    }\n    return result;",
    "    std::string minimum = test_list[0].f0;\n    long minimum_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < minimum_index) {\n            minimum = test_list[i].f0;\n            minimum_index = test_list[i].f1;\n        }\n    }\n    return minimum;",
    "    std::string result;\n    long minimum = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < minimum) {\n            minimum = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index;\n    long min_value = std::numeric_limits<long>::max();\n    for (auto &tuple : test_list) {\n        if (tuple.f1 < min_value) {\n            min_value = tuple.f1;\n            min_index = tuple.f0;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    int min_index = 0;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;",
    "    std::string result;\n    int index = 0;\n    int min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            index = i;\n        }\n    }\n    result = test_list[index].f0;\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_index = test_list[0].f0;\n    long min_value = test_list[0].f1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (auto i : test_list) {\n        if (i.f1 < min_index) {\n            min_index = i.f1;\n            min_value = i.f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min_value = std::numeric_limits<long>::max();\n    for (auto i : test_list) {\n        if (i.f1 < min_value) {\n            min_value = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min_value = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_value = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++){\n        if(test_list[i].f1 < min){\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = \"\";\n    long min_value = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        if(test_list[i].f1 < min_value){\n            min_value = test_list[i].f1;\n            min_index = test_list[i].f0;\n        }\n    }\n    return min_index;",
    "    std::string result;\n    int min = test_list[0].f1;\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i].f1 < min) {\n            min = test_list[i].f1;\n            result = test_list[i].f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string min_index = \"\";\n    long min_value = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_value) {\n            min_index = test_list[i].f0;\n            min_value = test_list[i].f1;\n        }\n    }\n    return min_index;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_index = test_list[i].f1;\n            min_value = test_list[i].f0;\n        }\n    }\n    return min_value;",
    "    std::string result;\n    long min = std::numeric_limits<long>::max();\n    for (auto &tuple : test_list) {\n        if (tuple.f1 < min) {\n            min = tuple.f1;\n            result = tuple.f0;\n        }\n    }\n    return result;",
    "    std::string result;\n    long min = std::numeric_limits<long>::max();\n    for(auto i : test_list) {\n        if(i.f1 < min) {\n            min = i.f1;\n            result = i.f0;\n        }\n    }\n    return result;",
    "    std::string min_value = test_list[0].f0;\n    long min_index = test_list[0].f1;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < min_index) {\n            min_value = test_list[i].f0;\n            min_index = test_list[i].f1;\n        }\n    }\n    return min_value;",
    "    int min_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i].f1 < test_list[min_index].f1) {\n            min_index = i;\n        }\n    }\n    return test_list[min_index].f0;"
  ]
}