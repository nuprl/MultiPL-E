{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to pack consecutive duplicates of a given vector elements into subvectors.\nstd::any pack_consecutive_duplicates(std::any list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = pack_consecutive_duplicates;\n    assert(candidate((std::any({(long)0, (long)0, (long)1, (long)2, (long)3, (long)4, (long)4, (long)5, (long)6, (long)6, (long)6, (long)7, (long)8, (long)9, (long)4, (long)4}))) == (std::any({(std::vector<long>)std::vector<long>({(long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)2}), (std::vector<long>)std::vector<long>({(long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)4}), (std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)6, (long)6}), (std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)8}), (std::vector<long>)std::vector<long>({(long)9}), (std::vector<long>)std::vector<long>({(long)4, (long)4})})));\n    assert(candidate((std::any({(long)10, (long)10, (long)15, (long)19, (long)18, (long)18, (long)17, (long)26, (long)26, (long)17, (long)18, (long)10}))) == (std::any({(std::vector<long>)std::vector<long>({(long)10, (long)10}), (std::vector<long>)std::vector<long>({(long)15}), (std::vector<long>)std::vector<long>({(long)19}), (std::vector<long>)std::vector<long>({(long)18, (long)18}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)26, (long)26}), (std::vector<long>)std::vector<long>({(long)17}), (std::vector<long>)std::vector<long>({(long)18}), (std::vector<long>)std::vector<long>({(long)10})})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"d\"}))) == (std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"a\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"d\", (std::string)\"d\"})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::any list2;\n    std::any sublist;\n    std::any temp;\n    std::any temp2;\n    std::any temp3;\n    std::any temp4;\n    std::any temp5;\n    std::any temp6;\n    std::any temp7;\n    std::any temp8;\n    std::any temp9;\n    std::any temp10;\n    std::any temp11;\n    std::any temp12;\n    std::any temp13;\n    std::any temp14;\n    std::any temp15;\n    std::any temp16;\n    std::any temp17;\n    std::any temp18;\n    std::any temp19;\n    std::any temp20;\n    std::any temp21;\n    std::any temp22;\n    std::any temp23;\n    std::any temp24;\n    std::any temp25;\n    std::any temp26;\n    std::any temp27;\n    std::any temp28;\n    std::any temp29;\n    std::any temp30;\n    std::any temp31;\n    std::any temp32;\n    std::any temp33;\n    std::any temp34;\n    std::any temp35;\n    std::any temp36;\n    std::any temp37;\n    std::any temp38;\n    std::any temp39;\n    std::any temp40;\n    std::any temp41;\n    std::any temp42;\n    std::any temp43;\n    std::any temp44;\n    std::any temp45;\n    std::any temp46;\n    std::any temp47;\n    std::any temp48;\n    std::any temp49;\n    std::any temp50;\n    std::any temp51;\n    std::any temp52;\n    std::any temp53;\n    std::any temp54;\n    std::any temp55;\n    std::any temp56;\n    std::any temp57;\n    std::any temp58;\n    std::any temp59;\n    std::any temp60;\n    std::any temp61;\n    std::any temp62;\n",
    "    std::any list2;\n    std::any sublist;\n    int i = 0;\n    while(i < list1.size()) {\n        int j = i;\n        while(j < list1.size() && list1[i] == list1[j]) {\n            j++;\n        }\n        sublist.push_back(list1[i]);\n        list2.push_back(sublist);\n        sublist.clear();\n        i = j;\n    }\n    return list2;",
    "    std::any list2;\n    std::any temp;\n    std::any::iterator it;\n    std::any::iterator it1;\n    for(it=list1.begin();it!=list1.end();it++)\n    {\n        if(it==list1.begin())\n        {\n            temp.push_back(*it);\n        }\n        else\n        {\n            if(*it==*(it-1))\n            {\n                temp.push_back(*it);\n            }\n            else\n            {\n                list2.push_back(temp);\n                temp.clear();\n                temp.push_back(*it);\n            }\n        }\n    }\n    list2.push_back(temp);\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any::iterator it;\n    std::any::iterator it1;\n    std::any::iterator it2;\n    for (it = list1.begin(); it != list1.end(); it++) {\n        if (sublist.empty()) {\n            sublist.push_back(*it);\n        }\n        else {\n            it1 = sublist.end();\n            it1--;\n            if (*it == *it1) {\n                sublist.push_back(*it);\n            }\n            else {\n                list2.push_back(sublist);\n                sublist.clear();\n                sublist.push_back(*it);\n            }\n        }\n    }\n    list2.push_back(sublist);\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any temp;\n    int i = 0;\n    while (i < list1.size()) {\n        temp = list1[i];\n        sublist.push_back(temp);\n        i++;\n        while (i < list1.size() && list1[i] == temp) {\n            sublist.push_back(list1[i]);\n            i++;\n        }\n        list2.push_back(sublist);\n        sublist.clear();\n    }\n    return list2;",
    "    std::any result;\n    std::any temp;\n    std::any::iterator it;\n    for (it = list1.begin(); it != list1.end(); it++) {\n        if (temp.empty() || temp.back() != *it) {\n            if (!temp.empty()) {\n                result.push_back(temp);\n            }\n            temp.clear();\n        }\n        temp.push_back(*it);\n    }\n    result.push_back(temp);\n    return result;",
    "    std::any list2;\n    std::any temp;\n    int count = 0;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == list1[i + 1]) {\n            temp.push_back(list1[i]);\n            count++;\n        } else {\n            temp.push_back(list1[i]);\n            list2.push_back(temp);\n            temp.clear();\n            count = 0;\n        }\n    }\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any last_element;\n    for (auto element : list1) {\n        if (element != last_element) {\n            if (sublist.size() > 0) {\n                list2.push_back(sublist);\n            }\n            sublist.clear();\n        }\n        sublist.push_back(element);\n        last_element = element;\n    }\n    if (sublist.size() > 0) {\n        list2.push_back(sublist);\n    }\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any temp;\n    std::any temp1;\n    std::any temp2;\n    std::any temp3;\n    std::any temp4;\n    std::any temp5;\n    std::any temp6;\n    std::any temp7;\n    std::any temp8;\n    std::any temp9;\n    std::any temp10;\n    std::any temp11;\n    std::any temp12;\n    std::any temp13;\n    std::any temp14;\n    std::any temp15;\n    std::any temp16;\n    std::any temp17;\n    std::any temp18;\n    std::any temp19;\n    std::any temp20;\n    std::any temp21;\n    std::any temp22;\n    std::any temp23;\n    std::any temp24;\n    std::any temp25;\n    std::any temp26;\n    std::any temp27;\n    std::any temp28;\n    std::any temp29;\n    std::any temp30;\n    std::any temp31;\n    std::any temp32;\n    std::any temp33;\n    std::any temp34;\n    std::any temp35;\n    std::any temp36;\n    std::any temp37;\n    std::any temp38;\n    std::any temp39;\n    std::any temp40;\n    std::any temp41;\n    std::any temp42;\n    std::any temp43;\n    std::any temp44;\n    std::any temp45;\n    std::any temp46;\n    std::any temp47;\n    std::any temp48;\n    std::any temp49;\n    std::any temp50;\n    std::any temp51;\n    std::any temp52;\n    std::any temp53;\n    std::any temp54;\n    std::any temp55;\n    std::any temp56;\n    std::any temp57;\n    std::any temp58;\n    std::any temp59;\n    std::any temp60;\n    std::any temp61;\n",
    "    std::any list2;\n    std::any sublist;\n    int prev = -1;\n    for(int i=0;i<list1.size();i++) {\n        if(list1[i] != prev) {\n            if(sublist.size() > 0) {\n                list2.push_back(sublist);\n            }\n            sublist.clear();\n        }\n        sublist.push_back(list1[i]);\n        prev = list1[i];\n    }\n    if(sublist.size() > 0) {\n        list2.push_back(sublist);\n    }\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any::iterator it = list1.begin();\n    while(it != list1.end()) {\n        sublist.push_back(*it);\n        it++;\n        if(it == list1.end() || *it != *(it-1)) {\n            list2.push_back(sublist);\n            sublist.clear();\n        }\n    }\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any::iterator it;\n    std::any::iterator it1;\n    std::any::iterator it2;\n    it1 = list1.begin();\n    it2 = list1.begin();\n    it2++;\n    for(it = list1.begin(); it != list1.end(); it++) {\n        if(*it == *it2) {\n            sublist.push_back(*it);\n            it1++;\n            it2++;\n        }\n        else {\n            list2.push_back(sublist);\n            sublist.clear();\n            it1++;\n            it2++;\n        }\n    }\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    std::any::iterator it = list1.begin();\n    while (it != list1.end()) {\n        if (sublist.empty() || sublist.back() == *it) {\n            sublist.push_back(*it);\n        } else {\n            list2.push_back(sublist);\n            sublist.clear();\n            sublist.push_back(*it);\n        }\n        it++;\n    }\n    list2.push_back(sublist);\n    return list2;",
    "    std::any list2;\n    std::any sublist;\n    int i = 0;\n    while (i < list1.size()) {\n        sublist.push_back(list1[i]);\n        while (i < list1.size() && list1[i] == list1[i + 1]) {\n            sublist.push_back(list1[i]);\n            i++;\n        }\n        list2.push_back(sublist);\n        sublist.clear();\n        i++;\n    }\n    return list2;",
    "    std::any list2;\n    std::any list3;\n    std::any list4;\n    std::any list5;\n    std::any list6;\n    std::any list7;\n    std::any list8;\n    std::any list9;\n    std::any list10;\n    std::any list11;\n    std::any list12;\n    std::any list13;\n    std::any list14;\n    std::any list15;\n    std::any list16;\n    std::any list17;\n    std::any list18;\n    std::any list19;\n    std::any list20;\n    std::any list21;\n    std::any list22;\n    std::any list23;\n    std::any list24;\n    std::any list25;\n    std::any list26;\n    std::any list27;\n    std::any list28;\n    std::any list29;\n    std::any list30;\n    std::any list31;\n    std::any list32;\n    std::any list33;\n    std::any list34;\n    std::any list35;\n    std::any list36;\n    std::any list37;\n    std::any list38;\n    std::any list39;\n    std::any list40;\n    std::any list41;\n    std::any list42;\n    std::any list43;\n    std::any list44;\n    std::any list45;\n    std::any list46;\n    std::any list47;\n    std::any list48;\n    std::any list49;\n    std::any list50;\n    std::any list51;\n    std::any list52;\n    std::any list53;\n    std::any list54;\n    std::any list55;\n    std::any list56;\n    std::any list57;\n    std::any list58;\n    std::any list59;\n    std::any list60;\n    std::any list61;\n    std::any list62;\n    std::any list63;\n    std::any list64;\n    std::any list65;",
    "    std::any list2;\n    std::any sublist;\n    int prev;\n    for (int i = 0; i < list1.size(); i++) {\n        if (i == 0) {\n            sublist.push_back(list1[i]);\n            prev = list1[i];\n        } else {\n            if (list1[i] == prev) {\n                sublist.push_back(list1[i]);\n            } else {\n                list2.push_back(sublist);\n                sublist.clear();\n                sublist.push_back(list1[i]);\n                prev = list1[i];\n            }\n        }\n    }\n    list2.push_back(sublist);\n    return list2;",
    "    std::any list2;\n    std::any list3;\n    std::any list4;\n    std::any list5;\n    std::any list6;\n    std::any list7;\n    std::any list8;\n    std::any list9;\n    std::any list10;\n    std::any list11;\n    std::any list12;\n    std::any list13;\n    std::any list14;\n    std::any list15;\n    std::any list16;\n    std::any list17;\n    std::any list18;\n    std::any list19;\n    std::any list20;\n    std::any list21;\n    std::any list22;\n    std::any list23;\n    std::any list24;\n    std::any list25;\n    std::any list26;\n    std::any list27;\n    std::any list28;\n    std::any list29;\n    std::any list30;\n    std::any list31;\n    std::any list32;\n    std::any list33;\n    std::any list34;\n    std::any list35;\n    std::any list36;\n    std::any list37;\n    std::any list38;\n    std::any list39;\n    std::any list40;\n    std::any list41;\n    std::any list42;\n    std::any list43;\n    std::any list44;\n    std::any list45;\n    std::any list46;\n    std::any list47;\n    std::any list48;\n    std::any list49;\n    std::any list50;\n    std::any list51;\n    std::any list52;\n    std::any list53;\n    std::any list54;\n    std::any list55;\n    std::any list56;\n    std::any list57;\n    std::any list58;\n    std::any list59;\n    std::any list60;\n    std::any list61;\n    std::any list62;\n    std::any list63;\n    std::any list64;\n    std::any list65;",
    "    std::any list2;\n    std::any sublist;\n    sublist.push_back(list1[0]);\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i] == list1[i - 1]) {\n            sublist.push_back(list1[i]);\n        } else {\n            list2.push_back(sublist);\n            sublist.clear();\n            sublist.push_back(list1[i]);\n        }\n    }\n    list2.push_back(sublist);\n    return list2;",
    "    std::any list2;\n    std::any list3;\n    std::any list4;\n    std::any list5;\n    std::any list6;\n    std::any list7;\n    std::any list8;\n    std::any list9;\n    std::any list10;\n    std::any list11;\n    std::any list12;\n    std::any list13;\n    std::any list14;\n    std::any list15;\n    std::any list16;\n    std::any list17;\n    std::any list18;\n    std::any list19;\n    std::any list20;\n    std::any list21;\n    std::any list22;\n    std::any list23;\n    std::any list24;\n    std::any list25;\n    std::any list26;\n    std::any list27;\n    std::any list28;\n    std::any list29;\n    std::any list30;\n    std::any list31;\n    std::any list32;\n    std::any list33;\n    std::any list34;\n    std::any list35;\n    std::any list36;\n    std::any list37;\n    std::any list38;\n    std::any list39;\n    std::any list40;\n    std::any list41;\n    std::any list42;\n    std::any list43;\n    std::any list44;\n    std::any list45;\n    std::any list46;\n    std::any list47;\n    std::any list48;\n    std::any list49;\n    std::any list50;\n    std::any list51;\n    std::any list52;\n    std::any list53;\n    std::any list54;\n    std::any list55;\n    std::any list56;\n    std::any list57;\n    std::any list58;\n    std::any list59;\n    std::any list60;\n    std::any list61;\n    std::any list62;\n    std::any list63;\n    std::any list64;\n    std::any list65;",
    "    std::any list2;\n    std::any sublist;\n    std::any::iterator it = list1.begin();\n    while (it != list1.end()) {\n        if (it == list1.begin() || *it != *(it - 1)) {\n            if (!sublist.empty()) {\n                list2.push_back(sublist);\n                sublist.clear();\n            }\n        }\n        sublist.push_back(*it);\n        it++;\n    }\n    if (!sublist.empty()) {\n        list2.push_back(sublist);\n    }\n    return list2;"
  ]
}