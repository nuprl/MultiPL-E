{
  "name": "mbpp_573_unique_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to calculate the product of the unique numbers in a given vector.\nlong unique_product(std::vector<long> list_data) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = unique_product;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)20, (long)50, (long)60, (long)40}))) == (720000000));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1}))) == (6));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)0, (long)1, (long)1}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i: list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i: unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::unordered_set<long> unique_set;\n    for(auto it = list_data.begin(); it != list_data.end(); it++) {\n        if(unique_set.find(*it) == unique_set.end()) {\n            unique_set.insert(*it);\n            product *= *it;\n        }\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for(auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for(auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for(auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    std::vector<long> unique_list;\n    long product = 1;\n    for (long i = 0; i < list_data.size(); i++) {\n        if (std::find(unique_list.begin(), unique_list.end(), list_data[i]) == unique_list.end()) {\n            unique_list.push_back(list_data[i]);\n        }\n    }\n    for (long i = 0; i < unique_list.size(); i++) {\n        product *= unique_list[i];\n    }\n    return product;",
    "    std::set<long> unique_list;\n    for (auto i : list_data) {\n        unique_list.insert(i);\n    }\n    long product = 1;\n    for (auto i : unique_list) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_list;\n    for (auto i : list_data) {\n        unique_list.insert(i);\n    }\n    for (auto i : unique_list) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (std::set<long>::iterator it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (int i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (auto i : list_data) {\n        unique_data.insert(i);\n    }\n    for (auto i : unique_data) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (auto i : list_data) {\n        unique_numbers.insert(i);\n    }\n    for (auto i : unique_numbers) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_set;\n    for (auto i : list_data) {\n        unique_set.insert(i);\n    }\n    for (auto i : unique_set) {\n        product *= i;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for(int i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for(auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_data;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_data.insert(list_data[i]);\n    }\n    for (auto it = unique_data.begin(); it != unique_data.end(); it++) {\n        product *= *it;\n    }\n    return product;",
    "    long product = 1;\n    std::set<long> unique_numbers;\n    for (long i = 0; i < list_data.size(); i++) {\n        unique_numbers.insert(list_data[i]);\n    }\n    for (auto it = unique_numbers.begin(); it != unique_numbers.end(); it++) {\n        product *= *it;\n    }\n    return product;"
  ]
}