{
  "name": "mbpp_68_is_Monotonic",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmppa2k4i44: /tmp/tmppa2k4i44.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i<n-1 && A[i]<=A[i+1])\n        i++;\n    while(j>0 && A[j]>=A[j-1])\n        j--;\n    if(i==n-1 || j==0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmp0ex0zfbk: /tmp/tmp0ex0zfbk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i+1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i+1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1])\n            is_increasing = false;\n        if(A[i] < A[i + 1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] <= A[i+1])\n            i++;\n        else\n            break;\n    }\n    while(j > i) {\n        if(A[j] >= A[j-1])\n            j--;\n        else\n            break;\n    }\n    if(i == j)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmpl4up3lrg: /tmp/tmpl4up3lrg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i=1;i<n;i++) {\n        if(A[i]<A[i-1])\n            is_increasing = false;\n        if(A[i]>A[i-1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            isIncreasing = false;\n        if(A[i] > A[i-1])\n            isDecreasing = false;\n    }\n    return isIncreasing || isDecreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmppa2k4i44: /tmp/tmppa2k4i44.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_non_increasing = true;\n    bool is_non_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            is_non_decreasing = false;\n        if (A[i] > A[i + 1])\n            is_non_increasing = false;\n    }\n    return is_non_decreasing || is_non_increasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<=A[i+1]){\n            flag = 1;\n        }\n        else{\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        flag = 0;\n        for(int i=0;i<n-1;i++){\n            if(A[i]>=A[i+1]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n                break;\n            }\n        }\n        if(flag == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i+1]) {\n            if(store == 0) {\n                store = 1;\n            }\n            else if(store == -1) {\n                return false;\n            }\n        }\n        else if(A[i] > A[i+1]) {\n            if(store == 0) {\n                store = -1;\n            }\n            else if(store == 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n        }\n        if(flag == 1 && A[i] > A[i+1]) {\n            return false;\n        }\n        if(flag == 2 && A[i] < A[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmphj_d8yz6: /tmp/tmphj_d8yz6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    else if(flag == 1) {\n        for(int i = 0; i < n - 1; i++) {\n            if(A[i] > A[i + 1])\n                return false;\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < n - 1; i++) {\n            if(A[i] < A[i + 1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    if(A.size() == 1)\n        return true;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1])\n                return false;\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]<A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i=0;i<A.size()-1;i++) {\n            if(A[i]>A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        for(int i=0;i<A.size()-1;i++) {\n            if(A[i]<A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool is_increasing=true;\n    bool is_decreasing=true;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1])\n            is_increasing=false;\n        if(A[i]<A[i+1])\n            is_decreasing=false;\n    }\n    return is_increasing||is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]<A[i+1]) {\n            flag = 1;\n        }\n        else if(A[i]>A[i+1]) {\n            flag = 2;\n        }\n        else {\n            flag = 0;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    else if(flag == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmpze3lx8ni: /tmp/tmpze3lx8ni.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true;\n    bool dec = true;\n    for(int i=1;i<n;i++) {\n        if(A[i] < A[i-1]) {\n            inc = false;\n        }\n        if(A[i] > A[i-1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] > A[i+1]) return false;\n        if(A[j] < A[j-1]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmp8ty_2bxz: /tmp/tmp8ty_2bxz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = false;\n    bool is_decreasing = false;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1])\n            is_increasing = true;\n        if(A[i] > A[i+1])\n            is_decreasing = true;\n    }\n    return (is_increasing && !is_decreasing) || (!is_increasing && is_decreasing);\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n        }\n        else {\n            flag = 0;\n        }\n    }\n    if(flag == 1 || flag == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmpvrb_8pbc: /tmp/tmpvrb_8pbc.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] > A[i+1]) {\n            break;\n        }\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    i = 0;\n    while(i < n-1) {\n        if(A[i] < A[i+1]) {\n            break;\n        }\n        i++;\n    }\n    if(i == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    while(i < n - 1) {\n        if(A[i] <= A[i+1])\n            i++;\n        else\n            break;\n    }\n    if(i == n - 1)\n        return true;\n    i = 0;\n    while(i < n - 1) {\n        if(A[i] >= A[i+1])\n            i++;\n        else\n            break;\n    }\n    if(i == n - 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < n-1 && A[i] <= A[i+1])\n        i++;\n    while(j > 0 && A[j] >= A[j-1])\n        j--;\n    if(i == n-1 || j == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmp6g5r2v3l: /tmp/tmp6g5r2v3l.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmpv4myoci8: /tmp/tmpv4myoci8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true;\n    bool dec = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            inc = false;\n        }\n        if(A[i] < A[i+1]) {\n            dec = false;\n        }\n    }\n    if(inc || dec) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]<A[i+1]){\n            flag = 1;\n            break;\n        }\n        else if(A[i]>A[i+1]){\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]>A[i+1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    else{\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmpv4myoci8: /tmp/tmpv4myoci8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size() - 1; i++) {\n            if(A[i] < A[i + 1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] <= A[i+1])\n            i++;\n        else\n            break;\n    }\n    while(j > i) {\n        if(A[j] >= A[j-1])\n            j--;\n        else\n            break;\n    }\n    if(i == j)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmpl4up3lrg: /tmp/tmpl4up3lrg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    int direction = A[1] - A[0];\n    for(int i = 2; i < A.size(); i++) {\n        if(direction == 0) {\n            direction = A[i] - A[i-1];\n            continue;\n        }\n        if(break_direction(direction, A[i-1], A[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "/tmp/tmpsgl3lnso.cpp: In function \u2018bool is_Monotonic(std::vector<long int>)\u2019:\n/tmp/tmpsgl3lnso.cpp:14:12: error: \u2018break_direction\u2019 was not declared in this scope\n   14 |         if(break_direction(direction, A[i-1], A[i])) {\n      |            ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    bool flag = false;\n    while(i<n-1 && A[i]<=A[i+1]) {\n        i++;\n    }\n    while(j>0 && A[j]>=A[j-1]) {\n        j--;\n    }\n    if(i==n-1 || j==0) {\n        flag = true;\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmpv3a5cpez: /tmp/tmpv3a5cpez.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    if(A[0] <= A[1]) {\n        flag = 1;\n    }\n    else {\n        flag = 0;\n    }\n    for(int i = 1; i < A.size() - 1; i++) {\n        if(flag == 1) {\n            if(A[i] > A[i + 1]) {\n                return false;\n            }\n        }\n        else {\n            if(A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n <= 2) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            inc = false;\n        if (A[i] < A[i + 1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n        }\n        else if (A[i] > A[i + 1]) {\n            flag = 2;\n        }\n        if (flag == 1 && A[i] > A[i + 1]) {\n            return false;\n        }\n        if (flag == 2 && A[i] < A[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmphop2wh7j: /tmp/tmphop2wh7j.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "tmpv4myoci8: /tmp/tmpv4myoci8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1]){\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1){\n        flag=0;\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                flag=1;\n                break;\n            }\n        }\n    }\n    if(flag==0)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i=0;i<A.size()-1;i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_non_decreasing = true;\n    bool is_non_increasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            is_non_decreasing = false;\n        if (A[i] < A[i + 1])\n            is_non_increasing = false;\n    }\n    return is_non_decreasing || is_non_increasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    bool inc = true;\n    bool dec = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i - 1])\n            dec = false;\n        if (A[i] < A[i - 1])\n            inc = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            if (store == 0) {\n                store = 1;\n            } else if (store == -1) {\n                return false;\n            }\n        } else if (A[i] > A[i + 1]) {\n            if (store == 0) {\n                store = -1;\n            } else if (store == 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    if (A.size() <= 2) {\n        return true;\n    }\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        if (A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < A.size() - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (flag == 2) {\n        for (int i = 0; i < A.size() - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = false;\n    bool decreasing = false;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            increasing = true;\n        } else if (A[i] > A[i + 1]) {\n            decreasing = true;\n        }\n        if (increasing && decreasing) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    if(A[0] <= A[1]) {\n        for(int i = 1; i < n; i++) {\n            if(A[i] < A[i-1])\n                return false;\n        }\n        return true;\n    }\n    else {\n        for(int i = 1; i < n; i++) {\n            if(A[i] > A[i-1])\n                return false;\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n        }\n        else if(A[i] < A[i+1]) {\n            flag = 2;\n        }\n        else {\n            flag = 0;\n        }\n    }\n    if(flag == 1 || flag == 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "tmptodwfn68: /tmp/tmptodwfn68.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 1;\n    bool increasing = true;\n    bool decreasing = true;\n    while (i < n) {\n        if (A[i] < A[i - 1]) {\n            increasing = false;\n        }\n        if (A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        i++;\n    }\n    if (increasing || decreasing) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int n = A.size();\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0 || flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while (i < n - 1 && j > 0) {\n        if (A[i] <= A[i + 1]) {\n            i++;\n            flag = 1;\n        }\n        if (A[j] >= A[j - 1]) {\n            j--;\n            flag = 1;\n        }\n        if (flag == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 0 || n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] <= A[i + 1])\n            flag = 1;\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1)\n        return true;\n    flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] >= A[i + 1])\n            flag = 1;\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag == 1)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) return true;\n    bool inc = true;\n    bool dec = true;\n    for (int i = 1; i < n; i++) {\n        if (A[i] > A[i-1]) {\n            dec = false;\n        }\n        if (A[i] < A[i-1]) {\n            inc = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int flag1 = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n        }\n        if(A[i] < A[i+1]) {\n            flag1 = 1;\n        }\n    }\n    if(flag == 1 && flag1 == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_Non_Increasing = true;\n    bool is_Non_Decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i] < A[i+1]) {\n            is_Non_Increasing = false;\n        }\n        if(A[i] > A[i+1]) {\n            is_Non_Decreasing = false;\n        }\n    }\n    return is_Non_Increasing || is_Non_Decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_inc = true;\n    bool is_dec = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1])\n            is_inc = false;\n        if(A[i] < A[i+1])\n            is_dec = false;\n    }\n    return is_inc || is_dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i=0;i<n-1;i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i < j) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if(flag == 1) {\n        while(i < j) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        while(i < j) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = 1;\n    while(j < n) {\n        if(A[i] < A[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if(j == n) {\n        return true;\n    }\n    i = 0;\n    j = 1;\n    while(j < n) {\n        if(A[i] > A[j]) {\n            break;\n        }\n        i++;\n        j++;\n    }\n    if(j == n) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++)\n    {\n        if(A[i]<A[i+1])\n            flag=1;\n        else if(A[i]>A[i+1])\n            flag=-1;\n        else\n            continue;\n        if(flag==1)\n        {\n            for(int j=i+1;j<A.size()-1;j++)\n            {\n                if(A[j]>A[j+1])\n                    return false;\n            }\n        }\n        else if(flag==-1)\n        {\n            for(int j=i+1;j<A.size()-1;j++)\n            {\n                if(A[j]<A[j+1])\n                    return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            increasing = false;\n        if(A[i] > A[i-1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=1;i<n;i++) {\n        if(A[i]>A[i-1])\n            dec = false;\n        if(A[i]<A[i-1])\n            inc = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for (int i = 0; i < A.size()-1; i++) {\n        if (A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        for (int i = 0; i < A.size()-1; i++) {\n            if (A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            if(store == -1) {\n                return false;\n            }\n            store = 1;\n        }\n        else if(A[i] > A[i+1]) {\n            if(store == 1) {\n                return false;\n            }\n            store = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmppa2k4i44: /tmp/tmppa2k4i44.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] > A[i - 1]) {\n            decreasing = false;\n        }\n        if(A[i] < A[i - 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool is_increasing = false;\n    bool is_decreasing = false;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            is_increasing = true;\n        }\n        if (A[i] > A[i + 1]) {\n            is_decreasing = true;\n        }\n    }\n    if (is_increasing && is_decreasing) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n  bool is_increasing = true;\n  bool is_decreasing = true;\n  for (int i = 0; i < A.size() - 1; i++) {\n    if (A[i] < A[i + 1])\n      is_decreasing = false;\n    if (A[i] > A[i + 1])\n      is_increasing = false;\n  }\n  return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    while(i<j){\n        if(A[i]<A[j]){\n            return true;\n        }\n        else if(A[i]>A[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "tmpdatbi131: /tmp/tmpdatbi131.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_non_increasing = true;\n    bool is_non_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            is_non_increasing = false;\n        if (A[i] > A[i + 1])\n            is_non_decreasing = false;\n    }\n    return is_non_decreasing || is_non_increasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag1 = 0;\n    int flag2 = 0;\n    while(i<j) {\n        if(A[i]<=A[i+1]) {\n            i++;\n            flag1 = 1;\n        }\n        else {\n            flag1 = 0;\n            break;\n        }\n    }\n    while(j>i) {\n        if(A[j]>=A[j-1]) {\n            j--;\n            flag2 = 1;\n        }\n        else {\n            flag2 = 0;\n            break;\n        }\n    }\n    if(flag1==1 || flag2==1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "tmpvmzetgcm: /tmp/tmpvmzetgcm.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int flag1 = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            flag = 1;\n        }\n        if(A[i] < A[i + 1]) {\n            flag1 = 1;\n        }\n    }\n    if(flag == 1 && flag1 == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < n && j >= 0) {\n        if (A[i] < A[j]) {\n            return true;\n        }\n        i++;\n        j--;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "tmprue8ad7h: /tmp/tmprue8ad7h.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int i = 0;\n    int j = A.size() - 1;\n    while(i < j) {\n        if(A[i] > A[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "tmpb_54go54: /tmp/tmpb_54go54.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while (i < j) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        if (A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if (flag == 1) {\n        while (i < j) {\n            if (A[i] > A[i + 1])\n                return false;\n            i++;\n        }\n        return true;\n    }\n    if (flag == 2) {\n        while (i < j) {\n            if (A[i] < A[i + 1])\n                return false;\n            i++;\n        }\n        return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            if (store == -1) {\n                return false;\n            }\n            store = 1;\n        } else if (A[i] > A[i + 1]) {\n            if (store == 1) {\n                return false;\n            }\n            store = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    int flag = 0;\n    while (i < j) {\n        if (A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        if (A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if (flag == 1) {\n        while (i < j) {\n            if (A[i] > A[i + 1]) {\n                return false;\n            }\n            i++;\n        }\n    }\n    if (flag == 2) {\n        while (i < j) {\n            if (A[i] < A[i + 1]) {\n                return false;\n            }\n            i++;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool inc = true;\n    bool dec = true;\n    for (int i = 1; i < A.size(); i++) {\n        inc &= A[i - 1] <= A[i];\n        dec &= A[i - 1] >= A[i];\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n <= 2) {\n        return true;\n    }\n    int i = 0;\n    while (i < n - 1 && A[i] == A[i + 1]) {\n        i++;\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    bool increasing = A[i] < A[i + 1];\n    for (int j = i + 1; j < n - 1; j++) {\n        if (increasing) {\n            if (A[j] > A[j + 1]) {\n                return false;\n            }\n        } else {\n            if (A[j] < A[j + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i+1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i+1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            if (store == 0) {\n                store = 1;\n            } else if (store == -1) {\n                return false;\n            }\n        } else if (A[i] > A[i + 1]) {\n            if (store == 0) {\n                store = -1;\n            } else if (store == 1) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] < A[i+1])\n            i++;\n        else if(A[j] > A[j-1])\n            j--;\n        else\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "tmp3ieph_l3: /tmp/tmp3ieph_l3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i<j) {\n        if(A[i]<=A[i+1]) {\n            flag = 1;\n            i++;\n        }\n        else {\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    else {\n        i = 0;\n        while(i<j) {\n            if(A[i]>=A[i+1]) {\n                flag = 1;\n                i++;\n            }\n            else {\n                flag = 0;\n                break;\n            }\n        }\n        if(flag == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < n-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 1) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    int direction = A[1] - A[0];\n    for(int i = 2; i < A.size(); i++) {\n        if(direction == 0) {\n            direction = A[i] - A[i-1];\n            continue;\n        }\n        if(break_direction(direction, A[i-1], A[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "/tmp/tmpsgl3lnso.cpp: In function \u2018bool is_Monotonic(std::vector<long int>)\u2019:\n/tmp/tmpsgl3lnso.cpp:14:12: error: \u2018break_direction\u2019 was not declared in this scope\n   14 |         if(break_direction(direction, A[i-1], A[i])) {\n      |            ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    int i = 0;\n    int j = 1;\n    bool flag = false;\n    while(j < n) {\n        if(A[i] < A[j]) {\n            flag = true;\n            break;\n        }\n        i++;\n        j++;\n    }\n    if(flag) {\n        while(j < n) {\n            if(A[i] > A[j]) {\n                return false;\n            }\n            i++;\n            j++;\n        }\n    }\n    else {\n        while(j < n) {\n            if(A[i] < A[j]) {\n                return false;\n            }\n            i++;\n            j++;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool inc = false, dec = false;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] < A[i + 1])\n            inc = true;\n        if (A[i] > A[i + 1])\n            dec = true;\n    }\n    return (inc && !dec) || (!inc && dec);\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] > A[i-1]) {\n            is_decreasing = false;\n        }\n        if(A[i] < A[i-1]) {\n            is_increasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int i=0;\n    int j=A.size()-1;\n    while(i<j){\n        if(A[i]<=A[i+1] && A[j]>=A[j-1]){\n            i++;\n            j--;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "tmpocvx4kvr: /tmp/tmpocvx4kvr.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    if(A[0] < A[1]) {\n        for(int i = 1; i < n; i++) {\n            if(A[i] < A[i-1]) {\n                return false;\n            }\n        }\n    }\n    else {\n        for(int i = 1; i < n; i++) {\n            if(A[i] > A[i-1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    int i = 1;\n    while (i < n) {\n        if (A[i] == A[i - 1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if (i == n) {\n        return true;\n    }\n    if (A[i] > A[i - 1]) {\n        while (i < n) {\n            if (A[i] >= A[i - 1]) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        while (i < n) {\n            if (A[i] <= A[i - 1]) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n\tint n = A.size();\n\tif (n == 1)\n\t\treturn true;\n\tif (A[0] < A[1]) {\n\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\tif (A[i] > A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 1; i < n - 1; i++) {\n\t\t\tif (A[i] < A[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_non_increasing = true;\n    bool is_non_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            is_non_increasing = false;\n        if (A[i] > A[i + 1])\n            is_non_decreasing = false;\n    }\n    return is_non_decreasing || is_non_increasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            if (store == -1) {\n                return false;\n            }\n            store = 1;\n        } else if (A[i] > A[i + 1]) {\n            if (store == 1) {\n                return false;\n            }\n            store = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n <= 2) return true;\n    int i = 0;\n    while(i < n-1) {\n        if(A[i] == A[i+1]) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    if(i == n-1) return true;\n    bool inc = false;\n    if(A[i] < A[i+1]) {\n        inc = true;\n    }\n    for(int j = i+1; j < n-1; j++) {\n        if(inc) {\n            if(A[j] > A[j+1]) {\n                return false;\n            }\n        } else {\n            if(A[j] < A[j+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n<=2) {\n        return true;\n    }\n    int i = 0;\n    int j = n-1;\n    while(i<j) {\n        if(A[i]<=A[i+1]) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    while(j>i) {\n        if(A[j]>=A[j-1]) {\n            j--;\n        }\n        else {\n            break;\n        }\n    }\n    if(i==j) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "tmpi2r6orl0: /tmp/tmpi2r6orl0.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int flag=0;\n    for(int i=0;i<A.size()-1;i++)\n    {\n        if(A[i]>A[i+1])\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1)\n    {\n        flag=0;\n        for(int i=0;i<A.size()-1;i++)\n        {\n            if(A[i]<A[i+1])\n            {\n                flag=1;\n                break;\n            }\n        }\n    }\n    if(flag==0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    if(inc || dec)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int flag = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] <= A[i + 1]) {\n            flag = 1;\n        } else {\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] >= A[i + 1]) {\n            flag = 1;\n        } else {\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) increasing = false;\n        if(A[i] < A[i+1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "tmppa2k4i44: /tmp/tmppa2k4i44.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1]) {\n            increasing = false;\n        }\n        if(A[i]<A[i+1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n <= 2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1])\n            increasing = false;\n        if(A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n <= 1)\n        return true;\n    bool inc = true, dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        flag = 0;\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            inc = false;\n        if(A[i] > A[i-1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    return i >= j;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "tmpehqgxz0j: /tmp/tmpehqgxz0j.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool inc = true;\n    bool dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            inc = false;\n        }\n        if(A[i] > A[i-1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1])\n            inc = false;\n        if (A[i] < A[i + 1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    for(int i = 0; i < A.size()-1; i++) {\n        if(flag == 1) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        else if(flag == 2) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) return true;\n    bool is_inc = true, is_dec = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) is_inc = false;\n        if(A[i] > A[i-1]) is_dec = false;\n    }\n    return is_inc || is_dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n=A.size();\n    if(n==1)\n        return true;\n    bool inc=true;\n    bool dec=true;\n    for(int i=0;i<n-1;i++){\n        if(A[i]>A[i+1])\n            inc=false;\n        if(A[i]<A[i+1])\n            dec=false;\n    }\n    return inc||dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        flag = 0;\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if(flag == 1){\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    int flag = 0;\n    while(i < j) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n        i++;\n    }\n    if(flag == 1) {\n        while(i < j) {\n            if(A[i] > A[i+1])\n                return false;\n            i++;\n        }\n    }\n    else if(flag == 2) {\n        while(i < j) {\n            if(A[i] < A[i+1])\n                return false;\n            i++;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122903,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    int flag1 = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n        }\n        if(A[i] > A[i+1]) {\n            flag1 = 1;\n        }\n    }\n    if(flag == 1 && flag1 == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    if(A.size() == 1)\n        return true;\n    for(int i = 1; i < A.size(); i++) {\n        if(A[i] > A[i-1]) {\n            if(flag == -1)\n                return false;\n            flag = 1;\n        }\n        else if(A[i] < A[i-1]) {\n            if(flag == 1)\n                return false;\n            flag = -1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 1) {\n        flag = 0;\n        for (int i = 0; i < A.size() - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if (flag == 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i=0;i<A.size()-1;i++){\n        if(A[i]>A[i+1]){\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1){\n        for(int i=0;i<A.size()-1;i++){\n            if(A[i]<A[i+1]){\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] < A[i + 1])\n            decreasing = false;\n        if (A[i] > A[i + 1])\n            increasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1]) {\n            is_increasing = false;\n        }\n        if(A[i] > A[i-1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n  bool increasing = true;\n  bool decreasing = true;\n  for (int i = 0; i < A.size() - 1; ++i) {\n    if (A[i] < A[i + 1])\n      decreasing = false;\n    if (A[i] > A[i + 1])\n      increasing = false;\n  }\n  return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    bool is_Non_Increasing = true;\n    bool is_Non_Decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            is_Non_Decreasing = false;\n        if (A[i] > A[i + 1])\n            is_Non_Increasing = false;\n    }\n    return is_Non_Increasing || is_Non_Decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1)\n        return true;\n    bool inc = true, dec = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1])\n            inc = false;\n        if (A[i] < A[i + 1])\n            dec = false;\n    }\n    return inc || dec;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1665510082,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 1) {\n        return true;\n    }\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1]) {\n            is_increasing = false;\n        }\n        if(A[i] < A[i + 1]) {\n            is_decreasing = false;\n        }\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    else if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    int n = A.size();\n    if(n==1)\n        return true;\n    bool inc = true;\n    bool dec = true;\n    for(int i=1;i<n;i++){\n        if(A[i]<A[i-1])\n            inc = false;\n        if(A[i]>A[i-1])\n            dec = false;\n    }\n    if(inc || dec)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if(n == 0 || n == 1) return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < n-1; i++) {\n        if(A[i] > A[i+1]) increasing = false;\n        if(A[i] < A[i+1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] > A[i+1]) {\n                return false;\n            }\n        }\n    }\n    else if(flag == 2) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122901,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if(A.size()<=2)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            is_increasing = false;\n        if(A[i]<A[i+1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int n = A.size();\n    if (n <= 2) {\n        return true;\n    }\n    int i = 0;\n    int j = 1;\n    while (i < n - 1 && j < n) {\n        if (A[i] == A[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    if (i == n - 1) {\n        return true;\n    }\n    if (A[i] < A[j]) {\n        while (i < n - 1 && j < n) {\n            if (A[i] <= A[j]) {\n                i++;\n                j++;\n            } else {\n                return false;\n            }\n        }\n    } else {\n        while (i < n - 1 && j < n) {\n            if (A[i] >= A[j]) {\n                i++;\n                j++;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    // Write your code here\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n    if (A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}