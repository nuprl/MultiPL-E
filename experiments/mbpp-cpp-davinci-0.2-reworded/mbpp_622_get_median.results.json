{
  "name": "mbpp_622_get_median",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp0o08g13w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp0o08g13w.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp0o08g13w.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n / 2);\n    float m2 = get_median(arr1, arr2, n - n / 2);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "tmporl30pk6: /tmp/tmporl30pk6.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n / 2 + 1);\n    float m2 = get_median(arr1, arr2, n / 2);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "tmpebnj7i3y: /tmp/tmpebnj7i3y.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == n' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp9qjlyciy.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp9qjlyciy.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpeo1g02i6.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpeo1g02i6.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmp1hwd5opf.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp1hwd5opf.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = arr1[n / 2];\n    long m2 = arr2[n / 2];\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        std::vector<long> new_arr1(arr1.begin() + n / 2, arr1.end());\n        std::vector<long> new_arr2(arr2.begin(), arr2.begin() + n / 2 + 1);\n        return get_median(new_arr1, new_arr2, n - n / 2);\n    }\n    std::vector<long> new_arr1(arr1.begin(), arr1.begin() + n / 2 + 1);\n    std::vector<long> new_arr2(arr2.begin() + n / 2, arr2.end());\n    return get_median(new_arr1, new_arr2, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "tmpawgx6exm: /tmp/tmpawgx6exm.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpt3i6aqm9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt3i6aqm9.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpaeyu0i5i.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpaeyu0i5i.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if (median1 == median2) {\n        return median1;\n    }\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpswymb45w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpswymb45w.cpp:13:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpswymb45w.cpp:14:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n==1) {\n        return (arr1[0]+arr2[0])/2.0;\n    }\n    if(n==2) {\n        return (std::max(arr1[0],arr2[0])+std::min(arr1[1],arr2[1]))/2.0;\n    }\n    float m1 = arr1[n/2];\n    float m2 = arr2[n/2];\n    if(m1==m2) {\n        return m1;\n    }\n    if(m1<m2) {\n        if(n%2==0) {\n            return get_median(std::vector<long>(arr1.begin()+n/2-1,arr1.end()),std::vector<long>(arr2.begin(),arr2.begin()+n/2+1),n-n/2+1);\n        }\n        return get_median(std::vector<long>(arr1.begin()+n/2,arr1.end()),std::vector<long>(arr2.begin(),arr2.begin()+n/2+1),n-n/2);\n    }\n    if(n%2==0) {\n        return get_median(std::vector<long>(arr1.begin(),arr1.begin()+n/2+1),std::vector<long>(arr2.begin()+n/2-1,arr2.end()),n-n/2+1);\n    }\n    return get_median(std::vector<long>(arr1.begin(),arr1.begin()+n/2+1),std::vector<long>(arr2.begin()+n/2,arr2.end()),n-n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0)\n        return -1;\n    if(n == 1)\n        return (arr1[0] + arr2[0]) / 2;\n    if(n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2)\n        return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0)\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpgo9qstzq.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpgo9qstzq.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmprh0iqu9s.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmprh0iqu9s.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmprh0iqu9s.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    long m1 = arr1[n/2];\n    long m2 = arr2[n/2];\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        std::vector<long> arr1_new(arr1.begin() + n/2, arr1.end());\n        std::vector<long> arr2_new(arr2.begin(), arr2.begin() + n/2 + 1);\n        return get_median(arr1_new, arr2_new, n - n/2);\n    }\n    else {\n        std::vector<long> arr1_new(arr1.begin(), arr1.begin() + n/2 + 1);\n        std::vector<long> arr2_new(arr2.begin() + n/2, arr2.end());\n        return get_median(arr1_new, arr2_new, n - n/2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "tmp46khtxow: /tmp/tmp46khtxow.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpw_tc90ls.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpw_tc90ls.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpw_tc90ls.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0, k = 0;\n    std::vector<long> arr3(n);\n    while(i < n && j < n) {\n        if(arr1[i] < arr2[j]) {\n            arr3[k] = arr1[i];\n            i++;\n        }\n        else {\n            arr3[k] = arr2[j];\n            j++;\n        }\n        k++;\n    }\n    while(i < n) {\n        arr3[k] = arr1[i];\n        i++;\n        k++;\n    }\n    while(j < n) {\n        arr3[k] = arr2[j];\n        j++;\n        k++;\n    }\n    return (arr3[n-1] + arr3[n]) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "*** Error in `/tmp/tmplmdz6p6_': free(): invalid next size (fast): 0x00000000006aac80 ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2aff6855b329]\n/tmp/tmplmdz6p6_[0x401992]\n/tmp/tmplmdz6p6_[0x4018c7]\n/tmp/tmplmdz6p6_[0x401758]\n/tmp/tmplmdz6p6_[0x40145e]\n/tmp/tmplmdz6p6_[0x401287]\n/tmp/tmplmdz6p6_[0x400afe]\n/tmp/tmplmdz6p6_[0x400e1b]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2aff684fc555]\n/tmp/tmplmdz6p6_[0x400859]\n======= Memory map: ========\n00400000-00403000 r-xp 00000000 08:02 30783                              /tmp/tmplmdz6p6_\n00602000-00603000 r--p 00002000 08:02 30783                              /tmp/tmplmdz6p6_\n00603000-00604000 rw-p 00003000 08:02 30783                              /tmp/tmplmdz6p6_\n00699000-006cb000 rw-p 00000000 00:00 0                                  [heap]\n2aff679c3000-2aff679e5000 r-xp 00000000 08:01 50332729                   /usr/lib64/ld-2.17.so\n2aff679e5000-2aff679e8000 rw-p 00000000 00:00 0 \n2aff67a01000-2aff67a06000 rw-p 00000000 00:00 0 \n2aff67be4000-2aff",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "/tmp/tmplwh655xs.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmplwh655xs.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpefdrxy5j.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpefdrxy5j.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n\n    if(m1 == m2) return m1;\n\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmp2ocfda4n.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp2ocfda4n.cpp:9:15: error: \u2018median\u2019 was not declared in this scope\n    9 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0)\n        return -1;\n    if (n == 1)\n        return (arr1[0] + arr2[0]) / 2;\n    if (n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2)\n        return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0)\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmptsj09e8w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmptsj09e8w.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmptsj09e8w.cpp:17:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   17 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmptsj09e8w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmptsj09e8w.cpp:17:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   17 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpdoc0tv4w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdoc0tv4w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(n > 0);\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpfa5h4xo2.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpfa5h4xo2.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpfa5h4xo2.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmp1udj933w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp1udj933w.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp1udj933w.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpa__h5w24.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpa__h5w24.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpvj5l3qic.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvj5l3qic.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpvj5l3qic.cpp:12:48: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   12 |         if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                           ~~~~ ^ ~~~~~\n      |                                           |        |\n      |                                           |        long int\n      |                                           std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpvj5l3qic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvj5l3qic.cpp:12:54: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   12 |         if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpwgs_ds67.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwgs_ds67.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpwgs_ds67.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpwgs_ds67.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpwgs_ds67.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument de",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median;\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median_of_array(arr1, n);\n    float m2 = median_of_array(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmp5bs3cb34.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp5bs3cb34.cpp:15:16: error: \u2018median_of_array\u2019 was not declared in this scope\n   15 |     float m1 = median_of_array(arr1, n);\n      |                ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "tmpap90ozlf: /tmp/tmpap90ozlf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpttxtlfm3.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpttxtlfm3.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpttxtlfm3.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmposm_9oi_.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmposm_9oi_.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmph71gbapg.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmph71gbapg.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "tmpap90ozlf: /tmp/tmpap90ozlf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "tmpap90ozlf: /tmp/tmpap90ozlf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n/2);\n    float m2 = get_median(arr1, arr2, n - n/2);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "tmp8ard0ha9: /tmp/tmp8ard0ha9.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n        }\n    } else {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n        }\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpsgup185z.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpsgup185z.cpp:8:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    8 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpsgup185z.cpp:9:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    9 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpv3p3bc87.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpv3p3bc87.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if (n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmppi4lijj8.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmppi4lijj8.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmppi4lijj8.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (int count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "/tmp/tmpn4ifqstr.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpn4ifqstr.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpn4ifqstr.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpn4ifqstr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn4ifqstr.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0)\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpf01gvufj.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpf01gvufj.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmph2muop1y: /tmp/tmph2muop1y.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, arr2, n/2);\n    float m2 = get_median(arr1, arr2, n - n/2);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2 + 1);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmpi0covp81: /tmp/tmpi0covp81.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n==0)\n        return -1;\n    if(n==1)\n        return (arr1[0]+arr2[0])/2;\n    if(n==2)\n        return (std::max(arr1[0], arr2[0])+std::min(arr1[1], arr2[1]))/2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1==m2)\n        return m1;\n    if(m1<m2) {\n        if(n%2==0)\n            return get_median(std::vector<long>(arr1.begin()+(n/2)-1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin()+(n/2)+1), n/2+1);\n        else\n            return get_median(std::vector<long>(arr1.begin()+(n/2), arr1.end()), std::vector<long>(arr2.begin(), arr2.begin()+(n/2)+1), n/2+1);\n    }\n    else {\n        if(n%2==0)\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin()+(n/2)+1), std::vector<long>(arr2.begin()+(n/2)-1, arr2.end()), n/2+1);\n        else\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin()+(n/2)+1), std::vector<long>(arr2.begin()+(n/2), arr2.end()), n/2+1);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmp4sj8u5n5.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp4sj8u5n5.cpp:11:16: error: \u2018median\u2019 was not declared in this scope\n   11 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpmbt5tbo2.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpmbt5tbo2.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpmbt5tbo2.cpp:16:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpaeyu0i5i.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpaeyu0i5i.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "tmpap90ozlf: /tmp/tmpap90ozlf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpwvxq30cy.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwvxq30cy.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0)\n        return -1;\n    if (n == 1)\n        return (arr1[0] + arr2[0]) / 2;\n    if (n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n\n    if (m1 == m2)\n        return m1;\n\n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        else\n            return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    } else {\n        if (n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n        else\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmp61y554ya.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp61y554ya.cpp:12:15: error: \u2018median\u2019 was not declared in this scope\n   12 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123815,
      "stdout": "",
      "stderr": "/tmp/tmpvxm_dlss.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvxm_dlss.cpp:9:16: error: \u2018median\u2019 was not declared in this scope\n    9 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpvxm_dlss.cpp:13:48: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   13 |         if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                           ~~~~ ^ ~~~~~\n      |                                           |        |\n      |                                           |        long int\n      |                                           std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpvxm_dlss.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpvxm_dlss.cpp:13:54: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   13 |         if (n % 2 == 0) return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpfa5h4xo2.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpfa5h4xo2.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpfa5h4xo2.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpjf9k8rsc.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjf9k8rsc.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpjf9k8rsc.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmp64xrjn56.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp64xrjn56.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, arr2, n/2);\n    float m2 = get_median(arr1, arr2, n - n/2);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "tmpl18uqd_u: /tmp/tmpl18uqd_u.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmp1udj933w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp1udj933w.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp1udj933w.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "tmpap90ozlf: /tmp/tmpap90ozlf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpt3i6aqm9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt3i6aqm9.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpsjy10ltj.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpsjy10ltj.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpttxtlfm3.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpttxtlfm3.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpttxtlfm3.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpzjicgk4s.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpzjicgk4s.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpzjicgk4s.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpxm46pqxf.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpxm46pqxf.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, arr2, n/2);\n    float m2 = get_median(arr1, arr2, n/2 + 1);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "tmp9whnawom: /tmp/tmp9whnawom.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n        }\n        return get_median(arr1 + n / 2, arr2, n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1);\n    }\n    return get_median(arr2 + n / 2, arr1, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123813,
      "stdout": "",
      "stderr": "/tmp/tmpn4ifqstr.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpn4ifqstr.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpn4ifqstr.cpp:21:36: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                               ~~~~ ^ ~~~~~\n      |                               |        |\n      |                               |        long int\n      |                               std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpn4ifqstr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn4ifqstr.cpp:21:42: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   21 |             return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpwyy5ozex.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwyy5ozex.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0]) / 2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) return get_median(arr1 + n/2 - 1, arr2, n - n/2 + 1);\n        return get_median(arr1 + n/2, arr2, n - n/2);\n    }\n    if(n % 2 == 0) return get_median(arr2 + n/2 - 1, arr1, n - n/2 + 1);\n    return get_median(arr2 + n/2, arr1, n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123815,
      "stdout": "",
      "stderr": "/tmp/tmpp9vzitbo.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpp9vzitbo.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n/tmp/tmpp9vzitbo.cpp:12:47: error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   12 |         if(n % 2 == 0) return get_median(arr1 + n/2 - 1, arr2, n - n/2 + 1);\n      |                                          ~~~~ ^ ~~~\n      |                                          |       |\n      |                                          |       long int\n      |                                          std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpp9vzitbo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpp9vzitbo.cpp:12:51: note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018long int\u2019\n   12 |         if(n % 2 == 0) return get_median(arr1 + n/2 - 1, arr2, n - n/2 + 1);\n      |                                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpv3p3bc87.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpv3p3bc87.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpb1iq4ld2.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpb1iq4ld2.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmp3vl77gd2.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp3vl77gd2.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp3vl77gd2.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long median1 = get_median(arr1, n);\n    long median2 = get_median(arr2, n);\n    if (median1 == median2) {\n        return median1;\n    }\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmp3tr1l71a.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp3tr1l71a.cpp:14:37: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     long median1 = get_median(arr1, n);\n      |                                     ^\n      |                                     |\n      |                                     long int\n/tmp/tmp3tr1l71a.cpp:15:37: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     long median2 = get_median(arr2, n);\n      |                                     ^\n      |                                     |\n      |                                     long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpjf9k8rsc.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpjf9k8rsc.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpjf9k8rsc.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmph2muop1y: /tmp/tmph2muop1y.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0)\n        return -1;\n    if (n == 1)\n        return (arr1[0] + arr2[0]) / 2.0;\n    if (n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n\n    if (m1 == m2)\n        return m1;\n\n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n\n    if (n % 2 == 0)\n        return get_median(std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          n - n / 2 + 1);\n    return get_median(std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "/tmp/tmpyh9ih3dc.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpyh9ih3dc.cpp:12:15: error: \u2018median\u2019 was not declared in this scope\n   12 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmp9jgzvci5.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp9jgzvci5.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpg6vpdc0g.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpg6vpdc0g.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmplck8a1_e.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmplck8a1_e.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n%2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmp3c5p0o3k.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp3c5p0o3k.cpp:16:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp3c5p0o3k.cpp:17:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   17 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpdoc0tv4w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdoc0tv4w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = arr1[n / 2];\n    float m2 = arr2[n / 2];\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "tmp9egfr2rd: /tmp/tmp9egfr2rd.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n <= 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0]) / 2.0;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpoaelneio.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpoaelneio.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpdm7eguqe.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdm7eguqe.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + (n / 2) - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + (n / 2) + 1), n - (n / 2) + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + (n / 2), arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + (n / 2) + 1), n - (n / 2));\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + (n / 2) + 1), std::vector<long>(arr2.begin() + (n / 2) - 1, arr2.end()), n - (n / 2) + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + (n / 2) + 1), std::vector<long>(arr2.begin() + (n / 2), arr2.end()), n - (n / 2));\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpti5kxowg.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpti5kxowg.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmp44suafvn.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp44suafvn.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "/tmp/tmpsjy10ltj.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpsjy10ltj.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpaeyu0i5i.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpaeyu0i5i.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    // assert(arr1.size() == arr2.size());\n    // assert(arr1.size() == n);\n    // assert(arr2.size() == n);\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_wual4.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvo_wual4.cpp:17:16: error: \u2018median\u2019 was not declared in this scope\n   17 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpr5ij1o4s.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpr5ij1o4s.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpr5ij1o4s.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(n > 0);\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while (count < n) {\n        if (arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "tmp7d9x1z3f: /tmp/tmp7d9x1z3f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmphxvwhw47.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmphxvwhw47.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m1 = -1;\n    long m2 = -1;\n    while(count <= n) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        }\n        else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        }\n        else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpt3i6aqm9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt3i6aqm9.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median_of_array(arr1, n);\n    float m2 = median_of_array(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpbc17a566.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpbc17a566.cpp:15:16: error: \u2018median_of_array\u2019 was not declared in this scope\n   15 |     float m1 = median_of_array(arr1, n);\n      |                ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpdoc0tv4w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdoc0tv4w.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n        }\n        return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr2.begin() + n / 2 - 1, arr1.begin(), n - n / 2 + 1);\n    }\n    return get_median(arr2.begin() + n / 2, arr1.begin(), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmpd0vky6vi.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpd0vky6vi.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpd0vky6vi.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpd0vky6vi.cpp:20:52: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   20 |             return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n      |                               ~~~~~~~~~~~~~~~~~~~~~^~~\n      |                                                    |\n      |                                                    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpd0vky6vi.cpp:22:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   22 |         return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n      |                           ~~~~~~~~~~~~~^~~~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpd0vky6vi.cpp:25:48: error: could not convert \u2018arr2.std::vect",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmp3ay_0rd3.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp3ay_0rd3.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp3ay_0rd3.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0) return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmp18wjzcip.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp18wjzcip.cpp:8:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    8 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp18wjzcip.cpp:9:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n    9 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n / 2 + 1);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n / 2 + 1);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmp3wu70dls.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp3wu70dls.cpp:13:16: error: \u2018median\u2019 was not declared in this scope\n   13 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpwwdyfqhq.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwwdyfqhq.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                      std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpp4qhmtqv.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpp4qhmtqv.cpp:12:16: error: \u2018median\u2019 was not declared in this scope\n   12 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    } else if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    long m1 = arr1[n / 2];\n    long m2 = arr2[n / 2];\n    if (m1 == m2) {\n        return m1;\n    } else if (m1 < m2) {\n        std::vector<long> new_arr1(arr1.begin() + n / 2, arr1.end());\n        std::vector<long> new_arr2(arr2.begin(), arr2.begin() + n / 2 + 1);\n        return get_median(new_arr1, new_arr2, n - n / 2);\n    } else {\n        std::vector<long> new_arr1(arr1.begin(), arr1.begin() + n / 2 + 1);\n        std::vector<long> new_arr2(arr2.begin() + n / 2, arr2.end());\n        return get_median(new_arr1, new_arr2, n - n / 2);\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "tmp_34kcq6p: /tmp/tmp_34kcq6p.cpp:5: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == arr2.size()' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if(median1 == median2) {\n        return median1;\n    }\n    if(median1 < median2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpveegql9p.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpveegql9p.cpp:14:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpveegql9p.cpp:15:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for(count = 0; count <= n; count++) {\n        if(i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if(j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if(arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "/tmp/tmphxvwhw47.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmphxvwhw47.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1), std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpp7q6fply.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpp7q6fply.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if (median1 == median2) {\n        return median1;\n    }\n    if (median1 < median2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpswymb45w.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpswymb45w.cpp:13:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpswymb45w.cpp:14:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmp0udumk9i.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp0udumk9i.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0;\n    long j = 0;\n    long count;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            median = arr2[0];\n            break;\n        }\n        else if (j == n) {\n            median = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "tmps3q5qavo: /tmp/tmps3q5qavo.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpbivc7c2n.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpbivc7c2n.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n\tlong i = 0;\n\tlong j = 0;\n\tlong count;\n\tlong m1 = -1, m2 = -1;\n\tfor (count = 0; count <= n; count++) {\n\t\tif (i == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[0];\n\t\t\tbreak;\n\t\t} else if (j == n) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[0];\n\t\t\tbreak;\n\t\t}\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tm1 = m2;\n\t\t\tm2 = arr2[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    // assert(arr1.size() == arr2.size());\n    // assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpvfyfiphc.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpvfyfiphc.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpvfyfiphc.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = arr1[n / 2];\n    long m2 = arr2[n / 2];\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "tmposuq9dz8: /tmp/tmposuq9dz8.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0)\n        return -1;\n    if (n == 1)\n        return (arr1[0] + arr2[0]) / 2.0;\n    if (n == 2)\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n\n    if (m1 == m2)\n        return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0)\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpkibzf7kg.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpkibzf7kg.cpp:12:15: error: \u2018median\u2019 was not declared in this scope\n   12 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123803,
      "stdout": "",
      "stderr": "/tmp/tmpwvxq30cy.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpwvxq30cy.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "/tmp/tmpttxtlfm3.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpttxtlfm3.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpttxtlfm3.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median;\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = median_of_array(arr1, n);\n    float m2 = median_of_array(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpcdn85p1b.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpcdn85p1b.cpp:15:16: error: \u2018median_of_array\u2019 was not declared in this scope\n   15 |     float m1 = median_of_array(arr1, n);\n      |                ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) return -1;\n    if (n == 1) return (arr1[0] + arr2[0]) / 2;\n    if (n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) return m1;\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n        }\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpc1h3bdjl.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpc1h3bdjl.cpp:9:16: error: \u2018median\u2019 was not declared in this scope\n    9 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123809,
      "stdout": "",
      "stderr": "/tmp/tmpdqzvds3e.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpdqzvds3e.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpdqzvds3e.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0;\n    long j = 0;\n    long count;\n    long m1 = -1;\n    long m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "/tmp/tmpo_1yclf9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpo_1yclf9.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpo_1yclf9.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0])/2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                              n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1),\n                          n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()),\n                          n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()),\n                      n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "/tmp/tmprgwpq07b.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmprgwpq07b.cpp:13:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   13 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmprgwpq07b.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0])/2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    float median1 = get_median(arr1, n);\n    float median2 = get_median(arr2, n);\n    if(median1 == median2) {\n        return median1;\n    }\n    if(median1 < median2) {\n        if(n%2 == 0) {\n            return get_median(arr1.begin() + n/2 - 1, arr2.begin(), n - n/2 + 1);\n        }\n        return get_median(arr1.begin() + n/2, arr2.begin(), n - n/2);\n    }\n    if(n%2 == 0) {\n        return get_median(arr1.begin(), arr2.begin() + n/2 - 1, n - n/2 + 1);\n    }\n    return get_median(arr1.begin(), arr2.begin() + n/2, n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "/tmp/tmpl0rpo8of.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpl0rpo8of.cpp:15:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float median1 = get_median(arr1, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpl0rpo8of.cpp:16:38: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   16 |     float median2 = get_median(arr2, n);\n      |                                      ^\n      |                                      |\n      |                                      long int\n/tmp/tmpl0rpo8of.cpp:22:50: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   22 |             return get_median(arr1.begin() + n/2 - 1, arr2.begin(), n - n/2 + 1);\n      |                               ~~~~~~~~~~~~~~~~~~~^~~\n      |                                                  |\n      |                                                  __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpl0rpo8of.cpp:24:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   24 |         return get_median(arr1.begin() + n/2, arr2.begin(), n - n/2);\n      |                           ~~~~~~~~~~~~~^~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpl0rpo8of.cpp:27:37: error: could not c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n <= 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                          std::vector<long>(arr2.begin() + n/2 - 1, arr2.end()), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n/2 + 1),\n                      std::vector<long>(arr2.begin() + n/2, arr2.end()), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "/tmp/tmpxemhg28j.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpxemhg28j.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpxemhg28j.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) {\n        return -1;\n    }\n    if(n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if(n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if(m1 == m2) {\n        return m1;\n    }\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "/tmp/tmp0pa1onv8.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmp0pa1onv8.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmp0pa1onv8.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(n > 0);\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n        }\n        return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1.begin(), arr2.begin() + n / 2 - 1, n - n / 2 + 1);\n    }\n    return get_median(arr1.begin(), arr2.begin() + n / 2, n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpilmu89b7.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpilmu89b7.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpilmu89b7.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpilmu89b7.cpp:21:52: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2)).__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator-(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   21 |             return get_median(arr1.begin() + n / 2 - 1, arr2.begin(), n - n / 2 + 1);\n      |                               ~~~~~~~~~~~~~~~~~~~~~^~~\n      |                                                    |\n      |                                                    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpilmu89b7.cpp:23:40: error: could not convert \u2018arr1.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator+((n / 2))\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   23 |         return get_median(arr1.begin() + n / 2, arr2.begin(), n - n / 2);\n      |                           ~~~~~~~~~~~~~^~~~~~~\n      |                                        |\n      |                                        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpilmu89b7.cpp:26:37: error: could not convert \u2018arr1.std::vect",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpt3i6aqm9.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpt3i6aqm9.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    for (count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0.0;\n    long i = 0, j = 0;\n    long count = 0;\n    long m1 = -1, m2 = -1;\n    while (count <= n) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if(n == 0) return -1;\n    if(n == 1) return (arr1[0] + arr2[0])/2;\n    if(n == 2) return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if(m1 == m2) return m1;\n    if(m1 < m2) {\n        if(n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n    }\n    if(n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n/2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n/2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n/2 + 1), n - n/2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpk5g4az89.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpk5g4az89.cpp:8:16: error: \u2018median\u2019 was not declared in this scope\n    8 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    float median;\n    if (n == 1) {\n        median = (arr1[0] + arr2[0])/2;\n    }\n    else if (n == 2) {\n        median = (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1]))/2;\n    }\n    else {\n        float m1 = get_median(arr1, arr2, n/2);\n        float m2 = get_median(arr1, arr2, n - n/2);\n        median = (m1 + m2)/2;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "tmp1eomaexj: /tmp/tmp1eomaexj.cpp:6: float get_median(std::vector<long int>, std::vector<long int>, long int): Assertion `arr1.size() == n' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long count = 0;\n    while(count < n) {\n        if(arr1[i] < arr2[j]) {\n            median = arr1[i];\n            i++;\n        }\n        else {\n            median = arr2[j];\n            j++;\n        }\n        count++;\n    }\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmph2muop1y: /tmp/tmph2muop1y.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    long m1 = median(arr1, n);\n    long m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpb7vtgtgt.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpb7vtgtgt.cpp:14:15: error: \u2018median\u2019 was not declared in this scope\n   14 |     long m1 = median(arr1, n);\n      |               ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2);\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                              n - n / 2 + 1);\n        } else {\n            return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                              std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                              n - n / 2);\n        }\n    }\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpa6kl3vio.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpa6kl3vio.cpp:15:16: error: \u2018median\u2019 was not declared in this scope\n   15 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 0) {\n        return -1;\n    }\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = median(arr1, n);\n    float m2 = median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1), std::vector<long>(arr2.begin() + n / 2, arr2.end()), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510629,
      "stdout": "",
      "stderr": "/tmp/tmpaeyu0i5i.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpaeyu0i5i.cpp:14:16: error: \u2018median\u2019 was not declared in this scope\n   14 |     float m1 = median(arr1, n);\n      |                ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    assert(arr1.size() == arr2.size());\n    assert(arr1.size() == n);\n    assert(arr2.size() == n);\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()),\n                              std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                              n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()),\n                          std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1),\n                          n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                          std::vector<long>(arr2.begin() + n / 2 - 1, arr2.end()),\n                          n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin(), arr1.begin() + n / 2 + 1),\n                      std::vector<long>(arr2.begin() + n / 2, arr2.end()),\n                      n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmptgby93fk.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmptgby93fk.cpp:14:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   14 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmptgby93fk.cpp:15:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   15 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    float median = 0;\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    median = (m1 + m2) / 2.0;\n    return median;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    if (n == 1) {\n        return (arr1[0] + arr2[0]) / 2.0;\n    }\n    if (n == 2) {\n        return (std::max(arr1[0], arr2[0]) + std::min(arr1[1], arr2[1])) / 2.0;\n    }\n    float m1 = get_median(arr1, n);\n    float m2 = get_median(arr2, n);\n    if (m1 == m2) {\n        return m1;\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n        }\n        return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n    }\n    if (n % 2 == 0) {\n        return get_median(std::vector<long>(arr1.begin() + n / 2 - 1, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2 + 1);\n    }\n    return get_median(std::vector<long>(arr1.begin() + n / 2, arr1.end()), std::vector<long>(arr2.begin(), arr2.begin() + n / 2 + 1), n - n / 2);\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1666123811,
      "stdout": "",
      "stderr": "/tmp/tmpxjwvqthe.cpp: In function \u2018float get_median(std::vector<long int>, std::vector<long int>, long int)\u2019:\n/tmp/tmpxjwvqthe.cpp:11:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   11 |     float m1 = get_median(arr1, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n/tmp/tmpxjwvqthe.cpp:12:33: error: could not convert \u2018n\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\n   12 |     float m2 = get_median(arr2, n);\n      |                                 ^\n      |                                 |\n      |                                 long int\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the median of two sorted vectors of same size.\nfloat get_median(std::vector<long> arr1, std::vector<long> arr2, long n) {\n    long i = 0, j = 0;\n    long m1 = -1, m2 = -1;\n    for (long count = 0; count <= n; count++) {\n        if (i == n) {\n            m1 = m2;\n            m2 = arr2[0];\n            break;\n        } else if (j == n) {\n            m1 = m2;\n            m2 = arr1[0];\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 = m2;\n            m2 = arr1[i];\n            i++;\n        } else {\n            m1 = m2;\n            m2 = arr2[j];\n            j++;\n        }\n    }\n    return (m1 + m2) / 2.0;\n}\nint main() {\n    auto candidate = get_median;\n    assert(candidate((std::vector<long>({(long)1, (long)12, (long)15, (long)26, (long)38})), (std::vector<long>({(long)2, (long)13, (long)17, (long)30, (long)45})), (5)) == (16.0));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)9})), (std::vector<long>({(long)7, (long)13, (long)19, (long)28})), (4)) == (8.5));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)14, (long)23, (long)36, (long)42})), (std::vector<long>({(long)2, (long)18, (long)27, (long)39, (long)49, (long)55})), (6)) == (25.0));\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}