{
  "name": "mbpp_799_left_rotate",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlong left_rotate(long n, long d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = left_rotate;\n    assert(candidate((16), (2)) == (64));\n    assert(candidate((10), (2)) == (40));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((99), (3)) == (792));\n    assert(candidate((1), (3)) == (8));\n    assert(candidate((5), (3)) == (40));\n    assert(candidate((29), (3)) == (232));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long mask = (1 << d) - 1;\n    return ((n & mask) << (32 - d)) | (n >> d);",
    "    assert(d >= 0 && d < 32);\n    return (n << d) | (n >> (32 - d));",
    "    long mask = (1 << d) - 1;\n    return ((n & mask) << (32 - d)) | (n >> d);",
    "    long mask = (1 << d) - 1;\n    return ((n & mask) << (32 - d)) | (n >> d);",
    "    assert(d < 32);\n    return (n << d) | (n >> (32 - d));",
    "    long mask = (1 << d) - 1;\n    long left = n >> (32 - d);\n    long right = n & mask;\n    return (left | right) << (32 - d);",
    "    return (n << d) | (n >> (32 - d));",
    "    long mask = (1 << d) - 1;\n    long left = n >> (32 - d);\n    long right = n & mask;\n    return (right << (32 - d)) | left;",
    "    return (n << d) | (n >> (32 - d));",
    "    return (n << d) | (n >> (32 - d));",
    "    return (n << d) | (n >> (32 - d));",
    "    long mask = (1 << d) - 1;\n    long left = n >> (32 - d);\n    long right = n & mask;\n    return (right << (32 - d)) | left;",
    "    long left_mask = (1 << d) - 1;\n    long right_mask = ~left_mask;\n    long left_part = n & left_mask;\n    long right_part = n & right_mask;\n    long result = (left_part << (32 - d)) | (right_part >> d);\n    return result;",
    "    return (n << d) | (n >> (32 - d));",
    "    long x = (n << d) | (n >> (32 - d));\n    return x;",
    "    long mask = (1 << d) - 1;\n    return (n << d) | ((n & mask) << (32 - d));",
    "    long mask = (1 << d) - 1;\n    return ((n & mask) << (32 - d)) | (n >> d);",
    "    return (n << d) | (n >> (32 - d));",
    "    return (n << d) | (n >> (32 - d));",
    "    long mask = (1 << d) - 1;\n    return (n << d) | ((n >> (32 - d)) & mask);"
  ]
}