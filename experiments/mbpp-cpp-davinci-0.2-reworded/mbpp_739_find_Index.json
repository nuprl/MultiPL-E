{
  "name": "mbpp_739_find_Index",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tlong low = 1, high = 100000;\n\tlong ans = -1;\n\twhile (low <= high) {\n\t\tlong mid = (low + high) / 2;\n\t\tlong triangle = (mid * (mid + 1)) / 2;\n\t\tif (triangle >= n) {\n\t\t\tans = mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn ans;",
    "    long i = 1;\n    long triangle = 1;\n    while (triangle % (long)pow(10, n) != 0) {\n        i++;\n        triangle = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    long low = 1, high = n * (n + 1) / 2, mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (log10(mid) + 1 < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long i = 1;\n    long triangle = 0;\n    while(true) {\n        triangle = (i * (i + 1)) / 2;\n        if(triangle % 10 == 0) {\n            if(triangle / 10 == pow(10, n - 1)) {\n                return i;\n            }\n        }\n        i++;\n    }",
    "    long i = 1;\n    long tri_num = 1;\n    while(1) {\n        if(tri_num >= pow(10, n-1)) {\n            break;\n        }\n        i++;\n        tri_num = tri_num + i;\n    }\n    return i;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (n > 0) {\n        triangular_number += ++count;\n        if (triangular_number > pow(10, n)) {\n            return count - 1;\n        }\n    }\n    return -1;",
    "    long low = 1, high = n*(n+1)/2;\n    long ans = high;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if(digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long triangle = 0;\n    while (triangle < pow(10, n)) {\n        triangle = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, num, index;\n    while(low < high) {\n        mid = (low + high)/2;\n        num = mid*(mid+1)/2;\n        if(num < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    index = low;\n    return index;",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid * (mid + 1) / 2 >= pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = i*(i+1)/2;\n        long digits = 0;\n        while(t) {\n            digits++;\n            t /= 10;\n        }\n        if(digits == n) {\n            count++;\n        }\n        i++;\n    }\n    return i-1;",
    "    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low - 1;",
    "    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long t = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = t;\n        while (temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if (digits == n) {\n            return i;\n        }\n        i++;\n        count = digits;\n    }\n    return -1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 <= pow(10, n - 1)) {\n        ++count;\n        triangularNumber = count * (count + 1) / 2;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1)\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 0, high = n * (n + 1) / 2;\n    long mid, num;\n    while (low < high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low - 1;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i * (i + 1)) / 2;\n        if(t < pow(10, n - 1)) {\n            i++;\n        }\n        else {\n            count++;\n        }\n    }\n    return i;",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangular_number = (mid * (mid + 1)) / 2;\n        if(triangular_number <= n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low < high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i = 1; i*(i+1)/2 <= mid; i++) {\n            count += 1;\n        }\n        if(count < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;"
  ]
}