{
  "name": "mbpp_739_find_Index",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlong find_Index(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Index;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (14));\n    assert(candidate((4)) == (45));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "\tlong low = 1, high = 100000;\n\tlong ans = -1;\n\twhile (low <= high) {\n\t\tlong mid = (low + high) / 2;\n\t\tlong triangle = (mid * (mid + 1)) / 2;\n\t\tif (triangle >= n) {\n\t\t\tans = mid;\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse {\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn ans;",
    "    long i = 1;\n    long triangle = 1;\n    while (triangle % (long)pow(10, n) != 0) {\n        i++;\n        triangle = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    long low = 1, high = n * (n + 1) / 2, mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (log10(mid) + 1 < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long i = 1;\n    long triangle = 0;\n    while(true) {\n        triangle = (i * (i + 1)) / 2;\n        if(triangle % 10 == 0) {\n            if(triangle / 10 == pow(10, n - 1)) {\n                return i;\n            }\n        }\n        i++;\n    }",
    "    long i = 1;\n    long tri_num = 1;\n    while(1) {\n        if(tri_num >= pow(10, n-1)) {\n            break;\n        }\n        i++;\n        tri_num = tri_num + i;\n    }\n    return i;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (n > 0) {\n        triangular_number += ++count;\n        if (triangular_number > pow(10, n)) {\n            return count - 1;\n        }\n    }\n    return -1;",
    "    long low = 1, high = n*(n+1)/2;\n    long ans = high;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if(digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long triangle = 0;\n    while (triangle < pow(10, n)) {\n        triangle = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, num, index;\n    while(low < high) {\n        mid = (low + high)/2;\n        num = mid*(mid+1)/2;\n        if(num < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    index = low;\n    return index;",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid * (mid + 1) / 2 >= pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = i*(i+1)/2;\n        long digits = 0;\n        while(t) {\n            digits++;\n            t /= 10;\n        }\n        if(digits == n) {\n            count++;\n        }\n        i++;\n    }\n    return i-1;",
    "    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low - 1;",
    "    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long t = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = t;\n        while (temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if (digits == n) {\n            return i;\n        }\n        i++;\n        count = digits;\n    }\n    return -1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 <= pow(10, n - 1)) {\n        ++count;\n        triangularNumber = count * (count + 1) / 2;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1)\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 0, high = n * (n + 1) / 2;\n    long mid, num;\n    while (low < high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low - 1;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i * (i + 1)) / 2;\n        if(t < pow(10, n - 1)) {\n            i++;\n        }\n        else {\n            count++;\n        }\n    }\n    return i;",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangular_number = (mid * (mid + 1)) / 2;\n        if(triangular_number <= n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low < high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i = 1; i*(i+1)/2 <= mid; i++) {\n            count += 1;\n        }\n        if(count < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long count = 1;\n    long triangle = 1;\n    while (true) {\n        if (triangle >= pow(10, n - 1) && triangle < pow(10, n)) {\n            return count;\n        }\n        count++;\n        triangle = triangle + count;\n    }",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        long num = mid * (mid + 1)/2;\n        if(num > pow(10, n-1) && num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(num < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangular_Number = 0;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n    }\n    return count;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangular_number = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangular_number;\n        while(temp != 0) {\n            temp /= 10;\n            digits++;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "    long index = 1;\n    long triangular_Number = 1;\n    while(triangular_Number < pow(10, n - 1)) {\n        index++;\n        triangular_Number = triangular_Number + index;\n    }\n    return index;",
    "    long low = 0, high = n*n, mid, ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long x = mid * (mid + 1) / 2;\n        if(x > pow(10, n-1) && x < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(x < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * count < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long i = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;",
    "\tlong i = 1;\n\tlong sum = 0;\n\twhile(sum < n) {\n\t\tsum += i;\n\t\ti++;\n\t}\n\treturn i-1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits < n) {\n            low = mid+1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long i = 1;\n    long triangular_number = 0;\n    while(triangular_number < pow(10, n)) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;",
    "    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = floor(log10(triangle)) + 1;\n        if (digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "\tlong count = 1;\n\tlong triangularNumber = 1;\n\twhile (count * (count + 1) / 2 < pow(10, n - 1)) {\n\t\t++count;\n\t\ttriangularNumber += count;\n\t}\n\treturn count;",
    "    long sum = 0;\n    long i = 1;\n    while(sum < n) {\n        sum += i;\n        i++;\n    }\n    return i-1;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long low = 0, high = n*(n+1)/2;\n    while(low<high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp/=10;\n        }\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, num, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        } else if (num > pow(10, n)) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangularNumber = 0;\n    while (n > count) {\n        triangularNumber = triangularNumber + count;\n        count++;\n    }\n    return triangularNumber;",
    "    long low = 0, high = n;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle < n) {\n            low = mid + 1;\n        } else if(triangle > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long low = 1, high = 2;\n    long mid;\n    long triangle = 0;\n    while(true) {\n        mid = (low + high) / 2;\n        triangle = mid * (mid + 1) / 2;\n        if(triangle > pow(10, n - 1) && triangle < pow(10, n)) {\n            return mid;\n        }\n        else if(triangle < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }",
    "    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = i * (i + 1) / 2;\n    }\n    return i;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long low = 1, high = n*n, mid, ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long tri = (mid * (mid + 1)) / 2;\n        if(tri < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = 2;\n    long mid;\n    long tri_num;\n    while (true) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if (tri_num > pow(10, n - 1) && tri_num < pow(10, n)) {\n            return mid;\n        }\n        else if (tri_num < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }",
    "    long low = 1, high = 1000000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long i = 1;\n    long triangular_number = 0;\n    while(triangular_number <= n) {\n        triangular_number = triangular_number + i;\n        i++;\n    }\n    return i - 1;",
    "\tlong i = 1;\n\tlong triangle_number = 1;\n\twhile(1) {\n\t\tlong digits = floor(log10(triangle_number)) + 1;\n\t\tif(digits == n) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t\ttriangle_number = triangle_number + i;\n\t}",
    "    long low = 1, high = n*n;\n    while (low < high) {\n        long mid = low + (high - low)/2;\n        long t = mid*(mid+1)/2;\n        if (t < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = 100000, mid;\n    while(low < high) {\n        mid = (low + high) / 2;\n        long tri_num = mid * (mid + 1) / 2;\n        if(tri_num < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long i = 1;\n    long tri = 0;\n    while(true) {\n        tri = (i*(i+1))/2;\n        if(tri > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }",
    "    long low = 1, high = 2, mid;\n    long tri_num = 3;\n    while (tri_num < n) {\n        low = high;\n        high = high * 2;\n        tri_num = (high * (high + 1)) / 2;\n    }\n    while (low < high) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        if (tri_num < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "\tlong index = 1;\n\tlong tri_num = 1;\n\twhile(true) {\n\t\tif(tri_num >= pow(10, n-1)) {\n\t\t\treturn index;\n\t\t}\n\t\tindex++;\n\t\ttri_num += index;\n\t}",
    "    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits <= n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low - 1;",
    "    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n-1)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;",
    "\tlong low = 1, high = n*(n+1)/2, mid, tri;\n\twhile(low <= high) {\n\t\tmid = (low+high)/2;\n\t\ttri = mid*(mid+1)/2;\n\t\tif(tri < n) {\n\t\t\tlow = mid+1;\n\t\t}\n\t\telse if(tri > n) {\n\t\t\thigh = mid-1;\n\t\t}\n\t\telse {\n\t\t\treturn mid;\n\t\t}\n\t}\n\treturn -1;",
    "    long count = 1;\n    long triangular_num = 1;\n    while(count * log10(triangular_num) + 1 < n) {\n        count++;\n        triangular_num = triangular_num + count;\n    }\n    return count;",
    "    long low = 0, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = low + (high - low) / 2;\n        long digits = 0, temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 == n) {\n            ans = mid;\n            break;\n        }\n        else if (mid * (mid + 1) / 2 < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;",
    "    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "    long i = 1;\n    long tri = 0;\n    while(tri < n) {\n        tri = (i*(i+1))/2;\n        i++;\n    }\n    return i-1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long ans = 0;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (log10(mid) + 1 == n) {\n            ans = mid;\n            break;\n        }\n        else if (log10(mid) + 1 < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 0, high = n*(n+1)/2;\n    long mid, num;\n    while(low<=high) {\n        mid = (low+high)/2;\n        num = mid*(mid+1)/2;\n        if(num<=n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low-1;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long temp = i * (i + 1) / 2;\n        count = floor(log10(temp)) + 1;\n        i++;\n    }\n    return i - 2;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid;\n    long ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if (digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, temp, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        temp = mid * (mid + 1) / 2;\n        count = 0;\n        while (temp) {\n            count++;\n            temp /= 10;\n        }\n        if (count == n)\n            return mid;\n        else if (count < n)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return low;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;",
    "    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        long t = (mid * (mid + 1)) / 2;\n        if(t < n) {\n            low = mid + 1;\n        } else if(t > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while(count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long i = 1;\n    long triangular_num = 0;\n    while(true) {\n        triangular_num = triangular_num + i;\n        if(triangular_num >= pow(10, n-1) && triangular_num < pow(10, n)) {\n            return i;\n        }\n        i++;\n    }",
    "    long i = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        i++;\n        triangular_number = triangular_number + i;\n    }\n    return i - 1;",
    "    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long temp = (mid * (mid + 1)) / 2;\n        if(temp < n) {\n            low = mid + 1;\n        } else if(temp > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) + 1 < n) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long i = 1;\n    long j = 1;\n    while(j < n) {\n        i++;\n        j = i*(i+1)/2;\n    }\n    return i;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low + high)/2;\n        long digits = floor(log10(mid)) + 1;\n        if(digits == n) {\n            return mid;\n        }\n        if(digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i*(i+1))/2;\n        long digits = 0;\n        long temp = t;\n        while(temp != 0) {\n            digits++;\n            temp = temp/10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(mid * (mid + 1) / 2 > pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long sum = 0;\n    while(sum < n) {\n        sum = sum + i;\n        i++;\n    }\n    return i - 1;",
    "    long count = 0;\n    long i = 1;\n    while (count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n)\n            return i;\n        i++;\n    }\n    return -1;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, count, res = high;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        count = 0;\n        long i = 1;\n        while (mid / i > 0) {\n            count += mid / i;\n            i++;\n        }\n        if (count < n)\n            low = mid + 1;\n        else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long num = i*(i+1)/2;\n        long digits = 0;\n        long temp = num;\n        while(temp) {\n            digits++;\n            temp = temp/10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "    long i = 1;\n    while (true) {\n        long t = i * (i + 1) / 2;\n        if (t % 10 == 0) {\n            long temp = t;\n            int count = 0;\n            while (temp > 0) {\n                count++;\n                temp = temp / 10;\n            }\n            if (count == n) {\n                return i;\n            }\n        }\n        i++;\n    }\n    return -1;",
    "\tlong i = 1;\n\tlong sum = 0;\n\twhile (sum < n) {\n\t\tsum = sum + i;\n\t\ti++;\n\t}\n\treturn i - 1;",
    "    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number % (long)pow(10, n - 1) != 0) {\n        index++;\n        triangular_number += index;\n    }\n    return index;",
    "    long low = 0;\n    long high = n * (n + 1) / 2;\n    long mid = 0;\n    long tri = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n        if (tri < n) {\n            low = mid + 1;\n        } else if (tri > n) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return high;",
    "    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;",
    "    long low = 1, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long temp = mid * (mid + 1) / 2;\n        if(temp >= pow(10, n-1) && temp < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(temp < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (true) {\n        if (triangular_number >= pow(10, n - 1)) {\n            return count;\n        }\n        count++;\n        triangular_number = triangular_number + count;\n    }",
    "    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number += count;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2, mid;\n    while(low < high) {\n        mid = low + (high - low)/2;\n        long digits = (long)log10(mid) + 1;\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 1, high = 1000000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long low = 0, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long tri = (mid*(mid+1))/2;\n        if(tri <= n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangularNumber = count * (count + 1) / 2;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1)\n            low = mid+1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 1;\n    long high = n*(n+1)/2;\n    long mid;\n    long ans;\n    while(low<=high) {\n        mid = low + (high-low)/2;\n        if(mid*(mid+1)/2 >= n) {\n            ans = mid;\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = i * (i + 1) / 2;\n        if(t > pow(10, n - 1))\n            return i;\n        i++;\n    }",
    "    long i = 1;\n    long t = 1;\n    while (t < n) {\n        i++;\n        t = t + i;\n    }\n    return i;",
    "    long low = 1, high = 2;\n    long mid;\n    long triangle_number;\n    while (1) {\n        mid = (low + high) / 2;\n        triangle_number = (mid * (mid + 1)) / 2;\n        if (triangle_number > pow(10, n - 1) && triangle_number < pow(10, n)) {\n            return mid;\n        }\n        else if (triangle_number < pow(10, n - 1)) {\n            low = mid;\n        }\n        else {\n            high = mid;\n        }\n    }",
    "    long i = 1;\n    long triangle = 0;\n    while(true) {\n        triangle = i*(i+1)/2;\n        if(triangle > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }",
    "    long i = 1;\n    long triangle = 1;\n    while (triangle < n) {\n        i++;\n        triangle = i * (i + 1) / 2;\n    }\n    return i;",
    "    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n)) {\n        index++;\n        triangular_number += index;\n    }\n    return index;",
    "    long low = 1, high = n, mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangular = (mid * (mid + 1)) / 2;\n        if(triangular < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = (long)log10(mid) + 1;\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if (digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low < high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i=1; i*(i+1)/2 <= mid; i++) {\n            count += 1;\n        }\n        if(count < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low+high)/2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long i = 1;\n    long tri = 1;\n    while(tri < pow(10, n-1)) {\n        i++;\n        tri = i*(i+1)/2;\n    }\n    return i;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, num, index;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num > pow(10, n - 1) && num < pow(10, n)) {\n            index = mid;\n            break;\n        }\n        else if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return index;",
    "    long i = 1;\n    long tri = 0;\n    while (tri < n) {\n        tri = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 0, high = n * (n + 1) / 2;\n    long mid, num, ans;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < pow(10, n - 1)) {\n            low = mid + 1;\n        } else if (num > pow(10, n)) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = i * (i + 1) / 2;\n    }\n    return i;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long digits = log10(mid) + 1;\n        if(digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if(digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i*(i+1))/2;\n        if(t > pow(10, n-1)) {\n            return i;\n        }\n        i++;\n    }\n    return -1;",
    "    long low = 1, high = n, mid;\n    long tri_num, num_digits;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        tri_num = (mid * (mid + 1)) / 2;\n        num_digits = floor(log10(tri_num)) + 1;\n        if (num_digits == n) {\n            return mid;\n        }\n        else if (num_digits > n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long i = 1;\n    long triangle = 1;\n    while (triangle < n) {\n        i++;\n        triangle = i * (i + 1) / 2;\n    }\n    return i;",
    "    long i = 1;\n    long triangle = 1;\n    while(triangle < pow(10, n-1)) {\n        i++;\n        triangle = i*(i+1)/2;\n    }\n    return i;",
    "\tlong i = 1;\n\tlong triangular_number = 0;\n\twhile(true) {\n\t\ttriangular_number += i;\n\t\tif(triangular_number >= pow(10, n - 1) && triangular_number < pow(10, n)) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}",
    "    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;",
    "    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < n) {\n        i++;\n        triangular_number = triangular_number + i;\n    }\n    return i;",
    "    long index = 1;\n    long triangular_number = 1;\n    while(triangular_number <= n) {\n        index++;\n        triangular_number += index;\n    }\n    return index;",
    "    long low = 1, high = 100000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long sum = (mid * (mid + 1)) / 2;\n        if(sum < n) {\n            low = mid + 1;\n        } else if(sum > n) {\n            high = mid - 1;\n        } else {\n            ans = mid;\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = 2;\n    long index = 1;\n    while(high < n) {\n        low = high;\n        high = high * (high + 1) / 2;\n        index++;\n    }\n    return index;",
    "    long index = 1;\n    long triangular_number = 1;\n    while (triangular_number <= n) {\n        index++;\n        triangular_number = triangular_number + index;\n    }\n    return index;",
    "    long i = 1;\n    long triangular_num = 0;\n    while(true) {\n        triangular_num = (i * (i + 1)) / 2;\n        if(triangular_num > pow(10, n - 1)) {\n            return i;\n        }\n        i++;\n    }",
    "\tlong i = 1;\n\tlong triangle_number = 0;\n\twhile(true) {\n\t\ttriangle_number = (i * (i + 1)) / 2;\n\t\tif(triangle_number % 10 == 0) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tlong digits = 0;\n\t\tlong temp = triangle_number;\n\t\twhile(temp > 0) {\n\t\t\tdigits++;\n\t\t\ttemp /= 10;\n\t\t}\n\t\tif(digits == n) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;",
    "    long i = 1;\n    long tri = 0;\n    while (true) {\n        tri = (i * (i + 1)) / 2;\n        if (tri % 10 == 0) {\n            i++;\n            continue;\n        }\n        if (tri % 10 == 1) {\n            long temp = tri;\n            int count = 0;\n            while (temp) {\n                temp /= 10;\n                count++;\n            }\n            if (count == n) {\n                return i;\n            }\n        }\n        i++;\n    }",
    "    long low = 1, high = 2;\n    long index = 0;\n    while (high < n) {\n        low = high;\n        high = high * 2;\n    }\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if (triangle == n) {\n            return mid;\n        }\n        if (triangle < n) {\n            index = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return index;",
    "    long low = 1;\n    long high = n;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(mid * (mid + 1) / 2 >= pow(10, n - 1)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    long sum = 0;\n    while(count < n) {\n        sum = sum + i;\n        i++;\n        count = floor(log10(sum)) + 1;\n    }\n    return i - 1;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) < n - 1) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = (low + high)/2;\n        if(mid*(mid+1)/2 < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long i = 1;\n    long triangular_number = 1;\n    while(triangular_number < pow(10, n-1)) {\n        i++;\n        triangular_number += i;\n    }\n    return i;",
    "    long low = 1, high = n*(n+1)/2;\n    while(low < high) {\n        long mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid+1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long index = 1;\n    long triangularNumber = 1;\n    while(triangularNumber < n) {\n        index++;\n        triangularNumber = triangularNumber + index;\n    }\n    return index;",
    "    long i = 1;\n    long triangle = 0;\n    while(triangle < pow(10, n-1)) {\n        triangle = i*(i+1)/2;\n        i++;\n    }\n    return i-1;",
    "\tlong index = 1;\n\tlong triangular_number = 1;\n\twhile (triangular_number < pow(10, n)) {\n\t\tindex++;\n\t\ttriangular_number = triangular_number + index;\n\t}\n\treturn index;",
    "\tlong i = 1;\n\tlong triangle = 1;\n\twhile (1) {\n\t\ttriangle = (i * (i + 1)) / 2;\n\t\tif (triangle > pow(10, n - 1)) {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long tri = (i * (i + 1)) / 2;\n        long digits = floor(log10(tri)) + 1;\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, num;\n    while(low < high) {\n        mid = (low + high)/2;\n        num = mid*(mid+1)/2;\n        if(num < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = n*(n+1)/2;\n    long mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid+1;\n        }\n        else {\n            ans = mid;\n            high = mid-1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = 1000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri_num = (mid * (mid + 1)) / 2;\n        if(tri_num >= pow(10, n - 1) && tri_num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(tri_num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triNum = 1;\n    while(true) {\n        if(triNum % n == 0) {\n            return count;\n        }\n        count++;\n        triNum += count;\n    }",
    "    long low = 1, high = 100000, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if (triangle < n) {\n            low = mid + 1;\n        }\n        else if (triangle > n) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return high;",
    "    long low = 1, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (mid * (mid + 1) / 2 >= n)\n            high = mid;\n        else\n            low = mid + 1;\n    }\n    return low;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (count * log10(triangular_number) < n - 1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "\tlong i = 1;\n\tlong num = 1;\n\twhile (num < n) {\n\t\ti++;\n\t\tnum = num + i;\n\t}\n\treturn i;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low + high) / 2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = n, mid;\n    long ans = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long num = mid * (mid + 1) / 2;\n        if(num > pow(10, n - 1) && num < pow(10, n)) {\n            ans = mid;\n            break;\n        }\n        else if(num < pow(10, n - 1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 0, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long triangle = (mid*(mid+1))/2;\n        if(triangle < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * log10(triangularNumber) + 1 < n) {\n        count++;\n        triangularNumber = triangularNumber + count;\n    }\n    return count;",
    "    long low = 1, high = 2;\n    long mid = (low + high) / 2;\n    long tri = mid * (mid + 1) / 2;\n    while (tri < pow(10, n - 1)) {\n        low = mid + 1;\n        mid = (low + high) / 2;\n        tri = mid * (mid + 1) / 2;\n    }\n    return mid;",
    "    long count = 1;\n    long triangular_number = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangular_number = count * (count + 1) / 2;\n    }\n    return count;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, count;\n    while (low < high) {\n        mid = (low + high) / 2;\n        count = 0;\n        for (long i = 1; i <= n; i++) {\n            count += std::min(mid / i, n);\n        }\n        if (count < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, count;\n    while(low<high) {\n        mid = (low+high)/2;\n        count = 0;\n        for(long i=1; i<=n; i++) {\n            count += mid/i;\n        }\n        if(count>=n) {\n            high = mid;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return low;",
    "    long count = 1;\n    long triangularNumber = 0;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n    }\n    return count;",
    "    long low = 1, high = n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle == n) {\n            return mid;\n        }\n        else if(triangle < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return high;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid, ans = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        } else if (digits > n) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 1;\n    long triangular_number = 0;\n    while(count <= n) {\n        triangular_number = triangular_number + count;\n        count++;\n    }\n    return triangular_number;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count = digits;\n    }\n    return -1;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid, num;\n    while(low < high) {\n        mid = (low+high)/2;\n        num = mid*(mid+1)/2;\n        if(num > pow(10, n-1))\n            high = mid;\n        else\n            low = mid+1;\n    }\n    return low-1;",
    "    long low = 1, high = n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long num = mid * (mid + 1) / 2;\n        if(num < n) {\n            ans = mid;\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 0, high = n*n, mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if((mid * (mid + 1)) / 2 >= n) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = n*(n+1)/2;\n    long mid, tri;\n    while(low < high) {\n        mid = (low+high)/2;\n        tri = mid*(mid+1)/2;\n        if(tri < n) {\n            low = mid+1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = n * (n + 1) / 2;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long digits = 0, temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;",
    "    long low = 1, high = 1000000;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = (mid * (mid + 1)) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long tri = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = tri;\n        while(temp != 0) {\n            temp /= 10;\n            digits++;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "    long index = 1;\n    long triangular_number = 1;\n    while (triangular_number < n) {\n        index++;\n        triangular_number = triangular_number + index;\n    }\n    return index;",
    "    long low = 1, high = 1000000;\n    long mid;\n    long ans = -1;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle < 0) {\n            high = mid - 1;\n        }\n        else if(triangle > pow(10, n) - 1) {\n            high = mid - 1;\n        }\n        else if(triangle < pow(10, n) - 1) {\n            ans = mid;\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "\tlong i = 1;\n\tlong triangle = 0;\n\twhile (true) {\n\t\ttriangle = (i * (i + 1)) / 2;\n\t\tif (triangle % 10 == 0) {\n\t\t\tif (triangle / 10 == pow(10, n - 1)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}",
    "    long low = 1, high = 2;\n    long index = 1;\n    while(1) {\n        long triangle = (low * (low + 1)) / 2;\n        if(triangle > pow(10, n - 1)) {\n            break;\n        }\n        low = high;\n        high = high * 2;\n        index++;\n    }\n    return index;",
    "    long low = 0, high = n*(n+1)/2;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        long digits = 0;\n        long temp = mid;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return mid;\n        }\n        else if(digits < n) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;",
    "    long low = 1, high = n;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if (triangle < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long count = 1;\n    long triangularNumber = 1;\n    while (count * (count + 1) / 2 < pow(10, n - 1)) {\n        count++;\n        triangularNumber += count;\n    }\n    return count;",
    "\tlong i = 1;\n\tlong sum = 0;\n\twhile (sum < n) {\n\t\tsum = sum + i;\n\t\ti++;\n\t}\n\treturn i - 1;",
    "    long low = 1, high = 100000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long tri = mid * (mid + 1) / 2;\n        if(tri >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "    long low = 1, high = n*(n+1)/2;\n    long mid;\n    while(low < high) {\n        mid = low + (high - low)/2;\n        if(log10(mid*(mid+1)/2) < n-1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long count = 1;\n    long triangularNumber = 0;\n    while (true) {\n        triangularNumber = triangularNumber + count;\n        long digits = 0;\n        long temp = triangularNumber;\n        while (temp != 0) {\n            digits++;\n            temp = temp / 10;\n        }\n        if (digits == n) {\n            return count;\n        }\n        count++;\n    }",
    "    long low = 1, high = 1e9;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high) / 2;\n        long triangle = mid * (mid + 1) / 2;\n        if(triangle < n) {\n            ans = mid;\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long t = (i * (i + 1)) / 2;\n        if(t < pow(10, n)) {\n            count++;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return i;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = log10(triangle) + 1;\n        if(digits == n) {\n            return i;\n        }\n        i++;\n        count++;\n    }\n    return -1;",
    "    long low = 0, high = n*n;\n    long ans = -1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long temp = mid*(mid+1)/2;\n        if(temp >= pow(10, n-1) && temp < pow(10, n)) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if(temp < pow(10, n-1)) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 0, high = n*(n+1)/2;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(mid*(mid+1)/2 == n)\n            return mid;\n        else if(mid*(mid+1)/2 < n)\n            low = mid+1;\n        else\n            high = mid-1;\n    }\n    return mid;",
    "    long low = 1, high = 1000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        long triangle = (mid * (mid + 1)) / 2;\n        if(triangle > n) {\n            high = mid - 1;\n        }\n        else {\n            ans = mid;\n            low = mid + 1;\n        }\n    }\n    return ans;",
    "\tlong low = 1, high = n * (n + 1) / 2;\n\tlong mid, tri_num;\n\twhile (low < high) {\n\t\tmid = (low + high) / 2;\n\t\ttri_num = mid * (mid + 1) / 2;\n\t\tif (tri_num < n) {\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;",
    "    long i = 1;\n    long tri = 1;\n    while(tri < n) {\n        i++;\n        tri = (i * (i + 1)) / 2;\n    }\n    return i;",
    "    long count = 0;\n    long i = 1;\n    while(count < n) {\n        long triangle = (i * (i + 1)) / 2;\n        long digits = 0;\n        long temp = triangle;\n        while(temp) {\n            digits++;\n            temp /= 10;\n        }\n        if(digits == n) {\n            return i;\n        }\n        i++;\n    }\n    return -1;",
    "    long count = 1;\n    long triangular_number = 1;\n    while(count*log10(triangular_number) < n-1) {\n        count++;\n        triangular_number = triangular_number + count;\n    }\n    return count;",
    "    long low = 1, high = n * (n + 1) / 2;\n    long mid;\n    long ans = -1;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        long digits = 0;\n        long temp = mid;\n        while (temp) {\n            digits++;\n            temp /= 10;\n        }\n        if (digits == n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else if (digits < n) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return ans;",
    "    long low = 0, high = n * (n + 1) / 2;\n    long mid, num;\n    while (low < high) {\n        mid = (low + high) / 2;\n        num = mid * (mid + 1) / 2;\n        if (num < n) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 1, high = 1000000;\n    long ans = 0;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        long triangle = (mid * (mid + 1))/2;\n        if(triangle >= n) {\n            ans = mid;\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return ans;"
  ]
}