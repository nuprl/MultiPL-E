{
  "name": "mbpp_417_group_tuples",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given vector of tuple.\nstd::vector<std::string> group_tuples(std::vector<std::string> Input) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = group_tuples;\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"y\"), (std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"z\"), (std::tuple<std::string, std::string>)std::make_tuple(\"w\", \"t\")}))) == (std::vector<std::string>({std::make_tuple(\"x\", \"y\", \"z\"), std::make_tuple(\"w\", \"t\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"b\"), (std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"c\"), (std::tuple<std::string, std::string>)std::make_tuple(\"d\", \"e\")}))) == (std::vector<std::string>({std::make_tuple(\"a\", \"b\", \"c\"), std::make_tuple(\"d\", \"e\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"h\", \"i\")}))) == (std::vector<std::string>({std::make_tuple(\"f\", \"g\", \"g\"), std::make_tuple(\"h\", \"i\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for (auto i : Input) {\n        std::string temp = i.substr(0, i.find(\",\"));\n        myMap[temp] = i;\n    }\n    for (auto i : myMap) {\n        Output.push_back(i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        std::string key = v[0];\n        Map[key].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::set<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while (std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].insert(V[1]);\n    }\n    for (auto i : M) {\n        std::string s = i.first + \":\";\n        for (auto j : i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(i);\n    }\n    for(auto &i:Map) {\n        Output.push_back(i.second[0]);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while(std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string s = i.first + \":\";\n        for(auto j: i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while (std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for (auto i : M) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> m;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(m.find(first) == m.end()) {\n            m[first] = second;\n        } else {\n            m[first] = m[first] + \",\" + second;\n        }\n    }\n    for(auto i: m) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = \"\";\n        std::string second = \"\";\n        int j = 0;\n        while(temp[j] != ',') {\n            first += temp[j];\n            j++;\n        }\n        j++;\n        while(j < temp.size()) {\n            second += temp[j];\n            j++;\n        }\n        M[first].push_back(second);\n    }\n    for(auto it = M.begin(); it != M.end(); it++) {\n        std::string temp = it->first + \":\";\n        for(int i = 0; i < it->second.size(); i++) {\n            temp += it->second[i] + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \" \";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while(std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string s = i.first;\n        for(auto j: i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(ss >> temp) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Tuple[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i:m) {\n        std::string temp = i.first + \",\";\n        for(auto j:i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto &i: Map) {\n        std::string temp = i.first + \",\";\n        for(auto &j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> res;\n    std::map<std::string, std::vector<std::string>> mp;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        std::string key = v[0];\n        mp[key].push_back(i);\n    }\n    for(auto i: mp) {\n        std::string temp = i.second[0];\n        for(int j = 1; j < i.second.size(); j++) {\n            temp += \",\" + i.second[j];\n        }\n        res.push_back(temp);\n    }\n    return res;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::stringstream ss;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        ss << i;\n        ss >> temp;\n        map[temp].push_back(i);\n        ss.clear();\n    }\n    for(auto i : map) {\n        Output.push_back(i.second[0]);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++) {\n        temp = Input[i];\n        for(int j=i+1;j<Input.size();j++) {\n            if(temp[0] == Input[j][0]) {\n                temp += \",\" + Input[j];\n                Input.erase(Input.begin()+j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string,std::string> mymap;\n    for(int i=0;i<Input.size();i++)\n    {\n        std::string temp=Input[i];\n        std::string key=temp.substr(0,temp.find(\",\"));\n        std::string value=temp.substr(temp.find(\",\")+1,temp.length());\n        if(mymap.find(key)==mymap.end())\n        {\n            mymap[key]=value;\n        }\n        else\n        {\n            mymap[key]=mymap[key]+\",\"+value;\n        }\n    }\n    for(auto it=mymap.begin();it!=mymap.end();it++)\n    {\n        Output.push_back(it->first+\",\"+it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for(int i = 0; i < Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string first, second;\n        ss >> first >> second;\n        if(myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] += \" \" + second;\n        }\n    }\n    for(auto it = myMap.begin(); it != myMap.end(); it++) {\n        Output.push_back(it->first + \" \" + it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> temp;\n        while (std::getline(ss, token, ',')) {\n            temp.push_back(token);\n        }\n        map[temp[0]].push_back(temp[1]);\n    }\n    for (auto i : map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] = Map[first] + \",\" + second;\n        }\n    }\n    for(auto i: Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    std::string temp;\n    for (int i = 0; i < Input.size(); i++) {\n        temp = Input[i];\n        if (myMap.find(temp) == myMap.end()) {\n            myMap[temp] = temp;\n        }\n    }\n    for (auto it = myMap.begin(); it != myMap.end(); it++) {\n        Output.push_back(it->first);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> temp;\n        while(std::getline(ss, token, ',')) {\n            temp.push_back(token);\n        }\n        std::string key = temp[0];\n        map[key].push_back(i);\n    }\n    for(auto i : map) {\n        std::stringstream ss;\n        for(auto j : i.second) {\n            ss << j << \",\";\n        }\n        std::string temp = ss.str();\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Group;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while (std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Group[Tuple[0]].push_back(i);\n    }\n    for (auto i : Group) {\n        std::string temp;\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for (auto i : m) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto it = Input.begin(); it != Input.end(); it++) {\n        std::stringstream ss(*it);\n        std::string first, second;\n        ss >> first >> second;\n        map[first].push_back(second);\n    }\n    for(auto it = map.begin(); it != map.end(); it++) {\n        std::stringstream ss;\n        ss << it->first << \" \";\n        for(auto it2 = it->second.begin(); it2 != it->second.end(); it2++) {\n            ss << *it2 << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while (std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for (auto i : M) {\n        std::string s = i.first + \":\";\n        for (auto j : i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while(ss >> temp) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(int i = 0; i < Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string First, Second;\n        ss >> First >> Second;\n        Map[First].push_back(Second);\n    }\n    for(auto it = Map.begin(); it != Map.end(); it++) {\n        std::string First = it->first;\n        std::vector<std::string> Second = it->second;\n        std::stringstream ss;\n        ss << First << \" \";\n        for(int i = 0; i < Second.size(); i++) {\n            ss << Second[i] << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "\tstd::vector<std::string> Output;\n\tstd::vector<std::string>::iterator it;\n\tstd::string temp;\n\tfor (it = Input.begin(); it != Input.end(); it++) {\n\t\ttemp = *it;\n\t\tstd::stringstream ss(temp);\n\t\tstd::string token;\n\t\tstd::vector<std::string> tokens;\n\t\twhile (std::getline(ss, token, ',')) {\n\t\t\ttokens.push_back(token);\n\t\t}\n\t\tstd::string str = tokens[0];\n\t\tfor (int i = 1; i < tokens.size(); i++) {\n\t\t\tstr = str + \",\" + tokens[i];\n\t\t}\n\t\tOutput.push_back(str);\n\t}\n\treturn Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> m;\n    for(auto i:Input) {\n        std::string s = i.substr(0, i.find(\",\"));\n        std::string t = i.substr(i.find(\",\")+1);\n        if(m.find(s) == m.end()) {\n            m[s] = t;\n        } else {\n            m[s] += \",\" + t;\n        }\n    }\n    for(auto i:m) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] = Map[first] + \",\" + second;\n        }\n    }\n    for(auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::unordered_map<std::string, std::string> Map;\n    for(auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        if(Map.find(v[0]) == Map.end()) {\n            Map[v[0]] = v[1];\n        } else {\n            Map[v[0]] = Map[v[0]] + \",\" + v[1];\n        }\n    }\n    for(auto &i : Map) {\n        std::string temp = i.first + \":\" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \":\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        if(myMap.find(v[0]) == myMap.end()) {\n            myMap[v[0]] = v[1];\n        }\n        else {\n            myMap[v[0]] = myMap[v[0]] + \",\" + v[1];\n        }\n    }\n    for(auto i : myMap) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto &i : Map) {\n        std::string temp = i.first;\n        for (auto &j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first;\n        ss >> second;\n        map[first].push_back(second);\n    }\n    for (auto i : map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n    std::vector<",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string key = temp.substr(0, temp.find(\",\"));\n        Map[key].push_back(temp);\n    }\n    for(auto it = Map.begin(); it != Map.end(); it++) {\n        std::string temp = it->first + \":\";\n        for(int i = 0; i < it->second.size(); i++) {\n            temp += it->second[i] + \",\";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while(ss >> temp) {\n            vec.push_back(temp);\n        }\n        map[vec[0]].push_back(vec[1]);\n    }\n    for(auto i: map) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \" \" + j;\n        }\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \" \";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> v;\n        while (std::getline(ss, token, ',')) {\n            v.push_back(token);\n        }\n        map[v[0]].push_back(v[1]);\n    }\n    for (auto i : map) {\n        std::string s = i.first + \",\";\n        for (auto j : i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for (auto i = Input.begin(); i != Input.end(); i++) {\n        std::stringstream ss(*i);\n        std::string first, second;\n        ss >> first >> second;\n        if (myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] += \",\" + second;\n        }\n    }\n    for (auto i = myMap.begin(); i != myMap.end(); i++) {\n        Output.push_back(i->first + \" \" + i->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto &i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto &j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while (std::getline(ss, temp, ',')) {\n            vec.push_back(temp);\n        }\n        Map[vec[0]].push_back(vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++){\n        temp = Input[i];\n        for(int j=i+1;j<Input.size();j++){\n            if(temp[0] == Input[j][0]){\n                Output.push_back(temp);\n                Output.push_back(Input[j]);\n            }\n        }\n    }\n    return Output;",
    "    std::vector<std::string> output;\n    std::map<std::string, std::vector<std::string>> mymap;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        mymap[temp[0]].push_back(temp[1]);\n    }\n    for(auto i: mymap) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \" \" + j;\n        }\n        output.push_back(temp);\n    }\n    return output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::string key;\n        std::string value;\n        int count = 0;\n        while (ss >> word) {\n            if (count == 0) {\n                key = word;\n                count++;\n            } else {\n                value = word;\n            }\n        }\n        Map[key] = value;\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \" \" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while (std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(i);\n    }\n    for (auto i : Map) {\n        std::string temp;\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::vector<std::string> value;\n        while(std::getline(ss, temp, ',')) {\n            if(key.empty()) {\n                key = temp;\n            } else {\n                value.push_back(temp);\n            }\n        }\n        Map[key] = value;\n    }\n    for(auto i : Map) {\n        std::stringstream ss;\n        ss << i.first << \",\";\n        for(auto j : i.second) {\n            ss << j << \",\";\n        }\n        std::string temp = ss.str();\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto &i: Map) {\n        std::stringstream ss;\n        for(auto &j: i.second) {\n            ss << j << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while(std::getline(ss, temp, ',')) {\n            vec.push_back(temp);\n        }\n        Map[vec[0]].push_back(vec[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Tuple[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> m;\n    for (auto i : Input) {\n        std::string key = i.substr(0, i.find(\",\"));\n        std::string value = i.substr(i.find(\",\") + 1);\n        if (m.find(key) == m.end()) {\n            m[key] = value;\n        } else {\n            m[key] += \",\" + value;\n        }\n    }\n    for (auto i : m) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first;\n        ss >> second;\n        if (Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] += \",\" + second;\n        }\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \" \" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (std::string str : Input) {\n        std::stringstream ss(str);\n        std::string token;\n        std::vector<std::string> vec;\n        while (std::getline(ss, token, ',')) {\n            vec.push_back(token);\n        }\n        Map[vec[0]].push_back(str);\n    }\n    for (auto it = Map.begin(); it != Map.end(); it++) {\n        std::string str = it->first + \":\";\n        for (std::string s : it->second) {\n            str += s + \",\";\n        }\n        str.pop_back();\n        Output.push_back(str);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string First;\n        std::string Second;\n        ss >> First;\n        ss >> Second;\n        if(Map.find(First) == Map.end()) {\n            Map[First] = Second;\n        }\n        else {\n            Map[First] += \",\" + Second;\n        }\n    }\n    for(auto i: Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::unordered_map<std::string, std::string> Map;\n    for(int i=0; i<Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = temp.substr(0, temp.find(\",\"));\n        std::string second = temp.substr(temp.find(\",\")+1, temp.length());\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] += \",\" + second;\n        }\n    }\n    for(auto itr = Map.begin(); itr != Map.end(); itr++) {\n        Output.push_back(itr->first + \",\" + itr->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for (auto i : Input) {\n        std::string key = i.substr(0, i.find(\",\"));\n        m[key].push_back(i);\n    }\n    for (auto i : m) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it=Input.begin();it!=Input.end();it++) {\n        temp=*it;\n        Output.push_back(temp.substr(0,temp.find(',')));\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> v;\n        while (std::getline(ss, s, ',')) {\n            v.push_back(s);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string s = i.first;\n        for (auto j : i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Result;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i:Map) {\n        std::string temp = i.first + \" \";\n        for(auto j:i.second) {\n            temp += j + \" \";\n        }\n        Result.push_back(temp);\n    }\n    return Result;",
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string first;\n        std::getline(ss, first, ',');\n        m[first].push_back(i);\n    }\n    for(auto i : m) {\n        std::stringstream ss;\n        ss << i.first << \":\";\n        for(auto j : i.second) {\n            ss << j << \",\";\n        }\n        std::string s = ss.str();\n        s.pop_back();\n        result.push_back(s);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \":\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first;\n        std::string second;\n        ss >> first;\n        ss >> second;\n        Map[first].push_back(second);\n    }\n    for (auto i : Map) {\n        std::stringstream ss;\n        ss << i.first << \" \";\n        for (auto j : i.second) {\n            ss << j << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp;\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(i.first + \",\" + temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        temp = *it;\n        std::stringstream ss(temp);\n        std::string item;\n        std::vector<std::string> elems;\n        while (std::getline(ss, item, ',')) {\n            elems.push_back(item);\n        }\n        std::string first_element = elems[0];\n        Output.push_back(first_element);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = temp.substr(0, temp.find(\",\"));\n        std::string second = temp.substr(temp.find(\",\") + 1);\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] = Map[first] + \",\" + second;\n        }\n    }\n    for(auto it = Map.begin(); it != Map.end(); it++) {\n        Output.push_back(it->first + \",\" + it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n            Output.push_back(temp);\n        }\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if (Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] = Map[first] + \",\" + second;\n        }\n    }\n    for (auto &i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    std::string first, second;\n    for(auto it = Input.begin(); it != Input.end(); it++) {\n        std::stringstream ss(*it);\n        ss >> first >> second;\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] += \",\" + second;\n        }\n    }\n    for(auto it = Map.begin(); it != Map.end(); it++) {\n        Output.push_back(it->first + \" \" + it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    std::stringstream ss;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        ss << *it;\n        ss >> temp;\n        Output.push_back(temp);\n        ss.clear();\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        std::string key = Tuple[0];\n        Map[key].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::unordered_map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> v;\n        while (std::getline(ss, s, ',')) {\n            v.push_back(s);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for (auto &i : Map) {\n        std::stringstream ss;\n        ss << i.first << \":\";\n        for (auto &j : i.second) {\n            ss << j << \",\";\n        }\n        std::string s = ss.str();\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while (std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(i);\n    }\n    for (auto i : M) {\n        std::string s = i.first;\n        for (auto j : i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Result;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> mymap;\n    for (auto i : Input) {\n        std::string temp = i.substr(0, i.find(\",\"));\n        mymap[temp].push_back(i);\n    }\n    for (auto i : mymap) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        Map[i.substr(0,1)].push_back(i);\n    }\n    for(auto i: Map) {\n        std::string temp;\n        for(auto j: i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> mymap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> temp;\n        while (std::getline(ss, token, ',')) {\n            temp.push_back(token);\n        }\n        std::string key = temp[0];\n        mymap[key].push_back(i);\n    }\n    for (auto i : mymap) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        std::string first = i.substr(0, i.find(\",\"));\n        map[first].push_back(i);\n    }\n    for(auto i : map) {\n        std::string temp = i.first + \":\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        result.push_back(temp.substr(0, temp.size() - 1));\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string First, Second;\n        ss >> First >> Second;\n        Map[First].push_back(Second);\n    }\n    for(auto i : Map) {\n        std::stringstream ss;\n        ss << i.first << \":\";\n        for(auto j : i.second) {\n            ss << j << \",\";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while (ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(i);\n    }\n    for (auto i : Map) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        M[first].push_back(second);\n    }\n    for (auto i : M) {\n        std::string temp = i.first + \" \";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> mymap;\n    for(int i=0; i<Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string temp;\n        std::string first;\n        std::string second;\n        std::getline(ss, first, ',');\n        std::getline(ss, second, ',');\n        if(mymap.find(first) == mymap.end()) {\n            mymap[first] = second;\n        }\n        else {\n            mymap[first] = mymap[first] + \",\" + second;\n        }\n    }\n    for(auto itr = mymap.begin(); itr != mymap.end(); itr++) {\n        Output.push_back(itr->first + \",\" + itr->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> tempVec;\n        while (ss >> temp) {\n            tempVec.push_back(temp);\n        }\n        myMap[tempVec[0]].push_back(tempVec[1]);\n    }\n    for (auto i : myMap) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while (ss >> temp) {\n            vec.push_back(temp);\n        }\n        Map[vec[0]].push_back(vec[1]);\n    }\n    for (auto &i : Map) {\n        std::string temp = i.first + \" \";\n        for (auto &j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n            Output.push_back(temp);\n        }\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> v;\n        while(std::getline(ss, s, ',')) {\n            v.push_back(s);\n        }\n        map[v[0]].push_back(v[1]);\n    }\n    for(auto i : map) {\n        std::string s = i.first;\n        for(auto j : i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(int i=0;i<Input.size();i++) {\n        std::string s = Input[i];\n        std::string key = s.substr(0, s.find(\",\"));\n        m[key].push_back(s);\n    }\n    for(auto it=m.begin();it!=m.end();it++) {\n        std::string s = it->first;\n        for(int i=0;i<it->second.size();i++) {\n            s += \",\" + it->second[i];\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> m;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        if (m.find(v[0]) == m.end()) {\n            m[v[0]] = v[1];\n        } else {\n            m[v[0]] = m[v[0]] + \",\" + v[1];\n        }\n    }\n    for (auto i : m) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while (std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Tuple[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \",\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::string temp = i.substr(0, i.find(\",\"));\n        Map[temp].push_back(i);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string First, Second;\n        ss >> First >> Second;\n        if(Map.find(First) == Map.end()) {\n            Map[First] = Second;\n        } else {\n            Map[First] += \",\" + Second;\n        }\n    }\n    for(auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (ss >> temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string token;\n        std::vector<std::string> Tuple;\n        while (std::getline(ss, token, ',')) {\n            Tuple.push_back(token);\n        }\n        Map[Tuple[0]].push_back(i);\n    }\n    for (auto i : Map) {\n        std::stringstream ss;\n        for (auto j : i.second) {\n            ss << j << \" \";\n        }\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        temp = *it;\n        std::stringstream ss(temp);\n        std::string token;\n        std::string first;\n        std::string second;\n        std::string third;\n        std::getline(ss, token, ',');\n        first = token;\n        std::getline(ss, token, ',');\n        second = token;\n        std::getline(ss, token, ',');\n        third = token;\n        std::stringstream ss1;\n        ss1 << first << \",\" << second << \",\" << third;\n        Output.push_back(ss1.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> v;\n        while(std::getline(ss, s, ',')) {\n            v.push_back(s);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i: Map) {\n        std::stringstream ss;\n        ss << i.first << \":\";\n        for(auto j: i.second) {\n            ss << j << \",\";\n        }\n        std::string s = ss.str();\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \",\";\n            temp += j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while(std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        std::string key = V[0];\n        V.erase(V.begin());\n        M[key] = V;\n    }\n    for(auto i : M) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string,std::vector<std::string>> Map;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss>>temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i:Map) {\n        std::string temp = i.first;\n        for(auto j:i.second) {\n            temp = temp + \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string First, Second;\n        ss >> First >> Second;\n        if (Map.find(First) == Map.end()) {\n            Map[First] = Second;\n        } else {\n            Map[First] = Map[First] + \",\" + Second;\n        }\n    }\n    for (auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        if(Map.find(v[0]) == Map.end()) {\n            Map[v[0]] = v[1];\n        } else {\n            Map[v[0]] += \",\" + v[1];\n        }\n    }\n    for(auto &i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(int i=0; i<Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = temp.substr(0, temp.find(\",\"));\n        std::string second = temp.substr(temp.find(\",\")+1, temp.length());\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        }\n        else {\n            Map[first] = Map[first] + \",\" + second;\n        }\n    }\n    for(auto itr = Map.begin(); itr != Map.end(); itr++) {\n        Output.push_back(itr->first + \",\" + itr->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n            Output.push_back(temp);\n        }\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string,std::string> M;\n    for(auto i:Input){\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::string value;\n        std::getline(ss,temp,',');\n        key = temp;\n        std::getline(ss,temp,',');\n        value = temp;\n        if(M.find(key) == M.end()){\n            M[key] = value;\n        }\n        else{\n            M[key] = M[key] + \",\" + value;\n        }\n    }\n    for(auto i:M){\n        std::string temp = i.first + \",\" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++)\n    {\n        temp=Input[i];\n        for(int j=i+1;j<Input.size();j++)\n        {\n            if(temp[0]==Input[j][0])\n            {\n                temp=temp+\" \"+Input[j];\n                Input.erase(Input.begin()+j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = temp.substr(0, temp.find(\",\"));\n        std::string second = temp.substr(temp.find(\",\") + 1);\n        if(myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        }\n        else {\n            myMap[first] = myMap[first] + \",\" + second;\n        }\n    }\n    for(auto it = myMap.begin(); it != myMap.end(); it++) {\n        std::string temp = it->first + \",\" + it->second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n    std::vector<",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = \"\";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for (int i = 0; i < Input.size(); i++) {\n        temp = Input[i];\n        for (int j = i + 1; j < Input.size(); j++) {\n            if (temp[0] == Input[j][0]) {\n                temp = temp + \",\" + Input[j];\n                Input.erase(Input.begin() + j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        map[first].push_back(second);\n    }\n    for (auto i : map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i : map) {\n        std::string temp = i.first + \":\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while (ss >> temp) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Tuple[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::vector<std::string> value;\n        while(std::getline(ss, temp, ',')) {\n            if(key.empty()) {\n                key = temp;\n            } else {\n                value.push_back(temp);\n            }\n        }\n        Map[key] = value;\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while (std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        if (Map.find(Tuple[0]) == Map.end()) {\n            Map[Tuple[0]] = Tuple[1];\n        } else {\n            Map[Tuple[0]] += \",\" + Tuple[1];\n        }\n    }\n    for (auto i : Map) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while (std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for (auto i : M) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if (Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] += \",\" + second;\n        }\n    }\n    for (auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> M;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(M.find(first) == M.end()) {\n            M[first] = second;\n        } else {\n            M[first] += \",\" + second;\n        }\n    }\n    for(auto i : M) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while(std::getline(ss, temp, ',')) {\n            vec.push_back(temp);\n        }\n        Map[vec[0]].push_back(vec[1]);\n    }\n    for(auto i:Map) {\n        std::string temp = i.first;\n        for(auto j:i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Temp;\n        while (std::getline(ss, temp, ',')) {\n            Temp.push_back(temp);\n        }\n        Map[Temp[0]].push_back(Temp[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++){\n        temp = Input[i];\n        for(int j=i+1;j<Input.size();j++){\n            if(temp[0] == Input[j][0]){\n                temp += \",\" + Input[j];\n                Input.erase(Input.begin() + j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> mymap;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss>>first>>second;\n        if(mymap.find(first)==mymap.end()) {\n            mymap[first]=second;\n        }\n        else {\n            mymap[first]=mymap[first]+\" \"+second;\n        }\n    }\n    for(auto i:mymap) {\n        Output.push_back(i.first+\" \"+i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::vector<std::string> value;\n        while (std::getline(ss, temp, ',')) {\n            if (key.empty()) {\n                key = temp;\n            } else {\n                value.push_back(temp);\n            }\n        }\n        Map[key] = value;\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "\tstd::vector<std::string> Output;\n\tstd::vector<std::string>::iterator it;\n\tstd::string str;\n\tfor (it = Input.begin(); it != Input.end(); it++) {\n\t\tstr = *it;\n\t\tif (str.find(',') != std::string::npos) {\n\t\t\tstr.erase(str.find(','), 1);\n\t\t}\n\t\tOutput.push_back(str);\n\t}\n\treturn Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \",\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> result;\n    std::map<std::string, std::string> myMap;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = temp.substr(0, temp.find(\",\"));\n        std::string second = temp.substr(temp.find(\",\") + 1);\n        if(myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] = myMap[first] + \",\" + second;\n        }\n    }\n    for(auto it = myMap.begin(); it != myMap.end(); it++) {\n        result.push_back(it->first + \",\" + it->second);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i: m) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while (ss >> word) {\n            temp.push_back(word);\n        }\n        map[temp[0]].push_back(temp[1]);\n    }\n    for (auto i : map) {\n        std::string temp = i.first + \" \";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while(std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string temp = i.first;\n        for(auto j: i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        Map[first] = second;\n    }\n    for (auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \",\";\n        for(auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string s = Input[i];\n        std::string key = s.substr(0, s.find(\",\"));\n        m[key].push_back(s);\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        std::string s = it->first;\n        for(int i = 0; i < it->second.size(); i++) {\n            s += \",\" + it->second[i];\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i: m) {\n        std::string s = i.first;\n        for(auto j: i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    std::stringstream ss;\n    for (auto i : Input) {\n        std::string temp = i;\n        std::string key = temp.substr(0, temp.find(\",\"));\n        std::string value = temp.substr(temp.find(\",\") + 1);\n        if (myMap.find(key) == myMap.end()) {\n            myMap[key] = value;\n        } else {\n            myMap[key] = myMap[key] + \",\" + value;\n        }\n    }\n    for (auto i : myMap) {\n        ss << i.first << \",\" << i.second;\n        Output.push_back(ss.str());\n        ss.str(\"\");\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if (myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] += \",\" + second;\n        }\n    }\n    for (auto i : myMap) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "  std::vector<std::string> Output;\n  std::string temp;\n  std::string temp2;\n  std::string temp3;\n  std::string temp4;\n  std::string temp5;\n  std::string temp6;\n  std::string temp7;\n  std::string temp8;\n  std::string temp9;\n  std::string temp10;\n  std::string temp11;\n  std::string temp12;\n  std::string temp13;\n  std::string temp14;\n  std::string temp15;\n  std::string temp16;\n  std::string temp17;\n  std::string temp18;\n  std::string temp19;\n  std::string temp20;\n  std::string temp21;\n  std::string temp22;\n  std::string temp23;\n  std::string temp24;\n  std::string temp25;\n  std::string temp26;\n  std::string temp27;\n  std::string temp28;\n  std::string temp29;\n  std::string temp30;\n  std::string temp31;\n  std::string temp32;\n  std::string temp33;\n  std::string temp34;\n  std::string temp35;\n  std::string temp36;\n  std::string temp37;\n  std::string temp38;\n  std::string temp39;\n  std::string temp40;\n  std::string temp41;\n  std::string temp42;\n  std::string temp43;\n  std::string temp44;\n  std::string temp45;\n  std::string temp46;\n  std::string temp47;\n  std::string temp48;\n  std::string temp49;\n  std::string temp50;\n  std::string temp51;\n  std::string temp52;\n  std::string temp53;\n  std::string temp54;\n  std::string temp55;\n  std::string temp56;\n  std::string temp57;\n  std::string temp58;\n  std::string temp59;\n  std::string temp60;\n  std::string temp61;\n  std::string temp62;\n  std::string",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it1;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n    std::vector<",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        map[v[0]].push_back(v[1]);\n    }\n    for (auto i : map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while (ss >> word) {\n            temp.push_back(word);\n        }\n        map[temp[0]].push_back(temp[1]);\n    }\n    for (auto i : map) {\n        std::string temp = i.first + \" \";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while (std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        if (M.find(V[0]) == M.end()) {\n            M[V[0]] = V[1];\n        } else {\n            M[V[0]] = M[V[0]] + \",\" + V[1];\n        }\n    }\n    for (auto i : M) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for (int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string key = temp.substr(0, temp.find(\",\"));\n        myMap[key].push_back(temp);\n    }\n    for (auto it = myMap.begin(); it != myMap.end(); it++) {\n        std::vector<std::string> temp = it->second;\n        std::string output = \"\";\n        for (int i = 0; i < temp.size(); i++) {\n            output += temp[i];\n            if (i != temp.size() - 1) {\n                output += \",\";\n            }\n        }\n        Output.push_back(output);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> tempVec;\n        while (std::getline(ss, temp, ',')) {\n            tempVec.push_back(temp);\n        }\n        myMap[tempVec[0]].push_back(tempVec[1]);\n    }\n    for (auto i : myMap) {\n        std::string temp;\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::string value;\n        std::getline(ss, temp, ',');\n        key = temp;\n        std::getline(ss, temp, ',');\n        value = temp;\n        if(Map.find(key) == Map.end()) {\n            Map[key] = value;\n        } else {\n            Map[key] = Map[key] + \",\" + value;\n        }\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \",\" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(Map.find(first) == Map.end()) {\n            Map[first] = second;\n        } else {\n            Map[first] += \",\" + second;\n        }\n    }\n    for(auto i : Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> result;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::string first = i.substr(0, i.find(\",\"));\n        std::string second = i.substr(i.find(\",\") + 1);\n        map[first].push_back(second);\n    }\n    for (auto i : map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> tempVec;\n        while(std::getline(ss, temp, ',')) {\n            tempVec.push_back(temp);\n        }\n        myMap[tempVec[0]].push_back(tempVec[1]);\n    }\n    for(auto i: myMap) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string key = temp.substr(0, temp.find(\",\"));\n        if (Map.find(key) == Map.end()) {\n            std::vector<std::string> temp;\n            temp.push_back(Input[i]);\n            Map[key] = temp;\n        } else {\n            Map[key].push_back(Input[i]);\n        }\n    }\n    for (auto it = Map.begin(); it != Map.end(); it++) {\n        std::string temp = it->first;\n        for (int i = 0; i < it->second.size(); i++) {\n            temp += \",\" + it->second[i];\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for (auto i : Input) {\n        std::string first = i.substr(0, i.find(','));\n        map[first].push_back(i);\n    }\n    for (auto i : map) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for (auto i : Input) {\n        std::string temp = i.substr(0, i.find(\",\"));\n        myMap[temp].push_back(i);\n    }\n    for (auto i : myMap) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while(ss >> temp) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for(auto &i : Map) {\n        std::string temp = i.first + \":\";\n        for(auto &j : i.second) {\n            temp += j + \",\";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    std::map<std::string, std::string>::iterator it;\n    std::string temp;\n    for(int i = 0; i < Input.size(); i++) {\n        temp = Input[i];\n        it = myMap.find(temp);\n        if(it == myMap.end()) {\n            myMap.insert(std::pair<std::string, std::string>(temp, temp));\n        }\n        else {\n            myMap[temp] = myMap[temp] + \",\" + temp;\n        }\n    }\n    for(it = myMap.begin(); it != myMap.end(); it++) {\n        Output.push_back(it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        temp = *it;\n        std::stringstream ss(temp);\n        std::string token;\n        std::vector<std::string> tokens;\n        while(std::getline(ss, token, ',')) {\n            tokens.push_back(token);\n        }\n        std::string str = tokens[0];\n        Output.push_back(str);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto &i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while (ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for (auto &i : Map) {\n        std::string temp = i.first;\n        for (auto &j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> mymap;\n    std::map<std::string, std::string>::iterator it;\n    for (int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string key = temp.substr(0, temp.find(\",\"));\n        std::string value = temp.substr(temp.find(\",\") + 1, temp.length());\n        it = mymap.find(key);\n        if (it != mymap.end()) {\n            mymap[key] = mymap[key] + \",\" + value;\n        } else {\n            mymap[key] = value;\n        }\n    }\n    for (it = mymap.begin(); it != mymap.end(); it++) {\n        Output.push_back(it->first + \",\" + it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        temp = *it;\n        std::stringstream ss(temp);\n        std::string token;\n        std::vector<std::string> tokens;\n        while(std::getline(ss, token, ',')) {\n            tokens.push_back(token);\n        }\n        std::string first = tokens[0];\n        std::string second = tokens[1];\n        std::string third = tokens[2];\n        std::string fourth = tokens[3];\n        std::string fifth = tokens[4];\n        std::string sixth = tokens[5];\n        std::string seventh = tokens[6];\n        std::string eighth = tokens[7];\n        std::string ninth = tokens[8];\n        std::string tenth = tokens[9];\n        std::string eleventh = tokens[10];\n        std::string twelfth = tokens[11];\n        std::string thirteenth = tokens[12];\n        std::string fourteenth = tokens[13];\n        std::string fifteenth = tokens[14];\n        std::string sixteenth = tokens[15];\n        std::string seventeenth = tokens[16];\n        std::string eighteenth = tokens[17];\n        std::string nineteenth = tokens[18];\n        std::string twentieth = tokens[19];\n        std::string twentyfirst = tokens[20];\n        std::string twentysecond = tokens[21];\n        std::string twentythird = tokens[22];\n        std::string twentyfourth = tokens[23];\n        std::string twentyfifth = tokens[24];\n        std::string twentysixth = tokens[25];\n        std::string twentyseventh = tokens[26];\n        std::string twentyeighth = tokens[27];\n        std::string twentyninth = tokens[28];\n        std::string thirtieth = tokens[29];\n        std::string thirtyfirst = tokens[30];\n        std::string thirtysecond = tokens[31];\n        std::string thirtythird = tokens[32];\n        std::",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::string temp1;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for (int i = 0; i < Input.size(); i++) {\n        temp = Input[i];\n        for (int j = i + 1; j < Input.size(); j++) {\n            if (temp[0] == Input[j][0]) {\n                temp += \",\" + Input[j];\n                Input.erase(Input.begin() + j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::string key;\n        while (std::getline(ss, s, ',')) {\n            if (key.empty()) {\n                key = s;\n            }\n            else {\n                Map[key] += s;\n            }\n        }\n    }\n    for (auto i : Map) {\n        Output.push_back(i.first + \",\" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i : m) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::string key = i.substr(0, i.find(\",\"));\n        Map[key].push_back(i);\n    }\n    for (auto i : Map) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vec;\n        while (std::getline(ss, temp, ',')) {\n            temp_vec.push_back(temp);\n        }\n        Map[temp_vec[0]].push_back(temp_vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n            Output.push_back(temp);\n        }\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::string temp;\n    for(it = Input.begin(); it != Input.end(); it++) {\n        temp = *it;\n        Output.push_back(temp.substr(0, temp.find(\",\")));\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(i);\n    }\n    for(auto i: Map) {\n        std::string temp;\n        for(auto j: i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> temp_vector;\n        while (std::getline(ss, temp, ',')) {\n            temp_vector.push_back(temp);\n        }\n        Map[temp_vector[0]].push_back(temp_vector[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first;\n        ss >> second;\n        if (myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] = myMap[first] + \",\" + second;\n        }\n    }\n    for (auto i : myMap) {\n        std::stringstream ss;\n        ss << i.first << \" \" << i.second;\n        Output.push_back(ss.str());\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> myMap;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> tempVec;\n        while (std::getline(ss, temp, ',')) {\n            tempVec.push_back(temp);\n        }\n        myMap[tempVec[0]].push_back(tempVec[1]);\n    }\n    for (auto i : myMap) {\n        std::string temp = i.first;\n        for (auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string First, Second;\n        ss >> First >> Second;\n        if(Map.find(First) == Map.end()) {\n            Map[First] = Second;\n        } else {\n            Map[First] = Map[First] + \",\" + Second;\n        }\n    }\n    for(auto i: Map) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = \"\";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string,std::string> M;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::string key;\n        std::string value;\n        int count = 0;\n        while(std::getline(ss,temp,',')) {\n            if(count == 0) {\n                key = temp;\n            }\n            else {\n                value = temp;\n            }\n            count++;\n        }\n        if(M.find(key) == M.end()) {\n            M[key] = value;\n        }\n        else {\n            M[key] = M[key] + \",\" + value;\n        }\n    }\n    for(auto i:M) {\n        std::string temp = i.first + \",\" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    std::vector<std::string>::iterator it3;\n    std::vector<std::string>::iterator it4;\n    std::vector<std::string>::iterator it5;\n    std::vector<std::string>::iterator it6;\n    std::vector<std::string>::iterator it7;\n    std::vector<std::string>::iterator it8;\n    std::vector<std::string>::iterator it9;\n    std::vector<std::string>::iterator it10;\n    std::vector<std::string>::iterator it11;\n    std::vector<std::string>::iterator it12;\n    std::vector<std::string>::iterator it13;\n    std::vector<std::string>::iterator it14;\n    std::vector<std::string>::iterator it15;\n    std::vector<std::string>::iterator it16;\n    std::vector<std::string>::iterator it17;\n    std::vector<std::string>::iterator it18;\n    std::vector<std::string>::iterator it19;\n    std::vector<std::string>::iterator it20;\n    std::vector<std::string>::iterator it21;\n    std::vector<std::string>::iterator it22;\n    std::vector<std::string>::iterator it23;\n    std::vector<std::string>::iterator it24;\n    std::vector<std::string>::iterator it25;\n    std::vector<std::string>::iterator it26;\n    std::vector<std::string>::iterator it27;\n    std::vector<std::string>::iterator it28;\n    std::vector<std::string>::iterator it29;\n    std::vector<std::string>::iterator it30;\n    std::vector<std::string>::iterator it31;\n    std::vector<std::string>::iterator it32;\n    std::vector<std::string>::iterator it33;\n    std::vector<",
    "  std::vector<std::string> Output;\n  std::map<std::string, std::string> Map;\n  for(auto i : Input) {\n    std::string key = i.substr(0, i.find(','));\n    std::string value = i.substr(i.find(',') + 1);\n    if(Map.find(key) == Map.end()) {\n      Map[key] = value;\n    } else {\n      Map[key] += \",\" + value;\n    }\n  }\n  for(auto i : Map) {\n    Output.push_back(i.first + \",\" + i.second);\n  }\n  return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while(ss >> word) {\n            temp.push_back(word);\n        }\n        map[temp[0]].push_back(temp[1]);\n    }\n    for(auto i:map) {\n        std::string temp = i.first;\n        for(auto j:i.second) {\n            temp += \" \" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++)\n    {\n        temp=Input[i];\n        for(int j=i+1;j<Input.size();j++)\n        {\n            if(temp[0]==Input[j][0])\n            {\n                temp=temp+\",\"+Input[j];\n                Input.erase(Input.begin()+j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::vector<std::string> V;\n        std::stringstream ss(i);\n        std::string temp;\n        while (ss >> temp) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(i);\n    }\n    for (auto i : M) {\n        std::string temp = \"\";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::vector<std::string> temp;\n        while (ss >> word) {\n            temp.push_back(word);\n        }\n        Map[temp[0]].push_back(temp[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \" \";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> t;\n        while (ss >> temp) {\n            t.push_back(temp);\n        }\n        Map[t[0]].push_back(i);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \" \";\n        for (auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Temp;\n        while(std::getline(ss, temp, ',')) {\n            Temp.push_back(temp);\n        }\n        Map[Temp[0]].push_back(Temp[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \",\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> vec;\n        while (std::getline(ss, temp, ',')) {\n            vec.push_back(temp);\n        }\n        Map[vec[0]].push_back(vec[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \",\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string word;\n        std::string key;\n        std::string value;\n        int count = 0;\n        while (ss >> word) {\n            if (count == 0) {\n                key = word;\n            } else {\n                value = word;\n            }\n            count++;\n        }\n        map[key] = value;\n    }\n    for (auto i : map) {\n        std::string temp = i.first + \" \" + i.second;\n        Output.push_back(temp);\n    }\n    return Output;"
  ]
}