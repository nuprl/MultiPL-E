{
  "name": "mbpp_417_group_tuples",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find common first element in given vector of tuple.\nstd::vector<std::string> group_tuples(std::vector<std::string> Input) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = group_tuples;\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"y\"), (std::tuple<std::string, std::string>)std::make_tuple(\"x\", \"z\"), (std::tuple<std::string, std::string>)std::make_tuple(\"w\", \"t\")}))) == (std::vector<std::string>({std::make_tuple(\"x\", \"y\", \"z\"), std::make_tuple(\"w\", \"t\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"b\"), (std::tuple<std::string, std::string>)std::make_tuple(\"a\", \"c\"), (std::tuple<std::string, std::string>)std::make_tuple(\"d\", \"e\")}))) == (std::vector<std::string>({std::make_tuple(\"a\", \"b\", \"c\"), std::make_tuple(\"d\", \"e\")})));\n    assert(candidate((std::vector<std::string>({(std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"f\", \"g\"), (std::tuple<std::string, std::string>)std::make_tuple(\"h\", \"i\")}))) == (std::vector<std::string>({std::make_tuple(\"f\", \"g\", \"g\"), std::make_tuple(\"h\", \"i\")})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for (auto i : Input) {\n        std::string temp = i.substr(0, i.find(\",\"));\n        myMap[temp] = i;\n    }\n    for (auto i : myMap) {\n        Output.push_back(i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        std::string key = v[0];\n        Map[key].push_back(i);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first;\n        for(auto j : i.second) {\n            temp += \",\" + j;\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::set<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while (std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].insert(V[1]);\n    }\n    for (auto i : M) {\n        std::string s = i.first + \":\";\n        for (auto j : i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(std::getline(ss, temp, ',')) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(i);\n    }\n    for(auto &i:Map) {\n        Output.push_back(i.second[0]);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while(std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string s = i.first + \":\";\n        for(auto j: i.second) {\n            s += j + \",\";\n        }\n        s.pop_back();\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> V;\n        while (std::getline(ss, temp, ',')) {\n            V.push_back(temp);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for (auto i : M) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> m;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string first, second;\n        ss >> first >> second;\n        if(m.find(first) == m.end()) {\n            m[first] = second;\n        } else {\n            m[first] = m[first] + \",\" + second;\n        }\n    }\n    for(auto i: m) {\n        Output.push_back(i.first + \" \" + i.second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(int i = 0; i < Input.size(); i++) {\n        std::string temp = Input[i];\n        std::string first = \"\";\n        std::string second = \"\";\n        int j = 0;\n        while(temp[j] != ',') {\n            first += temp[j];\n            j++;\n        }\n        j++;\n        while(j < temp.size()) {\n            second += temp[j];\n            j++;\n        }\n        M[first].push_back(second);\n    }\n    for(auto it = M.begin(); it != M.end(); it++) {\n        std::string temp = it->first + \":\";\n        for(int i = 0; i < it->second.size(); i++) {\n            temp += it->second[i] + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(ss >> temp) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto i : Map) {\n        std::string temp = i.first + \" \";\n        for(auto j : i.second) {\n            temp += j + \" \";\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> M;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string s;\n        std::vector<std::string> V;\n        while(std::getline(ss, s, ',')) {\n            V.push_back(s);\n        }\n        M[V[0]].push_back(V[1]);\n    }\n    for(auto i: M) {\n        std::string s = i.first;\n        for(auto j: i.second) {\n            s += \",\" + j;\n        }\n        Output.push_back(s);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::vector<std::string>::iterator it;\n    std::vector<std::string>::iterator it2;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> Tuple;\n        while(ss >> temp) {\n            Tuple.push_back(temp);\n        }\n        Map[Tuple[0]].push_back(Tuple[1]);\n    }\n    for(auto i: Map) {\n        std::string temp = i.first + \":\";\n        for(auto j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> m;\n    for(auto i:Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        m[v[0]].push_back(v[1]);\n    }\n    for(auto i:m) {\n        std::string temp = i.first + \",\";\n        for(auto j:i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for(auto &i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for(auto &i: Map) {\n        std::string temp = i.first + \",\";\n        for(auto &j: i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::vector<std::string>> Map;\n    for (auto i : Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while (std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        Map[v[0]].push_back(v[1]);\n    }\n    for (auto i : Map) {\n        std::string temp = i.first + \":\";\n        for (auto j : i.second) {\n            temp += j + \",\";\n        }\n        temp.pop_back();\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> res;\n    std::map<std::string, std::vector<std::string>> mp;\n    for(auto i: Input) {\n        std::stringstream ss(i);\n        std::string temp;\n        std::vector<std::string> v;\n        while(std::getline(ss, temp, ',')) {\n            v.push_back(temp);\n        }\n        std::string key = v[0];\n        mp[key].push_back(i);\n    }\n    for(auto i: mp) {\n        std::string temp = i.second[0];\n        for(int j = 1; j < i.second.size(); j++) {\n            temp += \",\" + i.second[j];\n        }\n        res.push_back(temp);\n    }\n    return res;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    std::stringstream ss;\n    std::map<std::string, std::vector<std::string>> map;\n    for(auto i : Input) {\n        ss << i;\n        ss >> temp;\n        map[temp].push_back(i);\n        ss.clear();\n    }\n    for(auto i : map) {\n        Output.push_back(i.second[0]);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::string temp;\n    for(int i=0;i<Input.size();i++) {\n        temp = Input[i];\n        for(int j=i+1;j<Input.size();j++) {\n            if(temp[0] == Input[j][0]) {\n                temp += \",\" + Input[j];\n                Input.erase(Input.begin()+j);\n                j--;\n            }\n        }\n        Output.push_back(temp);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string,std::string> mymap;\n    for(int i=0;i<Input.size();i++)\n    {\n        std::string temp=Input[i];\n        std::string key=temp.substr(0,temp.find(\",\"));\n        std::string value=temp.substr(temp.find(\",\")+1,temp.length());\n        if(mymap.find(key)==mymap.end())\n        {\n            mymap[key]=value;\n        }\n        else\n        {\n            mymap[key]=mymap[key]+\",\"+value;\n        }\n    }\n    for(auto it=mymap.begin();it!=mymap.end();it++)\n    {\n        Output.push_back(it->first+\",\"+it->second);\n    }\n    return Output;",
    "    std::vector<std::string> Output;\n    std::map<std::string, std::string> myMap;\n    for(int i = 0; i < Input.size(); i++) {\n        std::stringstream ss(Input[i]);\n        std::string first, second;\n        ss >> first >> second;\n        if(myMap.find(first) == myMap.end()) {\n            myMap[first] = second;\n        } else {\n            myMap[first] += \" \" + second;\n        }\n    }\n    for(auto it = myMap.begin(); it != myMap.end(); it++) {\n        Output.push_back(it->first + \" \" + it->second);\n    }\n    return Output;"
  ]
}