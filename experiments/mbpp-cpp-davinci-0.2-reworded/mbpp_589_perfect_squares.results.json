{
  "name": "mbpp_589_perfect_squares",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while (i * i <= b) {\n    if (i * i >= a) {\n      squares.push_back(i * i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if(sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = a;\n  while (i <= b) {\n    long j = 1;\n    while (j * j <= i) {\n      if (j * j == i) {\n        squares.push_back(i);\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n\tstd::vector<long> result;\n\tfor (long i = a; i <= b; i++) {\n\t\tlong sq = sqrt(i);\n\t\tif (sq * sq == i) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while (i*i <= b) {\n    if (i*i >= a) {\n      squares.push_back(i*i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; ++i) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i <= b) {\n        if(i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq*sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        if (std::sqrt(i) == (int)std::sqrt(i)) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; ++i) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        double sqrt_i = sqrt(i);\n        if (sqrt_i == floor(sqrt_i)) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> perfect_squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            perfect_squares.push_back(i);\n        }\n    }\n    return perfect_squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    long i = a;\n    while(i <= b) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            result.push_back(i);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i <= b) {\n        if(i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> v;\n  for(long i=a;i<=b;i++) {\n    long sq = sqrt(i);\n    if(sq*sq == i) {\n      v.push_back(i);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> res;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            result.push_back(i*i);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqr = sqrt(i);\n    if (sqr * sqr == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while (i*i <= b) {\n    if (i*i >= a) {\n      squares.push_back(i*i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if(sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i <= b) {\n        if(i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long square = i * i;\n    if (square >= a && square <= b) {\n      squares.push_back(square);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "tmpjtmhpldz: /tmp/tmpjtmhpldz.cpp:17: int main(): Assertion `candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    if (a > b) {\n        return result;\n    }\n    long i = 1;\n    while (i * i <= b) {\n        if (i * i >= a) {\n            result.push_back(i * i);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if(sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i=1;\n    while(i*i<=b) {\n        if(i*i>=a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = std::sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> v;\n    for(long i=a;i<=b;i++) {\n        long sq = sqrt(i);\n        if(sq*sq == i) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; ++i) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; ++i) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i=a;i<=b;i++) {\n        long sq = sqrt(i);\n        if(sq*sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i < a) {\n        i++;\n    }\n    while(i*i <= b) {\n        squares.push_back(i*i);\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            result.push_back(i*i);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n\tstd::vector<long> squares;\n\tfor(long i=a; i<=b; i++) {\n\t\tlong sqrt_i = sqrt(i);\n\t\tif(sqrt_i*sqrt_i == i) {\n\t\t\tsquares.push_back(i);\n\t\t}\n\t}\n\treturn squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while (i * i <= b) {\n    if (i * i >= a) {\n      squares.push_back(i * i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i < a) {\n        i++;\n    }\n    while (i*i <= b) {\n        squares.push_back(i*i);\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i <= b) {\n        if(i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while(i*i <= b) {\n    if(i*i >= a) {\n      squares.push_back(i*i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; ++i) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> res;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      res.push_back(i);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> res;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; ++i) {\n        long sq = std::sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for(long i = a; i <= b; i++) {\n    long sqrt_i = sqrt(i);\n    if(sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> res;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq*sq == i) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> res;\n  for(long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if(sq * sq == i) {\n      res.push_back(i);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while(i*i <= b) {\n        if(i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i=a;i<=b;i++){\n        long sqrt_i = std::sqrt(i);\n        if(sqrt_i*sqrt_i == i){\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n\tstd::vector<long> squares;\n\tfor (long i = a; i <= b; i++) {\n\t\tlong sqrt_i = std::sqrt(i);\n\t\tif (sqrt_i * sqrt_i == i) {\n\t\t\tsquares.push_back(i);\n\t\t}\n\t}\n\treturn squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqr = sqrt(i);\n        if (sqr * sqr == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> v;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      v.push_back(i);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = (long) sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> res;\n    for(long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if(sq * sq == i) {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i=a;i<=b;i++) {\n        long sq = sqrt(i);\n        if(sq*sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; ++i) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 0;\n  while (i * i <= b) {\n    if (i * i >= a) {\n      squares.push_back(i * i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123639,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    if (std::sqrt(i) == (int)std::sqrt(i)) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = std::sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for(long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if(sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for(long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if(sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  long i = 1;\n  while (i*i <= b) {\n    if (i*i >= a) {\n      squares.push_back(i*i);\n    }\n    i++;\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    if (a > b) {\n        return result;\n    }\n    long i = a;\n    while (i <= b) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long root = sqrt(i);\n    if (root * root == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510505,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n  std::vector<long> squares;\n  for (long i = a; i <= b; ++i) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i * i <= b) {\n        if (i * i >= a) {\n            squares.push_back(i * i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}