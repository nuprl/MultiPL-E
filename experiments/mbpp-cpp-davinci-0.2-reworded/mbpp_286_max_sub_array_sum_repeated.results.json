{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(int i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_so_far = 0;\n    for(int i = n - 1; i >= 0; i--) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        min_suffix_sum = min_suffix_sum + a[i];\n        if(min_suffix_sum < min_so_far) {\n            min_so_far = min_suffix_sum;\n        }\n    }\n    long max_wrap_sum = max_wrap + min_so_far;\n    if(max_wrap_sum > max_so_far) {\n        max_so_far = max_wrap_sum;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmp2p3fucji: /tmp/tmp2p3fucji.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > 0) {\n            sum = 0;\n        }\n        min_wrap = std::min(min_wrap, sum);\n    }\n    min_wrap = -min_wrap;\n    long max_wrap_sum = max_wrap + min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap_sum > 0) {\n        return std::max(max_sum, max_wrap_sum * (k - 1) + max_sum);\n    } else {\n        return std::max(max_sum, max_wrap_sum * k);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpsjx5ppqc: /tmp/tmpsjx5ppqc.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmp3yps_c7k: /tmp/tmp3yps_c7k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpktx6mdrg: /tmp/tmpktx6mdrg.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    return max_so_far + (k - 2) * sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmp05w90blc: /tmp/tmp05w90blc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmp18yzqu58: /tmp/tmp18yzqu58.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n\tlong max_so_far = 0, max_ending_here = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tmax_ending_here = max_ending_here + a[i];\n\t\tif (max_ending_here < 0)\n\t\t\tmax_ending_here = 0;\n\t\tif (max_so_far < max_ending_here)\n\t\t\tmax_so_far = max_ending_here;\n\t}\n\tlong max_wrap = 0, i;\n\tfor (i = 0; i < n; i++) {\n\t\tmax_wrap += a[i];\n\t\ta[i] = -a[i];\n\t}\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n\tif (max_wrap > max_so_far)\n\t\tmax_so_far = max_wrap;\n\treturn max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_so_far = std::max(max_sum_so_far, sum);\n        if(sum < 0) {\n            sum = 0;\n        }\n    }\n    if(max_sum_so_far == 0) {\n        return *std::max_element(a.begin(), a.end());\n    }\n    max_sum = max_sum_so_far;\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = sum_of_all_elements * (k - 2);\n    max_wrap_sum += max_sum_so_far;\n    max_sum = std::max(max_sum, max_wrap_sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpi80pfk0i: /tmp/tmpi80pfk0i.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap) * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (sum > 0) {\n        max_sum = sum * k;\n    } else {\n        max_sum = max_element;\n    }\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        if (suffix_sum > max_sum) {\n            max_sum = suffix_sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmptznrg3vn: /tmp/tmptznrg3vn.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = INT_MIN;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    if (sum > 0)\n        return max(max_so_far, (max_so_far % sum) + sum * (k - 2));\n    else\n        return max(max_so_far, max_so_far % sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "/tmp/tmppnl_v_fd.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmppnl_v_fd.cpp:17:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   17 |         return max(max_so_far, (max_so_far % sum) + sum * (k - 2));\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmppnl_v_fd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/tmp/tmppnl_v_fd.cpp:19:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   19 |         return max(max_so_far, max_so_far % sum);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmppnl_v_fd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    if (k == 1) {\n        max_sum = max_sum - sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpl69cjf6r: /tmp/tmpl69cjf6r.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    max_sum = std::max(max_sum, total_sum * k);\n    max_sum = std::max(max_sum, total_sum + prefix_sum * (k - 2) + suffix_sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpbjh9m1zz: /tmp/tmpbjh9m1zz.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 2);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_2 = 0;\n    long max_ending_here_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if (max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if (max_sum_2 < max_ending_here_2) {\n            max_sum_2 = max_ending_here_2;\n        }\n    }\n    max_sum_2 = sum + max_sum_2;\n    long max_sum_3 = 0;\n    long max_ending_here_3 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_3 = max_ending_here_3 + a[i];\n        if (max_ending_here_3 < 0) {\n            max_ending_here_3 = 0;\n        }\n        if (max_sum_3 < max_ending_here_3) {\n            max_sum_3 = max_ending_here_3;\n        }\n    }\n    max_sum_3 = sum + max_sum_3;\n    long max_sum_4 = 0;\n    long max_ending_here_4 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_4 = max_ending_here\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "/tmp/tmpz282fn91.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpz282fn91.cpp:48:44: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   48 |         max_ending_here_4 = max_ending_here\n      |                                            ^\n      |                                            ;\n   49 | }\n      | ~                                           \n/tmp/tmpz282fn91.cpp:50:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   50 | int main() {\n      |            ^\n/tmp/tmpz282fn91.cpp:55:1: error: expected \u2018}\u2019 at end of input\n   55 | }\n      | ^\n/tmp/tmpz282fn91.cpp:4:70: note: to match this \u2018{\u2019\n    4 | long max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n      |                                                                      ^\n/tmp/tmpz282fn91.cpp:55:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   55 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp3tyc1nc8: /tmp/tmp3tyc1nc8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp3tyc1nc8: /tmp/tmp3tyc1nc8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    if (sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_sum, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpev_uz_58: /tmp/tmpev_uz_58.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpmk06txou: /tmp/tmpmk06txou.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp9njfi072: /tmp/tmp9njfi072.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if(sum < 0) {\n        max_sum = max_so_far;\n    } else {\n        max_sum = std::max(max_so_far, sum * k);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmphbvag9yf: /tmp/tmphbvag9yf.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpkly0c0ws: /tmp/tmpkly0c0ws.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        sum += a[i];\n    }\n    if(sum > 0) {\n        max_sum = max_so_far + (k - 2) * sum;\n    }\n    else {\n        max_sum = max_so_far;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpchh6qaim: /tmp/tmpchh6qaim.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        if(max_wrap_sum < 0) {\n            max_wrap_sum = 0;\n        }\n        max_wrap = std::max(max_wrap, max_wrap_sum);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmptczex4ap: /tmp/tmptczex4ap.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element*k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far*k;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = std::max(max_sum, sum*k);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpxygy9883: /tmp/tmpxygy9883.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = max_so_far * (k - 2);\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum += max_so_far;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmphg0jxi_m: /tmp/tmphg0jxi_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > min_wrap) {\n            min_wrap = curr_sum;\n        }\n    }\n    max_wrap = max_wrap + min_wrap;\n    if (max_wrap > max_sum) {\n        max_sum = std::max(max_sum, (max_wrap * (k - 1)) + max_sub_array_sum_repeated(a, n, 1));\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmprpc0_t1e: /tmp/tmprpc0_t1e.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (k == 1) {\n        return max_so_far;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpd9oi3iwc: /tmp/tmpd9oi3iwc.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = a[0];\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum_so_far > max_sum) {\n            max_sum = max_sum_so_far;\n        }\n        if (a[i] > max_element) {\n            max_element = a[i];\n        }\n    }\n    if (max_sum == 0) {\n        return max_element * k;\n    }\n    long sum_of_all_elements = 0;\n    for (long i = 0; i < n; i++) {\n        sum_of_all_elements += a[i];\n    }\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        if (prefix_sum < 0) {\n            prefix_sum = 0;\n        }\n        if (prefix_sum > max_sum) {\n            max_sum = prefix_sum;\n        }\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        if (suffix_sum < 0) {\n            suffix_sum = 0;\n        }\n        if (suffix_sum > max_sum) {\n            max_sum = suffix_sum;\n        }\n    }\n    if (sum_of_all_elements > 0) {\n        return max_sum + (k - 2) * sum_of_all_elements;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpg2pory6y: /tmp/tmpg2pory6y.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, (max_so_far + sum * (k - 2)));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp5n6jmhc2: /tmp/tmp5n6jmhc2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    return std::max(ans1, std::max(ans2, std::max(ans3, ans4)));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp17oz6evi: /tmp/tmp17oz6evi.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for (int i = 0; i < n; i++) {\n        sum += (k - 1) * a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmp4b5__ofl: /tmp/tmp4b5__ofl.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    max_sum = max_sum + (k - 2) * sum;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "/tmp/tmpnnnxh0io.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpnnnxh0io.cpp:8:55: error: \u2018max_element\u2019 cannot be used as a function\n    8 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpyrfk3fz_: /tmp/tmpyrfk3fz_.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpu8htrvh0: /tmp/tmpu8htrvh0.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if(k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmp77wpsr6d: /tmp/tmp77wpsr6d.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    max_wrap_sum += max_sum;\n    if (max_wrap_sum > max_sum && k > 1) {\n        max_sum = max_wrap_sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpgicnrum_: /tmp/tmpgicnrum_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here > max_wrap)\n            max_wrap = max_ending_here;\n    }\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpbb4osoe1: /tmp/tmpbb4osoe1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0) {\n        return *std::max_element(a.begin(), a.end());\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap = sum + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_wrap, max_so_far + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpvj2342y8: /tmp/tmpvj2342y8.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpu8htrvh0: /tmp/tmpu8htrvh0.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        min_wrap = std::min(min_wrap, sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    min_wrap = -min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > 0) {\n        return std::max(max_sum, max_wrap + min_wrap + max_wrap * (k - 2));\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpvamzhkpf: /tmp/tmpvamzhkpf.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = max_so_far + (max_wrap * (k - 2));\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmp8ilesem5: /tmp/tmp8ilesem5.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if(sum < 0) {\n        return max_so_far;\n    }\n    max_sum = max_so_far;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + sum - n * a[n - i - 1];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpnj28qpvc: /tmp/tmpnj28qpvc.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap * k;\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpr8ul118u: /tmp/tmpr8ul118u.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0)\n        return max_element * k;\n    for (int i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0)\n            max_so_far = 0;\n        if (max_sum < max_so_far)\n            max_sum = max_so_far;\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    long max_wrap_so_far = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap_so_far = max_wrap_so_far + a[i];\n        if (max_wrap_so_far < 0)\n            max_wrap_so_far = 0;\n        if (max_wrap_sum < max_wrap_so_far)\n            max_wrap_sum = max_wrap_so_far;\n    }\n    max_wrap = max_wrap + max_wrap_sum;\n    if (k == 1)\n        return max_sum;\n    return std::max(max_wrap, max_sum + (k - 2) * max_wrap + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpx4l3qj6t: /tmp/tmpx4l3qj6t.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; ++i) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; ++i) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; ++i) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = std::max(max_so_far, max_wrap + max_ending_here_wrap);\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpj49ab72a: /tmp/tmpj49ab72a.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpktx6mdrg: /tmp/tmpktx6mdrg.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap += a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = max(max_so_far, max_wrap * (k - 2) + max_ending_here_wrap);\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmpyv6l7xj3.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpyv6l7xj3.cpp:8:55: error: \u2018max_element\u2019 cannot be used as a function\n    8 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n/tmp/tmpyv6l7xj3.cpp:36:18: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   36 |     max_so_far = max(max_so_far, max_wrap * (k - 2) + max_ending_here_wrap);\n      |                  ^~~\n      |                  std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpyv6l7xj3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpqt5oc79f: /tmp/tmpqt5oc79f.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpmk06txou: /tmp/tmpmk06txou.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > max_sum_so_far) {\n            max_sum_so_far = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    max_sum = max_sum_so_far;\n    long sum_of_all_elements = sum;\n    for (long i = 0; i < n; i++) {\n        sum_of_all_elements += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > max_sum_so_far) {\n            max_sum_so_far = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    max_sum = std::max(max_sum, max_sum_so_far);\n    max_sum = std::max(max_sum, sum_of_all_elements * k);\n    if (max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        max_sum *= k;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpxob43vzi: /tmp/tmpxob43vzi.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (sum > 0) {\n        return max(max_so_far, (sum * k - sum) + max_element);\n    }\n    else {\n        return max(max_so_far, max_element);\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "/tmp/tmp09drdw7j.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmp09drdw7j.cpp:7:55: error: \u2018max_element\u2019 cannot be used as a function\n    7 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n/tmp/tmp09drdw7j.cpp:18:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   18 |         return max(max_so_far, (sum * k - sum) + max_element);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp09drdw7j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp09drdw7j.cpp:21:16: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   21 |         return max(max_so_far, max_element);\n      |                ^~~\n      |                std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmp09drdw7j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans = std::max(ans1, std::max(ans2, std::max(ans3, std::max(ans4, ans5))));\n    return ans * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpdecpiq7h: /tmp/tmpdecpiq7h.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if (total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmp6cqoybfh: /tmp/tmp6cqoybfh.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0)\n            max_wrap_ending_here = 0;\n        if (max_wrap < max_wrap_ending_here)\n            max_wrap = max_wrap_ending_here;\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1)\n        return max_so_far;\n    else\n        return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpvks7g0tx: /tmp/tmpvks7g0tx.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            j = i + 1;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpqbbodio6: /tmp/tmpqbbodio6.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpyha6b_b3: /tmp/tmpyha6b_b3.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if(max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if(max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    return std::max(max_so_far, max_wrap * (k - 1));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpzng3k14c: /tmp/tmpzng3k14c.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpy_39z_pb: /tmp/tmpy_39z_pb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmp3tyc1nc8: /tmp/tmp3tyc1nc8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_ending_here = max_sum_ending_here + a[i];\n        if(max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if(max_sum < max_sum_ending_here) {\n            max_sum = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum + sum;\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123382,
      "stdout": "",
      "stderr": "tmpp2844ymr: /tmp/tmpp2844ymr.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    if (sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpamem397t: /tmp/tmpamem397t.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0)\n            max_wrap_ending_here = 0;\n        if (max_wrap < max_wrap_ending_here)\n            max_wrap = max_wrap_ending_here;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpof4m8f65: /tmp/tmpof4m8f65.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, curr_sum);\n    }\n    curr_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        curr_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, curr_sum);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, std::max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max_prefix_sum + (k - 1) * total_sum));\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpcu7h34hx: /tmp/tmpcu7h34hx.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans = std::max(ans1, ans2);\n    ans = std::max(ans, ans3);\n    ans = std::max(ans, ans4);\n    ans = std::max(ans, ans5);\n    return ans * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmp2ladexra: /tmp/tmp2ladexra.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "/tmp/tmpid6k5ps1.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpid6k5ps1.cpp:7:55: error: \u2018max_element\u2019 cannot be used as a function\n    7 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long min_so_far = 0, min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0)\n            min_ending_here = 0;\n        if (min_so_far > min_ending_here)\n            min_so_far = min_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++)\n        sum += a[i];\n    long ans1 = max_so_far;\n    long ans2 = sum * (k - 2) + max_so_far;\n    long ans3 = sum * (k - 2) - min_so_far;\n    return std::max(ans1, std::max(ans2, ans3));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpyxgkbcvs: /tmp/tmpyxgkbcvs.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i = 0;\n    long j = 0;\n    for(i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for(i = 0; i < n; i++) {\n        sum = sum + a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    long min_ending_here = 0;\n    for(i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    min_sum = min_so_far * k;\n    if(k > 1) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return std::max(max_sum, sum + min_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpqv_yezjh: /tmp/tmpqv_yezjh.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmp7dlzc6o7: /tmp/tmp7dlzc6o7.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmprzbu1zcn: /tmp/tmprzbu1zcn.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123384,
      "stdout": "",
      "stderr": "tmpqc5jxtfp: /tmp/tmpqc5jxtfp.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmp6figrt0q: /tmp/tmp6figrt0q.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    if (sum_of_all_elements > 0) {\n        return std::max(max_sum, max_so_far + sum_of_all_elements * (k - 2));\n    }\n    return std::max(max_sum, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmptui7kzig: /tmp/tmptui7kzig.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmplcmdcl2v: /tmp/tmplcmdcl2v.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0, max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0, min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far = min_so_far + a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    long ans1 = max_sum;\n    long ans2 = sum + min_sum;\n    long ans3 = sum + min_sum + max_sum;\n    return std::max(ans1, std::max(ans2, ans3));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmp1p8ut_z8: /tmp/tmp1p8ut_z8.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123401,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        if(max_suffix_sum < min_so_far) {\n            min_so_far = max_suffix_sum;\n        }\n    }\n    long max_prefix_sum = 0;\n    long min_prefix_sum = 0;\n    long min_ending_here = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        min_prefix_sum = min_prefix_sum + a[i];\n        if(min_prefix_sum < min_suffix_sum) {\n            min_suffix_sum = min_prefix_sum;\n        }\n        if(min_prefix_sum > min_ending_here) {\n            min_ending_here = min_prefix_sum;\n        }\n    }\n    long max_\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "/tmp/tmpydoikpoq.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpydoikpoq.cpp:50:1: error: expected initializer before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpydoikpoq.cpp:50:1: warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = 0, max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    if(k == 1)\n        return ans1;\n    long ans2 = sum + min_prefix_sum + min_suffix_sum;\n    long ans3 = sum + max_prefix_sum + max_suffix_sum;\n    long ans4 = ans3;\n    for(long i = 1; i < k - 1; i++) {\n        ans4 = ans4 + sum + std::min(min_prefix_sum, min_suffix_sum);\n    }\n    return std::max(ans1, std::max(ans2, ans4));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmpw0rcmhek: /tmp/tmpw0rcmhek.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, max_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        max_prefix_sum += a[i];\n        if (max_prefix_sum > max_so_far)\n            max_so_far = max_prefix_sum;\n    }\n    return max_so_far + (k - 2) * sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmph6ewiv2a: /tmp/tmph6ewiv2a.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_wrap_sum = std::max(max_wrap_sum, curr_sum);\n    }\n    max_wrap_sum = max_wrap + max_wrap_sum;\n    return std::max(max_sum, max_wrap_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "tmpd_yu84tf: /tmp/tmpd_yu84tf.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) return max_element*k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) max_ending_here = 0;\n        if(max_so_far < max_ending_here) max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) max_ending_here = 0;\n        if(max_so_far < max_ending_here) max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpueietiqc: /tmp/tmpueietiqc.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpu96eu357: /tmp/tmpu96eu357.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    if (k == 1)\n        return ans1;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans6 = sum + max_so_far;\n    return std::max(ans1, std::max(ans2, std::max(ans3, std::max(ans4, std::max(ans5, ans6)))));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmphit7ro61: /tmp/tmphit7ro61.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "tmpmk06txou: /tmp/tmpmk06txou.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    if(max_element < 0)\n        return max_element * k;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(int i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = sum + max_wrap;\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "/tmp/tmpswtx8c_q.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpswtx8c_q.cpp:7:55: error: \u2018max_element\u2019 cannot be used as a function\n    7 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        sum -= a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpb1p0gkn3: /tmp/tmpb1p0gkn3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_sum_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here = max_sum_ending_here + a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_ending_here_2 = 0;\n    long max_sum_so_far_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here_2 = max_sum_ending_here_2 + a[i];\n        if (max_sum_ending_here_2 < 0) {\n            max_sum_ending_here_2 = 0;\n        }\n        if (max_sum_so_far_2 < max_sum_ending_here_2) {\n            max_sum_so_far_2 = max_sum_ending_here_2;\n        }\n    }\n    max_sum_so_far_2 = sum + max_sum_so_far_2;\n    if (max_sum_so_far_2 > max_sum) {\n        max_sum = max_sum_so_far_2;\n    }\n    long max_sum_so_far_3 = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far_3 = max_sum_so_far_3 + a[i];\n    }\n    max_sum_so_far_3 = max_sum_so_far_3\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "/tmp/tmp6f1rs12x.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmp6f1rs12x.cpp:42:40: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   42 |     max_sum_so_far_3 = max_sum_so_far_3\n      |                                        ^\n      |                                        ;\n   43 | }\n      | ~                                       \n/tmp/tmp6f1rs12x.cpp:43:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpifodhvxz: /tmp/tmpifodhvxz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_ending_here = max_ending_here - a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        max_sum = std::max(max_sum, max_so_far + sum * (k - 2));\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpt6qw_nao: /tmp/tmpt6qw_nao.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_sum = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_sum += a[i];\n    }\n    max_sum *= k;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_sum;\n    long max_wrap = 0;\n    long curr_wrap = 0;\n    for (i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0)\n            curr_wrap = 0;\n        if (max_wrap < curr_wrap)\n            max_wrap = curr_wrap;\n    }\n    return std::max(max_so_far, max_wrap + max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "tmpk3sxqoni: /tmp/tmpk3sxqoni.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "tmpgmfv4l17: /tmp/tmpgmfv4l17.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return (max_wrap > max_so_far) ? max_wrap : max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123405,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123405,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if(max_so_far < max_ending_here_wrap)\n            max_so_far = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_ending_here_wrap;\n    if(k == 1)\n        return max_so_far;\n    return max(max_so_far, max_wrap * (k - 2) + max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "/tmp/tmpmkejqqo0.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpmkejqqo0.cpp:8:55: error: \u2018max_element\u2019 cannot be used as a function\n    8 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n/tmp/tmpmkejqqo0.cpp:34:12: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   34 |     return max(max_so_far, max_wrap * (k - 2) + max_so_far);\n      |            ^~~\n      |            std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpmkejqqo0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "tmpn4hsu7h_: /tmp/tmpn4hsu7h_.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > min_wrap) {\n            min_wrap = sum;\n        }\n    }\n    min_wrap = std::max(min_wrap, 0l);\n    long ans1 = max_wrap + min_wrap * (k - 2);\n    long ans2 = max_sum;\n    return std::max(ans1, ans2);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "tmpws21hvbe: /tmp/tmpws21hvbe.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123390,
      "stdout": "",
      "stderr": "tmp54ylz573: /tmp/tmp54ylz573.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if (max_sum == 0)\n        return max_sum;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here > max_wrap)\n            max_wrap = max_ending_here;\n    }\n    return std::max(max_sum, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123392,
      "stdout": "",
      "stderr": "tmp3q6dajxp: /tmp/tmp3q6dajxp.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123392,
      "stdout": "",
      "stderr": "tmp6wf8dtd7: /tmp/tmp6wf8dtd7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpifodhvxz: /tmp/tmpifodhvxz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if(total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123392,
      "stdout": "",
      "stderr": "tmp6ttppbv_: /tmp/tmp6ttppbv_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far;\n    long sum = max_so_far;\n    for (i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    long total_sum = 0;\n    for (i = 0; i < n; i++) {\n        total_sum = total_sum + a[i];\n    }\n    max_sum = std::max(max_sum, total_sum * k);\n    max_sum = std::max(max_sum, total_sum + sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123392,
      "stdout": "",
      "stderr": "tmp8erwz4s_: /tmp/tmp8erwz4s_.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum += a[i];\n    }\n    long min_sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        min_sum += a[i];\n    }\n    long max_sum_so_far = max_sum;\n    for(int i = 0; i < n; i++) {\n        long curr_sum = sum - min_sum;\n        max_sum_so_far = std::max(max_sum_so_far, curr_sum);\n        sum += a[i];\n        min_sum += a[i];\n    }\n    return max_sum_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123392,
      "stdout": "",
      "stderr": "tmpkyhbc645: /tmp/tmpkyhbc645.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_ending_here += a[i];\n        if(min_ending_here > 0)\n            min_ending_here = 0;\n        if(min_so_far > min_ending_here)\n            min_so_far = min_ending_here;\n    }\n    min_sum = min_so_far * k;\n    long corner_case = sum * (k - 2);\n    return std::max(max_sum, std::max(corner_case, corner_case + sum + min_sum));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123394,
      "stdout": "",
      "stderr": "tmpe2hzud79: /tmp/tmpe2hzud79.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, max_wrap + (k - 2) * max_wrap);\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123394,
      "stdout": "",
      "stderr": "tmpc02ceqjs: /tmp/tmpc02ceqjs.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(sum, max_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(sum, max_sum);\n    }\n    max_wrap = max_wrap + sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123394,
      "stdout": "",
      "stderr": "tmp0vco17pk: /tmp/tmp0vco17pk.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123394,
      "stdout": "",
      "stderr": "tmpyxx3dp51: /tmp/tmpyxx3dp51.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long min_prefix_sum = 0;\n    long prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, prefix_sum);\n        min_prefix_sum = std::min(min_prefix_sum, prefix_sum);\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, suffix_sum);\n        min_suffix_sum = std::min(min_suffix_sum, suffix_sum);\n    }\n    long total_sum = prefix_sum;\n    long ans1 = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    long ans2 = max_prefix_sum + (k - 1) * total_sum - min_suffix_sum;\n    long ans3 = max_suffix_sum + (k - 1) * total_sum - min_prefix_sum;\n    return std::max(ans1, std::max(ans2, ans3));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123394,
      "stdout": "",
      "stderr": "tmpm2i8pbt4: /tmp/tmpm2i8pbt4.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "tmpl9bzcbhq: /tmp/tmpl9bzcbhq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpifodhvxz: /tmp/tmpifodhvxz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "tmpdxwmsvda: /tmp/tmpdxwmsvda.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for(long i=0; i<n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for(long i=0; i<n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    long total_sum = 0;\n    for(long i=0; i<n; i++) {\n        total_sum += a[i];\n    }\n    if(k == 1) {\n        return max_so_far;\n    }\n    else {\n        long max_sum_k = 0;\n        max_sum_k = std::max(max_so_far, total_sum * k - min_so_far);\n        return max_sum_k;\n    }\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "tmpt71l4vu1: /tmp/tmpt71l4vu1.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "/tmp/tmpy4qtkwxj.cpp: In function \u2018long int max_sub_array_sum_repeated(std::vector<long int>, long int, long int)\u2019:\n/tmp/tmpy4qtkwxj.cpp:7:55: error: \u2018max_element\u2019 cannot be used as a function\n    7 |     long max_element = *max_element(a.begin(), a.end());\n      |                                                       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_wrap, max_so_far + (k - 2) * max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "tmplx8x2k7a: /tmp/tmplx8x2k7a.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element*k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if(max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if(max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_so_far;\n    }\n    if(k == 2) {\n        return std::max(max_so_far, max_wrap);\n    }\n    return std::max(max_so_far, max_wrap + max_sub_array_sum_repeated(a, n, k-2));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "tmpskce2u1z: /tmp/tmpskce2u1z.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if(k == 1)\n        return max_so_far;\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123396,
      "stdout": "",
      "stderr": "tmp9l0hjv8u: /tmp/tmp9l0hjv8u.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum = prefix_sum + a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum = suffix_sum + a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    max_sum = std::max(max_sum, total_sum * k);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "tmp8lbhks19: /tmp/tmp8lbhks19.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long max_sum = max_element * k;\n    long curr_prefix_sum = 0;\n    long curr_suffix_sum = 0;\n    long prefix_sum[n];\n    long suffix_sum[n];\n    for (long i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        prefix_sum[i] = curr_prefix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        suffix_sum[i] = curr_suffix_sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = std::max(max_ending_here + a[i], a[i]);\n        max_so_far = std::max(max_so_far, max_ending_here);\n    }\n    long ans1 = max_so_far;\n    for (long i = 0; i < n; i++) {\n        max_so_far = std::max(max_so_far, prefix_sum[i] + suffix_sum[i] - a[i]);\n    }\n    long ans2 = max_so_far;\n    return std::max(ans1, ans2 + (k - 2) * max_sum);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "tmp6cnh49jf: /tmp/tmp6cnh49jf.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmp18yzqu58: /tmp/tmp18yzqu58.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510380,
      "stdout": "",
      "stderr": "tmpw2__4ymx: /tmp/tmpw2__4ymx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "tmpf1y1rixa: /tmp/tmpf1y1rixa.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = std::max(a[i], max_so_far + a[i]);\n        max_sum = std::max(max_so_far, max_sum);\n    }\n    max_sum = std::max(max_sum, max_sum + (k - 2) * sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "tmp_wuj2_nj: /tmp/tmp_wuj2_nj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123412,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123388,
      "stdout": "",
      "stderr": "tmpifodhvxz: /tmp/tmpifodhvxz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123412,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0)\n        return max_element * k;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0)\n            sum = 0;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "tmp2ebuzw8v: /tmp/tmp2ebuzw8v.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123380,
      "stdout": "",
      "stderr": "tmpyrfk3fz_: /tmp/tmpyrfk3fz_.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i=0;i<n;i++){\n        sum += a[i];\n    }\n    long max_sum_so_far = sum;\n    for(long i=0;i<n;i++){\n        sum += a[i];\n        sum -= a[i]*k;\n        max_sum_so_far = std::max(max_sum_so_far,sum);\n    }\n    return max_sum_so_far;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "tmpvrruhf13: /tmp/tmpvrruhf13.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if (max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        return max_sum * k;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if (max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_sum;\n    if (k == 1)\n        return max_sum;\n    return std::max(max_wrap, max_sum * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "tmp794bylga: /tmp/tmp794bylga.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if (max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    return std::max(max_so_far, max_wrap * (k - 1));\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "tmpl7wfwvn8: /tmp/tmpl7wfwvn8.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 2);\n    return std::max(max_so_far, max_wrap);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123393,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if(max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        return max_sum * k;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if(max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_sum;\n    if(max_wrap > max_sum)\n        return max_wrap * (k - 2) + max_sum;\n    else\n        return max_sum * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmplweskq27: /tmp/tmplweskq27.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for (long i = 0; i < n; i++) {\n        sum -= a[i];\n        sum += a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmpcwfdew3l: /tmp/tmpcwfdew3l.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap_sum = 0;\n    long min_wrap_sum = 0;\n    long wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        wrap_sum += a[i];\n        max_wrap_sum = std::max(max_wrap_sum, wrap_sum);\n        if (wrap_sum < 0) {\n            wrap_sum = 0;\n        }\n        min_wrap_sum = std::min(min_wrap_sum, wrap_sum);\n    }\n    long max_wrap_sum_k = max_wrap_sum * k;\n    long min_wrap_sum_k = min_wrap_sum * k;\n    long max_sum_k = max_wrap_sum_k - min_wrap_sum_k;\n    return std::max(max_sum, max_sum_k);\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmp_mwkaxol: /tmp/tmp_mwkaxol.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if (max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if (max_sum < max_ending_here_2) {\n            max_sum = max_ending_here_2;\n        }\n    }\n    max_sum = std::max(max_sum, sum * k);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmpljw9z5x1: /tmp/tmpljw9z5x1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_sum = max_so_far;\n    long curr_val = 0;\n    for (long i = 0; i < n; i++) {\n        curr_val += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = std::max(max_sum, max_so_far + curr_val * (k - 2));\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmphhwi4svg: /tmp/tmphhwi4svg.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (sum < 0) {\n        return max_so_far;\n    }\n    max_sum = max_so_far;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        max_ending_here = std::max(max_ending_here, 0L);\n        max_so_far = std::max(max_so_far, max_ending_here);\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    max_sum = std::max(max_sum, max_sum + (k - 2) * sum);\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "tmprrwwgg46: /tmp/tmprrwwgg46.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;\n}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
      "timestamp": 1665510395,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}