{
  "name": "mbpp_562_Find_Max_Length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the longest subvectors.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = Find_Max_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_len = 0;\n    for (auto l : lst) {\n        max_len = std::max(max_len, (long)l.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    long temp_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        temp_length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                temp_length += 1;\n            } else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                int k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto itr = lst.begin(); itr != lst.end(); itr++) {\n        if (itr->size() > max_length) {\n            max_length = itr->size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for (auto i : lst) {\n        long length = i.size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;"
  ]
}