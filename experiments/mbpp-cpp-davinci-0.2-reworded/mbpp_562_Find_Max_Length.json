{
  "name": "mbpp_562_Find_Max_Length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the length of the longest subvectors.\nlong Find_Max_Length(std::vector<std::vector<long>> lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = Find_Max_Length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8})}))) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)1}), (std::vector<long>)std::vector<long>({(long)2, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)2, (long)1})}))) == (3));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)7}), (std::vector<long>)std::vector<long>({(long)22, (long)23}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40, (long)50})}))) == (5));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_len = 0;\n    for (auto l : lst) {\n        max_len = std::max(max_len, (long)l.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    long temp_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        temp_length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                temp_length += 1;\n            } else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                int k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto itr = lst.begin(); itr != lst.end(); itr++) {\n        if (itr->size() > max_length) {\n            max_length = itr->size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for (auto i : lst) {\n        long length = i.size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (long k = j; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        long len = 0;\n        for(int j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == 1) {\n                len++;\n            }\n            else {\n                len = 0;\n            }\n            if(len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    long length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            } else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto sub_lst : lst) {\n        max_len = std::max(max_len, (long)sub_lst.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    long curr_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                curr_length += 1;\n            } else {\n                curr_length = 0;\n            }\n            if (curr_length > max_length) {\n                max_length = curr_length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (long k = j; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    std::vector<long> max_length;\n    for(auto i : lst) {\n        max_length.push_back(i.size());\n    }\n    return *std::max_element(max_length.begin(), max_length.end());",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] != 0) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n        }\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            long length = 0;\n            for (long k = 0; k < lst[i].size(); k++) {\n                if (lst[i][k] == lst[i][j]) {\n                    length++;\n                }\n                else {\n                    break;\n                }\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto l : lst) {\n        max_len = std::max(max_len, (long)l.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, lst[i].size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            max_length = std::max(max_length, length);\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_list : lst) {\n        max_length = std::max(max_length, (long)sub_list.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            length += lst[i][j];\n        }\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                max_length = std::max(max_length, j - i + 1);\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                if (len > max_len) {\n                    max_len = len;\n                }\n            }\n        }\n    }\n    return max_len;",
    "\tlong max_length = 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (lst[i].size() > max_length) {\n\t\t\tmax_length = lst[i].size();\n\t\t}\n\t}\n\treturn max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            length += lst[i][j];\n        }\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                for (long k = j + 1; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        len++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (len > max_len) {\n                    max_len = len;\n                }\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n            max_length = std::max(max_length, length);\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        if (i.size() > max_len) {\n            max_len = i.size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    std::vector<long> max_length;\n    for (auto i : lst) {\n        max_length.push_back(i.size());\n    }\n    return *std::max_element(max_length.begin(), max_length.end());",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (long k = j; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count > max_len) {\n                    max_len = count;\n                }\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(auto i:lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    long curr_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                curr_len += 1;\n            } else {\n                curr_len = 0;\n            }\n            if (curr_len > max_len) {\n                max_len = curr_len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (auto i: lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_len) {\n            max_len = lst[i].size();\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    std::vector<long> temp;\n    for (long i = 0; i < lst.size(); i++) {\n        temp = lst[i];\n        if (temp.size() > max_len) {\n            max_len = temp.size();\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto i = 0; i < lst.size(); i++) {\n        for (auto j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (auto k = i; k < lst.size(); k++) {\n                    if (lst[k][j] == 1) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                lst[i][j] = -1;\n            }\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            long sum = 0;\n            for (int k = j; k < lst[i].size(); k++) {\n                sum += lst[i][k];\n                if (sum == 0) {\n                    max_length = std::max(max_length, k - j + 1);\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    long len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        len = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                len += 1;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                long k = j;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length += 1;\n            } else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (long k = j; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            } else {\n                max_length = std::max(max_length, length);\n                length = 0;\n            }\n        }\n        max_length = std::max(max_length, length);\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == 1) {\n                long count = 0;\n                for(long k = j; k < lst[i].size(); k++) {\n                    if(lst[i][k] == 1) {\n                        count++;\n                    } else {\n                        break;\n                    }\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while(k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if(length > max_length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        max_len = std::max(max_len, len);\n    }\n    return max_len;",
    "    long max_length = 0;\n    long length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                length += 1;\n            }\n            else {\n                max_length = std::max(max_length, length);\n                length = 0;\n            }\n        }\n        max_length = std::max(max_length, length);\n        length = 0;\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    long len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        len = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                len++;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        max_len = std::max(max_len, len);\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            } else {\n                length = 0;\n            }\n            max_length = std::max(max_length, length);\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] != 0) {\n                length += 1;\n            } else {\n                max_length = std::max(max_length, length);\n                length = 0;\n            }\n        }\n        max_length = std::max(max_length, length);\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto itr = lst.begin(); itr != lst.end(); itr++) {\n        if (itr->size() > max_length) {\n            max_length = itr->size();\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                len += 1;\n            } else {\n                len = 0;\n            }\n            max_len = std::max(max_len, len);\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if(len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, *std::max_element(i.begin(), i.end()));\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto x : lst) {\n        max_length = std::max(max_length, (long)x.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    // Write your code here\n    long max_len = 0;\n    for(long i = 0; i < lst.size(); i++){\n        long len = lst[i].size();\n        if(len > max_len){\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (std::vector<long> lst_1 : lst) {\n        long length = lst_1.size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                max_len = std::max(max_len, j - i + 1);\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    long length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            } else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                long k = j;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                long k = j;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] != 0) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                len += 1;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] > max_length) {\n                max_length = lst[i][j];\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            long count = 0;\n            for (long k = j; k < lst[i].size(); k++) {\n                if (lst[i][k] == 1) {\n                    count++;\n                }\n                else {\n                    break;\n                }\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                max_length = std::max(max_length, j - i);\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    std::vector<long> len;\n    for (long i = 0; i < lst.size(); i++) {\n        len.push_back(lst[i].size());\n    }\n    max_len = *std::max_element(len.begin(), len.end());\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                for (int k = j + 1; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (max_length < lst[i].size()) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length++;\n                    k++;\n                }\n                if (max_length < length) {\n                    max_length = length;\n                }\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                max_length = std::max(max_length, count);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for(long j = 0; j < lst[i].size(); j++) {\n            if(lst[i][j] == 1) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long current_length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    current_length += 1;\n                    k += 1;\n                }\n                max_length = std::max(max_length, current_length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto i : lst) {\n        max_length = std::max(max_length, (long)i.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] != 0) {\n                len++;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    std::vector<long> len;\n    for (long i = 0; i < lst.size(); i++) {\n        len.push_back(lst[i].size());\n    }\n    max_len = *std::max_element(len.begin(), len.end());\n    return max_len;",
    "    long max_len = 0;\n    for (auto it = lst.begin(); it != lst.end(); it++) {\n        if (it->size() > max_len) {\n            max_len = it->size();\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long len = lst[i].size();\n        if (len > max_len) {\n            max_len = len;\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long count = 0;\n                for (long k = j; k < lst[i].size(); k++) {\n                    if (lst[i][k] == 1) {\n                        count++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (count > max_len) {\n                    max_len = count;\n                }\n            }\n        }\n    }\n    return max_len;",
    "    long max_len = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long len = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    len++;\n                    k++;\n                }\n                max_len = std::max(max_len, len);\n            }\n        }\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            max_length = std::max(max_length, length);\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    long current_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() == 0) {\n            current_length = 0;\n        } else {\n            current_length += 1;\n            max_length = std::max(max_length, current_length);\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = 0;\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] != 0) {\n                length += 1;\n            }\n            else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (auto sublist : lst) {\n        max_length = std::max(max_length, (long)sublist.size());\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (auto sub_lst : lst) {\n        max_length = std::max(max_length, (long)sub_lst.size());\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        max_length = std::max(max_length, lst[i].size());\n    }\n    return max_length;",
    "    std::vector<long> max_len(lst.size(), 0);\n    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                max_len[i] += 1;\n            }\n            else {\n                max_len[i] = 0;\n            }\n            if (max_len[i] > max_length) {\n                max_length = max_len[i];\n            }\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto i : lst) {\n        max_len = std::max(max_len, (long)i.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] > max_length) {\n                max_length = lst[i][j];\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() > max_length) {\n            max_length = lst[i].size();\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == 1) {\n                long length = 1;\n                long k = j + 1;\n                while (k < lst[i].size() && lst[i][k] == 1) {\n                    length += 1;\n                    k += 1;\n                }\n                max_length = std::max(max_length, length);\n            }\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        long length = lst[i].size();\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;",
    "    long max_len = 0;\n    for (auto sub_lst : lst) {\n        max_len = std::max(max_len, (long)sub_lst.size());\n    }\n    return max_len;",
    "    long max_length = 0;\n    long length = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i].size() == 0) {\n            length = 0;\n        }\n        else {\n            length++;\n        }\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;"
  ]
}