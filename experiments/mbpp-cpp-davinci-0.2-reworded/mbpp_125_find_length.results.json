{
  "name": "mbpp_125_find_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tlong max_length = 0;\n\tlong count_0 = 0;\n\tlong count_1 = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '0') {\n\t\t\tcount_0++;\n\t\t} else {\n\t\t\tcount_1++;\n\t\t}\n\t\tif(count_0 == count_1) {\n\t\t\tlength = count_0 + count_1;\n\t\t\tif(length > max_length) {\n\t\t\t\tmax_length = length;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpyrovdti2: /tmp/tmpyrovdti2.cpp:26: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long zero_count = 0;\n    long one_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            zero_count++;\n        } else {\n            one_count++;\n        }\n        if(zero_count == one_count) {\n            length = std::max(length, zero_count + one_count);\n        }\n    }\n    zero_count = 0;\n    one_count = 0;\n    for(int i = string.length() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            zero_count++;\n        } else {\n            one_count++;\n        }\n        if(zero_count == one_count) {\n            length = std::max(length, zero_count + one_count);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpyy_b1ksi: /tmp/tmpyy_b1ksi.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < length; i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for(long i = length - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpok_olgy3: /tmp/tmpok_olgy3.cpp:37: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count == 0) {\n            length = std::max(length, i + 1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "/tmp/tmp5odhl__l.cpp: In function \u2018long int find_length(std::string)\u2019:\n/tmp/tmp5odhl__l.cpp:15:44: error: no matching function for call to \u2018max(long int&, int)\u2019\n   15 |             length = std::max(length, i + 1);\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp5odhl__l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5: note:   template argument deduction/substitution failed:\n/tmp/tmp5odhl__l.cpp:15:44: note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019 and \u2018int\u2019)\n   15 |             length = std::max(length, i + 1);\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp5odhl__l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:268:5: note:   template argument deduction/substitution failed:\n/tmp/tmp5odhl__l.cpp:15:44: note:   deduced conflicting types for paramet",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.size();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp7wluhlml: /tmp/tmp7wluhlml.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count--;\n        }\n        else {\n            count++;\n        }\n        if(count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp2y27hwxs: /tmp/tmp2y27hwxs.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count == 0) {\n            max_length = std::max(max_length, i + 1);\n        }\n        else if(count < 0) {\n            count = 0;\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpz_se2k3d: /tmp/tmpz_se2k3d.cpp:25: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long current_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            current_length = count_one + count_zero;\n            if(current_length > max_length) {\n                max_length = current_length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpy7ds8344: /tmp/tmpy7ds8344.cpp:27: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.size(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        }\n        else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            max_length = std::max(max_length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for(long i = string.size() - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_0++;\n        }\n        else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            max_length = std::max(max_length, count_0 + count_1);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpi2c346gd: /tmp/tmpi2c346gd.cpp:36: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = count_0 + count_1;\n            max_length = std::max(max_length, length);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpji77vp9g: /tmp/tmpji77vp9g.cpp:24: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long max_length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            max_length = std::max(max_length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for (int i = string.length() - 1; i >= 0; i--) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            max_length = std::max(max_length, count_0 + count_1);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpg2elityz: /tmp/tmpg2elityz.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmphehzh39d: /tmp/tmphehzh39d.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_zero++;\n        } else {\n            count_one++;\n        }\n        if (count_one == count_zero) {\n            length = std::max(length, count_one + count_zero);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpnhc52n8l: /tmp/tmpnhc52n8l.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp6i4ug4mr: /tmp/tmp6i4ug4mr.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpj0ebtzt7: /tmp/tmpj0ebtzt7.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp261sgxca: /tmp/tmp261sgxca.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpohny3iw6: /tmp/tmpohny3iw6.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_zero++;\n        } else {\n            count_one++;\n        }\n        if (count_zero == count_one) {\n            length = count_zero + count_one;\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp0_3pw1c2: /tmp/tmp0_3pw1c2.cpp:26: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '1') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpi78nhewm: /tmp/tmpi78nhewm.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpoiul2zvs: /tmp/tmpoiul2zvs.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp_hfy6w8v: /tmp/tmp_hfy6w8v.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    int length = string.length();\n    int count_zero = 0;\n    int count_one = 0;\n    int max_diff = 0;\n    for(int i = 0; i < length; i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_diff = std::max(max_diff, count_zero);\n        }\n    }\n    return max_diff;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp9pd42pv7: /tmp/tmp9pd42pv7.cpp:24: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for (long i = 0; i < string.size(); i++) {\n        if (string[i] == '1') {\n            count++;\n        } else {\n            count--;\n        }\n        if (count == 0) {\n            length = i + 1;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpe65mb_s6: /tmp/tmpe65mb_s6.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    int n = string.length();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return (n - count);\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp884t36da: /tmp/tmp884t36da.cpp:16: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < length; i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for(long i = length - 1; i >= 0; i--) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            max_length = std::max(max_length, count_zero + count_one);\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpok_olgy3: /tmp/tmpok_olgy3.cpp:37: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long count = 0;\n  long max_count = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '1') {\n      count++;\n    }\n    else {\n      count--;\n    }\n    if(count < 0) {\n      count = 0;\n    }\n    if(count > max_count) {\n      max_count = count;\n    }\n  }\n  return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmppuhyvsnt: /tmp/tmppuhyvsnt.cpp:25: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong count = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '0') {\n\t\t\tcount--;\n\t\t}\n\t\telse {\n\t\t\tcount++;\n\t\t}\n\t\tif (count > max) {\n\t\t\tmax = count;\n\t\t}\n\t\tif (count < 0) {\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpnxtq8jhg: /tmp/tmpnxtq8jhg.cpp:25: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for (long i = string.length() - 1; i >= 0; i--) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpjged6wfc: /tmp/tmpjged6wfc.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpv9a_y_q9: /tmp/tmpv9a_y_q9.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = 0;\n  long max_length = 0;\n  long count_zero = 0;\n  long count_one = 0;\n  for (long i = 0; i < string.length(); i++) {\n    if (string[i] == '0') {\n      count_zero++;\n    } else {\n      count_one++;\n    }\n    if (count_zero == count_one) {\n      length = count_zero + count_one;\n      if (length > max_length) {\n        max_length = length;\n      }\n    }\n  }\n  return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp241y17r7: /tmp/tmp241y17r7.cpp:26: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    long max_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count < 0) {\n            count = 0;\n        }\n        if(max_count < count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(auto i : string) {\n        if(i == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpmvkc2_4u: /tmp/tmpmvkc2_4u.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp9pvug6g5: /tmp/tmp9pvug6g5.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = 0;\n\tfor (long i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '1') {\n\t\t\tlength++;\n\t\t}\n\t}\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp_hfy6w8v: /tmp/tmp_hfy6w8v.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpt2yedf7r: /tmp/tmpt2yedf7r.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    long max_count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count < 0) {\n            count = 0;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    long max_count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        }\n        else {\n            count--;\n        }\n        if(count > max_count) {\n            max_count = count;\n        }\n    }\n    return max_count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpqw7pzn48: /tmp/tmpqw7pzn48.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong max_length = 0;\n\tlong count_0 = 0;\n\tlong count_1 = 0;\n\tfor(long i = 0; i < string.length(); i++) {\n\t\tif(string[i] == '0') {\n\t\t\tcount_0++;\n\t\t}\n\t\telse {\n\t\t\tcount_1++;\n\t\t}\n\t\tif(count_0 == count_1) {\n\t\t\tmax_length = std::max(max_length, count_0 + count_1);\n\t\t}\n\t}\n\tcount_0 = 0;\n\tcount_1 = 0;\n\tfor(long i = string.length() - 1; i >= 0; i--) {\n\t\tif(string[i] == '0') {\n\t\t\tcount_0++;\n\t\t}\n\t\telse {\n\t\t\tcount_1++;\n\t\t}\n\t\tif(count_0 == count_1) {\n\t\t\tmax_length = std::max(max_length, count_0 + count_1);\n\t\t}\n\t}\n\treturn max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp7y2yvpa2: /tmp/tmp7y2yvpa2.cpp:36: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_zero++;\n        }\n        else {\n            count_one++;\n        }\n        if(count_zero == count_one) {\n            length = count_zero + count_one;\n            if(length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpuw56j2tt: /tmp/tmpuw56j2tt.cpp:27: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp9pvug6g5: /tmp/tmp9pvug6g5.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(auto i = string.begin(); i != string.end(); i++) {\n        if(*i == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpnv21bncj: /tmp/tmpnv21bncj.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for (long i = string.length() - 1; i >= 0; i--) {\n        if (string[i] == '0') {\n            count_0++;\n        } else {\n            count_1++;\n        }\n        if (count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpjged6wfc: /tmp/tmpjged6wfc.cpp:34: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long max_length = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            length++;\n        } else {\n            length--;\n        }\n        if(length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp4ndlvphw: /tmp/tmp4ndlvphw.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i=0;i<string.length();i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp6997y44q: /tmp/tmp6997y44q.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmpiu2z5786: /tmp/tmpiu2z5786.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count++;\n        } else {\n            count--;\n        }\n        if(count == 0) {\n            length = std::max(length, i + 1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp8o09b4zj: /tmp/tmp8o09b4zj.cpp:21: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpnrvclxp9: /tmp/tmpnrvclxp9.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            length++;\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpdvq9wjqt: /tmp/tmpdvq9wjqt.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.size();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123010,
      "stdout": "",
      "stderr": "tmp7wluhlml: /tmp/tmp7wluhlml.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_0 = 0;\n    long count_1 = 0;\n    for(long i = 0; i < string.length(); i++) {\n        if(string[i] == '0') {\n            count_0++;\n        }\n        else {\n            count_1++;\n        }\n        if(count_0 == count_1) {\n            length = std::max(length, count_0 + count_1);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp286c4h5w: /tmp/tmp286c4h5w.cpp:23: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = 0;\n    long count_zero = 0;\n    long count_one = 0;\n    for (long i = 0; i < string.length(); i++) {\n        if (string[i] == '0') {\n            count_zero++;\n        } else {\n            count_one++;\n        }\n        if (count_zero == count_one) {\n            length = std::max(length, count_zero + count_one);\n        }\n    }\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpq5720yhc: /tmp/tmpq5720yhc.cpp:22: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = string.length();\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmps0jvzftx: /tmp/tmps0jvzftx.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpciv3v228: /tmp/tmpciv3v228.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long count = 0;\n  for (int i = 0; i < string.size(); i++) {\n    if (string[i] == '1') {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmprdeyp1dr: /tmp/tmprdeyp1dr.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] == '1') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpucxg2d86: /tmp/tmpucxg2d86.cpp:15: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n\tlong length = string.length();\n\treturn length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpoqnhav7u: /tmp/tmpoqnhav7u.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n  long length = 0;\n  long count_0 = 0;\n  long count_1 = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i] == '0') {\n      count_0++;\n    }\n    else {\n      count_1++;\n    }\n    if(count_0 == count_1) {\n      length = std::max(length, count_0 + count_1);\n    }\n  }\n  return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmp5i2qonis: /tmp/tmp5i2qonis.cpp:23: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlong find_length(std::string string) {\n    long length = string.length();\n    return length;\n}\nint main() {\n    auto candidate = find_length;\n    assert(candidate((\"11000010001\")) == (6));\n    assert(candidate((\"10111\")) == (1));\n    assert(candidate((\"11011101100101\")) == (2));\n}\n",
      "timestamp": 1665509985,
      "stdout": "",
      "stderr": "tmpxtwir17v: /tmp/tmpxtwir17v.cpp:10: int main(): Assertion `candidate((\"11000010001\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}