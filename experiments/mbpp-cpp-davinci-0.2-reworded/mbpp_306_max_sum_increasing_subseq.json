{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        long sum = max_sum_increasing_subseq(a, n, k, k) + a[index];\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n        if (i == k) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(i == k) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse if(a[i] < a[k]) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum = sum + a[i];\n\t}\n\tmax = sum;\n\tfor (long i = k; i < n; i++) {\n\t\tsum = sum + a[i] - a[i - k];\n\t\tif (sum > max) {\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    max_sum = sum + a[k];\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    if(k == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[k] > a[index]) {\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, k, k+1);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index, k+1);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index > k) return 0;\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    return std::max(sum1, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(k > index) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, k, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum2);",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif (a[index] < a[k]) {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\telse {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn sum;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif(a[index] < a[k]) {\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if(index == n-1) {\n        if(k == n-1) {\n            return a[index];\n        }\n        return 0;\n    }\n    long ans = 0;\n    if(k == index) {\n        ans = a[index];\n    }\n    for(long i = index+1; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n        }\n    }\n    return ans;",
    "\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t\tif(sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = index; i < k; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tmax_sum = sum;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t\telse {\n\t\t\tsum = sum - a[i - 1] + a[i];\n\t\t}\n\t\tif (sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n        if(a[i] < a[k]){\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] < a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "\tif(index >= n) {\n\t\treturn 0;\n\t}\n\tif(index == k) {\n\t\treturn a[index];\n\t}\n\tlong ans = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] > a[index]) {\n\t\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t}\n\t}\n\treturn ans;",
    "    // Write your code here\n    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index + 1 == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    if (index < k) {\n        return sum + a[index];\n    } else {\n        return sum;\n    }",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    if (index >= n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if (k > index) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long include = 0;\n    if(a[index] < a[k]) {\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return max_sum;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong include = 0;\n\tif(a[index] < a[k]) {\n\t\tinclude = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\tlong exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn std::max(include, exclude);",
    "    if (index == n) {\n        return 0;\n    }\n    if (k == n) {\n        return 0;\n    }\n    long ans = 0;\n    if (a[index] < a[k]) {\n        ans = max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k];\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index, k + 1));\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return ans;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index + 1 == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum1);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;",
    "    // Write your code here\n    long sum=0;\n    for(long i=index;i<k;i++)\n    {\n        sum+=a[i];\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_sum_k = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    max_sum_k = max_sum + a[index];\n    if (max_sum_k > max_sum) {\n        max_sum = max_sum_k;\n    }\n    return max_sum;",
    "    if(index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for(long i = index + 1; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            } else {\n                sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n            }\n        }\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long include = 0;\n    if (a[index] < a[k]) {\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);",
    "\t// Write your code here\n\tif (index == n - 1) {\n\t\treturn a[index];\n\t}\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tsum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\tif (a[k] > a[index]) {\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, k, k);\n\t\tif (sum > max) {\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;",
    "    if (index == n) {\n        return 0;\n    }\n    if (index > k) {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    if (index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] < a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, k, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++){\n        if(a[i] > a[k]){\n            max = max_sum_increasing_subseq(a, n, k, i);\n        }\n    }\n    if(max > sum){\n        return max;\n    }\n    else{\n        return sum;\n    }",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if (a[index] < a[k]) {\n        sum1 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t}\n\treturn sum;",
    "    // Write your code here\n    if(index == n-1)\n        return a[index];\n    long max_sum = 0;\n    for(long i = index+1; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum)\n                max_sum = sum;\n        }\n    }\n    return max_sum;",
    "  // Write your code here\n  long sum = 0;\n  long max = 0;\n  for(long i = 0; i < index; i++) {\n    if(a[i] < a[k]) {\n      sum = sum + a[i];\n    }\n  }\n  sum = sum + a[k];\n  for(long i = index; i < n; i++) {\n    if(a[i] < a[k]) {\n      max = max + a[i];\n    }\n  }\n  if(max > sum) {\n    return max;\n  }\n  else {\n    return sum;\n  }",
    "    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "\t// Write your code here\n\tlong sum = 0;\n\tfor(long i = index; i < k; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if (index >= n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i <= k; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long including_k = 0;\n    if(k > index) {\n        including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including_k, excluding_k);",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum + a[k];",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "\tlong sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\treturn sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\treturn sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    return std::max(sum1, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long including_k = 0;\n    if(k < n) {\n        including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long excluding_k = max_sum_increasing_subseq(a, n, index + 1, index + 1);\n    return std::max(including_k, excluding_k);",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    if (index == k) {\n        return sum + a[index];\n    }\n    return sum;",
    "    if(index == n)\n        return 0;\n    long sum_including_k = 0;\n    if(a[index] < a[k])\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i=0;i<n;i++)\n    {\n        if(i<index)\n        {\n            if(a[i]<a[index])\n            {\n                sum+=a[i];\n            }\n        }\n        else if(i==index)\n        {\n            sum+=a[i];\n        }\n        else if(i>index)\n        {\n            if(i<k)\n            {\n                if(a[i]<a[k])\n                {\n                    sum+=a[i];\n                }\n            }\n            else if(i==k)\n            {\n                sum+=a[i];\n            }\n            else if(i>k)\n            {\n                if(a[i]<a[k])\n                {\n                    sum+=a[i];\n                }\n            }\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;",
    "\t// Write your code here\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n\tlong sum2 = 0;\n\tif (index < k) {\n\t\tsum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\treturn std::max(sum1, sum2);",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = sum + a[i];\n\t\t}\n\t}\n\tsum = sum + a[k];\n\treturn sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if (index == k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = k+1; i < n; i++){\n        if(a[i] > a[k]){\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long max_sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(max_sum_including_k, max_sum_excluding_k);",
    "    if (index == n) {\n        return 0;\n    }\n    long including = 0;\n    if (a[index] < a[k]) {\n        including = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including, excluding);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong max_sum_till_index = 0;\n\tlong max_sum_including_k = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[index]) {\n\t\t\tmax_sum_till_index = std::max(max_sum_till_index, max_sum_increasing_subseq(a, n, i, index));\n\t\t}\n\t}\n\tmax_sum_till_index += a[index];\n\tfor (long i = k; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum_including_k = std::max(max_sum_including_k, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\tmax_sum_including_k += a[k];\n\tmax_sum = std::max(max_sum_till_index, max_sum_including_k);\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "\t// Write your code here\n\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t}\n\treturn sum;",
    "    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return a[k] + sum;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(max_sum < sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index == k) {\n        max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return max_sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn sum;",
    "    // Write your code here\n    long sum=0;\n    long max_sum=0;\n    for(long i=index;i<k;i++)\n    {\n        sum+=a[i];\n        if(max_sum<sum)\n        {\n            max_sum=sum;\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        long sum = max_sum_increasing_subseq(a, n, k + 1, k) + a[index];\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    // Write your code here\n    if(index == n)\n        return 0;\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];",
    "    if (index >= n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    return std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k + 1));",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_sum_k = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[index]){\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n    }\n    max_sum_k = max_sum + a[index];\n    return max_sum_k;",
    "    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    if (k == n) {\n        return 0;\n    }\n    if (a[index] > a[k]) {\n        return std::max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }",
    "    // Write your code here\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for(long i = k; i < n; i++) {\n        sum = sum - a[i - k] + a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    if(k == n) {\n        return 0;\n    }\n    long ans = 0;\n    if(a[index] < a[k]) {\n        ans = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k + 1));\n    return ans;",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tif (sum > max) {\n\t\tmax = sum;\n\t}\n\treturn max;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        max_sum += a[index];\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];",
    "\t// Write your code here\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tfor (long i = k + 1; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, i));\n\t\t}\n\t}\n\treturn sum + max_sum;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tmax_sum = sum + a[k];\n\treturn max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum + a[i] > max_sum) {\n                max_sum = sum + a[i];\n            }\n        }\n    }\n    return max_sum;",
    "    if(index == n) return 0;\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n-1) {\n        if(k == n-1) {\n            return a[n-1];\n        }\n        return 0;\n    }\n    if(k == n-1) {\n        return a[n-1];\n    }\n    if(k < index) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n    long sum2 = max_sum_increasing_subseq(a, n, index+1, k+1);\n    if(a[index] < a[k]) {\n        return std::max(sum1, sum2+a[index]);\n    }\n    return sum1;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index > k) {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    if(index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long option1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long option2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(option1, option2);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(sum > max) {\n            max = sum;\n        }\n    }\n    return max;",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum + a[index];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long temp = max_sum_increasing_subseq(a, n, i, k);\n            if(temp > sum) {\n                sum = temp;\n            }\n        }\n    }\n    if(a[index] < a[k]) {\n        sum += a[k];\n    }\n    return sum;",
    "\tif (index == n - 1) {\n\t\treturn a[index];\n\t}\n\tlong sum = 0;\n\tfor (long i = index + 1; i <= k; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn a[index] + sum;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum_including_kth_element = 0;\n    if(a[index] < a[k]) {\n        sum_including_kth_element = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long sum_excluding_kth_element = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_kth_element, sum_excluding_kth_element);",
    "    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index+1, k);\n    return std::max(sum1, sum2);",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(i == k) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t} else {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    else {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long include_k = 0;\n    if(k > index) {\n        include_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include_k, exclude_k);",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long j = index + 1; j <= n; j++) {\n        if(a[j] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, j, k) + a[index]);\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return ans;",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];",
    "    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = a[index];\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            if (i == k) {\n                max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            } else {\n                max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            }\n        }\n    }\n    return max_sum;",
    "    long sum = 0;\n    for (long i = index; i < k; ++i) {\n        sum += a[i];\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long max_sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(max_sum_including_k, max_sum_excluding_k);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max){\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n-1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[k];",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif(a[index] < a[k]) {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\telse {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn sum;",
    "\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn sum;",
    "    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);",
    "    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if (index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if (a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);",
    "    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;",
    "    if (index == n) {\n        return 0;\n    }\n    long sum_including_kth_element = 0;\n    if (a[index] < a[k]) {\n        sum_including_kth_element = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_kth_element = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_kth_element, sum_excluding_kth_element);",
    "    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        long max_sum_ending_here = 0;\n        for(long j = index; j < i; j++) {\n            if(a[j] < a[i]) {\n                max_sum_ending_here = std::max(max_sum_ending_here, max_sum_increasing_subseq(a, n, j, k));\n            }\n        }\n        max_sum_ending_here += a[i];\n        max_sum = std::max(max_sum, max_sum_ending_here);\n    }\n    return max_sum;",
    "\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tmax_sum = sum;\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long including = 0;\n    if(a[index] < a[k]) {\n        including = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including, excluding);",
    "    if (index > n) {\n        return 0;\n    }\n    if (index == n) {\n        return a[index];\n    }\n    if (index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[k]){\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));",
    "\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];",
    "\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] > a[k]) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;",
    "    if(index == n) return 0;\n    if(k == n) return 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k+1) + a[k]);\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long include = a[index];\n    long exclude = 0;\n    if(index < k) {\n        include += max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);",
    "    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;",
    "    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return sum;",
    "\t// Write your code here\n\tstd::vector<long> dp(n, 0);\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max_sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tmax_sum = std::max(max_sum, dp[i]);\n\t}\n\treturn max_sum;"
  ]
}