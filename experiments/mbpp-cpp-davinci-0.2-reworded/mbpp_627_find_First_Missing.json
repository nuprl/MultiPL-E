{
  "name": "mbpp_627_find_First_Missing",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid)\n                return mid + 1;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    // write your code here\n    int n = array.size();\n    if(n==0)\n        return 1;\n    int i=0;\n    while(i<n)\n    {\n        if(array[i]!=i+1)\n            return i+1;\n        i++;\n    }\n    return i+1;",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > n-1) {\n        return n+1;\n    }\n    return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            high = mid - 1;\n        }\n    }\n    return low + 1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            r = mid - 1;\n        }\n    }\n    return l + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "  long n = array.size();\n  long l = 0;\n  long r = n-1;\n  long mid;\n  while(l<=r) {\n    mid = l + (r-l)/2;\n    if(array[mid] == mid) {\n      l = mid+1;\n    } else {\n      r = mid-1;\n    }\n  }\n  return l;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    if(n == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;"
  ]
}