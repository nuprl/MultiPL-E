{
  "name": "mbpp_627_find_First_Missing",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest missing number from a sorted vector of natural numbers.\nlong find_First_Missing(std::vector<long> array) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_First_Missing;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)6, (long)9}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)5, (long)8, (long)9}))) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid)\n                return mid + 1;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    // write your code here\n    int n = array.size();\n    if(n==0)\n        return 1;\n    int i=0;\n    while(i<n)\n    {\n        if(array[i]!=i+1)\n            return i+1;\n        i++;\n    }\n    return i+1;",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > n-1) {\n        return n+1;\n    }\n    return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            high = mid - 1;\n        }\n    }\n    return low + 1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else if (array[mid] > mid + 1) {\n            r = mid - 1;\n        }\n    }\n    return l + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "  long n = array.size();\n  long l = 0;\n  long r = n-1;\n  long mid;\n  while(l<=r) {\n    mid = l + (r-l)/2;\n    if(array[mid] == mid) {\n      l = mid+1;\n    } else {\n      r = mid-1;\n    }\n  }\n  return l;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    if(n == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0, high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    }\n    if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = low + (high - low) / 2;\n    if (array[mid] != mid && array[mid - 1] == mid - 1) {\n      return mid;\n    } else if (array[mid] != mid) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n;\n  }\n  return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  long mid;\n  while (low <= high) {\n    mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    }\n    else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    }\n    else {\n      low = mid + 1;\n    }\n  }\n  return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else if(array[mid] > mid) {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "  // Implement this placeholder.\n  return 0;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] == m + 1) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    int n = array.size();\n    int l = 0, r = n-1;\n    while(l <= r) {\n        int mid = l + (r-l)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            r = mid-1;\n        }\n        else\n            l = mid+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1) {\n                return m;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    int len = array.size();\n    int low = 0;\n    int high = len - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low == len) {\n        return len + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == n) {\n        return n + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    long mid = 0;\n    while (l <= r) {\n        mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    long n = array.size();\n    long left = 0;\n    long right = n - 1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            right = mid - 1;\n        }\n        else {\n            left = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return mid + 1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return n + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1) {\n                return m;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        } else {\n            l = mid + 1;\n        }\n    }\n    return n + 1;",
    "  long low = 0;\n  long high = array.size() - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = (low + high) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return mid + 1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            r = mid - 1;\n        else\n            l = mid + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 1;\n    }",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1) {\n            if (m == 0 || array[m - 1] == m) {\n                return m + 1;\n            }\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return n + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return low + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    int i = 0;\n    while(array[i] == i+1) {\n        i++;\n    }\n    return i+1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] == mid) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l;",
    "    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    int n = array.size();\n    if(n == 0)\n        return 1;\n    if(array[0] != 1)\n        return 1;\n    for(int i = 1; i < n; i++) {\n        if(array[i] - array[i-1] > 1)\n            return array[i-1] + 1;\n    }\n    return array[n-1] + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    if (low > high)\n        return mid + 1;\n    return -1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            r = mid - 1;\n        else\n            l = mid + 1;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid) {\n                return mid+1;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    for (long i = 0; i < n; i++) {\n        if (array[i] != i) {\n            return i;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    int mid;\n    while(low<=high) {\n        mid = (low+high)/2;\n        if(array[mid] == mid) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    if (array[n - 1] != n) {\n        return n;\n    }\n    if (array[0] != 1) {\n        return 1;\n    }\n    long l = 0, h = n - 1;\n    while (l <= h) {\n        long mid = (l + h) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        }\n        else {\n            h = mid - 1;\n        }\n    }\n    return l + 1;",
    "    long n = array.size();\n    for(long i = 0; i < n; i++) {\n        if(array[i] != i) {\n            return i;\n        }\n    }\n    return n;",
    "    long size = array.size();\n    if (size == 0) {\n        return 1;\n    }\n    if (size == 1) {\n        if (array[0] == 1) {\n            return 2;\n        } else {\n            return 1;\n        }\n    }\n    long start = 0;\n    long end = size - 1;\n    while (start <= end) {\n        long mid = (start + end) / 2;\n        if (array[mid] == mid + 1) {\n            start = mid + 1;\n        } else {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return start + 1;",
    "    long n = array.size();\n    if(array[n-1] == n)\n        return n+1;\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;",
    "    long n = array.size();\n    long l = 0, r = n-1;\n    while(l <= r) {\n        long mid = l + (r-l)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            r = mid-1;\n        } else {\n            l = mid+1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    if (array.size() == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] - array[i - 1] > 1)\n            return array[i - 1] + 1;\n    }\n    return array[n - 1] + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    if (n == 0) {\n        return 1;\n    }\n    if (array[0] != 1) {\n        return 1;\n    }\n    for (long i = 0; i < n; i++) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    return n + 1;",
    "  long n = array.size();\n  for (long i = 0; i < n; i++) {\n    if (array[i] != i) {\n      return i;\n    }\n  }\n  return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 1;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if (array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return -1;",
    "    int i = 0;\n    while (i < array.size() && array[i] == i + 1) {\n        i++;\n    }\n    return i + 1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;",
    "  long low = 0;\n  long high = array.size() - 1;\n  long mid = 0;\n  while (low <= high) {\n    mid = (low + high) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low > array.size() - 1) {\n    return array.size() + 1;\n  }\n  return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid)\n            return mid+1;\n        else if(array[mid] != mid+1)\n            high = mid-1;\n        else\n            low = mid+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }",
    "    long n = array.size();\n    if (n == 0) return 1;\n    if (array[0] != 1) return 1;\n    if (array[n - 1] == n) return n + 1;\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = (l + r) / 2;\n        if (array[mid] == mid + 1) {\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return l + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    int mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] != array[i - 1] + 1)\n            return array[i - 1] + 1;\n    }\n    return array[n - 1] + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        } else if(array[mid] != mid+1) {\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low == n) {\n        return n+1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid)\n                return mid + 1;\n            else\n                high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        } else {\n            low = mid+1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    if (n == 0)\n        return 1;\n    if (array[0] != 1)\n        return 1;\n    for (long i = 1; i < n; i++) {\n        if (array[i] - array[i - 1] != 1) {\n            return array[i - 1] + 1;\n        }\n    }\n    return array[n - 1] + 1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0, high = n-1;\n    while (low <= high) {\n        int mid = low + (high-low)/2;\n        if (array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if (array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == array.size()) {\n        return array.size() + 1;\n    }\n    return 1;",
    "  long n = array.size();\n  long low = 0;\n  long high = n - 1;\n  while (low <= high) {\n    long mid = low + (high - low) / 2;\n    if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n      return mid + 1;\n    } else if (array[mid] != mid + 1) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  if (low == n) {\n    return n + 1;\n  }\n  return 1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return n;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid - 1] == mid - 1)\n                return mid;\n            high = mid - 1;\n        }\n        else\n            low = mid + 1;\n    }\n    return n;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "  // Write your code here\n  int n = array.size();\n  int low = 0;\n  int high = n-1;\n  int mid;\n  while(low <= high){\n    mid = (low+high)/2;\n    if(array[mid] == mid+1){\n      low = mid+1;\n    }\n    else{\n      high = mid-1;\n    }\n  }\n  return low+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1) {\n                return mid;\n            }\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if (low > high) {\n        return mid + 2;\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0, high = n-1;\n    int mid;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return n + 1;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low;\n    }",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;",
    "    long n = array.size();\n    if (n == 0) {\n        return 1;\n    }\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if (array[mid] == mid + 1) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    if (low > high) {\n        return low + 1;\n    }",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high){\n        mid = (low + high)/2;\n        if(array[mid] == mid)\n            low = mid + 1;\n        else\n            high = mid - 1;\n    }\n    return low;",
    "    int n = array.size();\n    int low = 0;\n    int high = n - 1;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = (low + high)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return n+1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid;\n    while(low <= high) {\n        mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;",
    "    long n = array.size();\n    long l = 0, r = n - 1;\n    while (l <= r) {\n        long mid = l + (r - l) / 2;\n        if (array[mid] != mid + 1) {\n            if (mid == 0 || array[mid - 1] == mid) {\n                return mid + 1;\n            }\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return n + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low<=high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid) {\n            if(mid == 0 || array[mid-1] == mid-1)\n                return mid;\n            else\n                high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return n;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m) {\n            if (m == 0 || array[m - 1] == m - 1)\n                return m;\n            else\n                r = m - 1;\n        }\n        else\n            l = m + 1;\n    }\n    return n;",
    "    long start = 0;\n    long end = array.size() - 1;\n    while (start <= end) {\n        long mid = start + (end - start) / 2;\n        if (array[mid] == mid) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return start;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    if(low > high) {\n        return low+1;\n    }",
    "    long n = array.size();\n    if(n == 0)\n        return 1;\n    if(n == 1)\n        return array[0] == 1 ? 2 : 1;\n    long low = 0, high = n - 1;\n    while(low <= high) {\n        long mid = low + (high - low) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid)\n            return mid + 1;\n        else if(array[mid] != mid + 1)\n            high = mid - 1;\n        else\n            low = mid + 1;\n    }\n    return n + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    if (low == n) {\n        return n + 1;\n    }\n    return 1;",
    "    long n = array.size();\n    long low = 0, high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long n = array.size();\n    long l = 0;\n    long r = n - 1;\n    while (l <= r) {\n        long m = l + (r - l) / 2;\n        if (array[m] != m + 1 && array[m - 1] == m) {\n            return m + 1;\n        }\n        if (array[m] != m + 1) {\n            r = m - 1;\n        }\n        else {\n            l = m + 1;\n        }\n    }\n    if (l == n) {\n        return n + 1;\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        if(array[mid] != mid+1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    if(low > high) {\n        return mid+2;\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid;\n    while(low <= high) {\n        mid = (low + high) / 2;\n        if(array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid + 1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid + 1) {\n            high = mid - 1;\n        }\n        else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long low = 0;\n    long high = array.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return mid + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low <= high) {\n        mid = (low + high)/2;\n        if(array[mid] == mid) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high - low)/2;\n        if(array[mid] != mid+1 && array[mid-1] == mid) {\n            return mid+1;\n        }\n        else if(array[mid] != mid+1) {\n            high = mid-1;\n        }\n        else {\n            low = mid+1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    long mid;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (array[mid] == mid + 1) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low + 1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) {\n        long mid = low + (high - low) / 2;\n        if (array[mid] != mid + 1 && array[mid - 1] == mid) {\n            return mid + 1;\n        } else if (array[mid] != mid + 1) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;",
    "    long n = array.size();\n    long low = 0;\n    long high = n-1;\n    while(low <= high) {\n        long mid = low + (high-low)/2;\n        if(array[mid] != mid+1) {\n            if(mid == 0 || array[mid-1] == mid)\n                return mid+1;\n            high = mid-1;\n        }\n        else\n            low = mid+1;\n    }\n    return -1;",
    "    long low=0;\n    long high=array.size()-1;\n    while(low<=high){\n        long mid=low+(high-low)/2;\n        if(array[mid]!=mid+1 && array[mid-1]==mid){\n            return mid+1;\n        }\n        else if(array[mid]!=mid+1){\n            high=mid-1;\n        }\n        else{\n            low=mid+1;\n        }\n    }\n    return -1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low<=high) {\n        int mid = (low+high)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        } else {\n            high = mid-1;\n        }\n    }\n    return low+1;",
    "    int n = array.size();\n    int low = 0;\n    int high = n-1;\n    while(low <= high) {\n        int mid = low + (high-low)/2;\n        if(array[mid] == mid+1) {\n            low = mid+1;\n        }\n        else {\n            high = mid-1;\n        }\n    }\n    return low+1;"
  ]
}