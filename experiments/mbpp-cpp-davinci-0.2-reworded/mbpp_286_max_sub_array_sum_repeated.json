{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(int i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_so_far = 0;\n    for(int i = n - 1; i >= 0; i--) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        min_suffix_sum = min_suffix_sum + a[i];\n        if(min_suffix_sum < min_so_far) {\n            min_so_far = min_suffix_sum;\n        }\n    }\n    long max_wrap_sum = max_wrap + min_so_far;\n    if(max_wrap_sum > max_so_far) {\n        max_so_far = max_wrap_sum;\n    }\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > 0) {\n            sum = 0;\n        }\n        min_wrap = std::min(min_wrap, sum);\n    }\n    min_wrap = -min_wrap;\n    long max_wrap_sum = max_wrap + min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap_sum > 0) {\n        return std::max(max_sum, max_wrap_sum * (k - 1) + max_sum);\n    } else {\n        return std::max(max_sum, max_wrap_sum * k);\n    }",
    "    long max_so_far = 0, max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);",
    "    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    return max_so_far + (k - 2) * sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;",
    "\tlong max_so_far = 0, max_ending_here = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tmax_ending_here = max_ending_here + a[i];\n\t\tif (max_ending_here < 0)\n\t\t\tmax_ending_here = 0;\n\t\tif (max_so_far < max_ending_here)\n\t\t\tmax_so_far = max_ending_here;\n\t}\n\tlong max_wrap = 0, i;\n\tfor (i = 0; i < n; i++) {\n\t\tmax_wrap += a[i];\n\t\ta[i] = -a[i];\n\t}\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n\tif (max_wrap > max_so_far)\n\t\tmax_so_far = max_wrap;\n\treturn max_so_far * k;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_so_far = std::max(max_sum_so_far, sum);\n        if(sum < 0) {\n            sum = 0;\n        }\n    }\n    if(max_sum_so_far == 0) {\n        return *std::max_element(a.begin(), a.end());\n    }\n    max_sum = max_sum_so_far;\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = sum_of_all_elements * (k - 2);\n    max_wrap_sum += max_sum_so_far;\n    max_sum = std::max(max_sum, max_wrap_sum);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap) * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (sum > 0) {\n        max_sum = sum * k;\n    } else {\n        max_sum = max_element;\n    }\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        if (suffix_sum > max_sum) {\n            max_sum = suffix_sum;\n        }\n    }\n    return max_sum;",
    "    long max_so_far = INT_MIN;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    if (sum > 0)\n        return max(max_so_far, (max_so_far % sum) + sum * (k - 2));\n    else\n        return max(max_so_far, max_so_far % sum);",
    "    long max_so_far = 0, max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    if (k == 1) {\n        max_sum = max_sum - sum;\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    max_sum = std::max(max_sum, total_sum * k);\n    max_sum = std::max(max_sum, total_sum + prefix_sum * (k - 2) + suffix_sum);\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 2);\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_2 = 0;\n    long max_ending_here_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if (max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if (max_sum_2 < max_ending_here_2) {\n            max_sum_2 = max_ending_here_2;\n        }\n    }\n    max_sum_2 = sum + max_sum_2;\n    long max_sum_3 = 0;\n    long max_ending_here_3 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_3 = max_ending_here_3 + a[i];\n        if (max_ending_here_3 < 0) {\n            max_ending_here_3 = 0;\n        }\n        if (max_sum_3 < max_ending_here_3) {\n            max_sum_3 = max_ending_here_3;\n        }\n    }\n    max_sum_3 = sum + max_sum_3;\n    long max_sum_4 = 0;\n    long max_ending_here_4 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_4 = max_ending_here",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    if (sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_sum, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if(sum < 0) {\n        max_sum = max_so_far;\n    } else {\n        max_sum = std::max(max_so_far, sum * k);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        sum += a[i];\n    }\n    if(sum > 0) {\n        max_sum = max_so_far + (k - 2) * sum;\n    }\n    else {\n        max_sum = max_so_far;\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);",
    "    long sum = 0;\n    long max_sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        if(max_wrap_sum < 0) {\n            max_wrap_sum = 0;\n        }\n        max_wrap = std::max(max_wrap, max_wrap_sum);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element*k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far*k;\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = std::max(max_sum, sum*k);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = max_so_far * (k - 2);\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum += max_so_far;\n    return max_sum;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum > min_wrap) {\n            min_wrap = curr_sum;\n        }\n    }\n    max_wrap = max_wrap + min_wrap;\n    if (max_wrap > max_sum) {\n        max_sum = std::max(max_sum, (max_wrap * (k - 1)) + max_sub_array_sum_repeated(a, n, 1));\n    }\n    return max_sum;",
    "    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (k == 1) {\n        return max_so_far;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_element = a[0];\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        if (max_sum_so_far < 0) {\n            max_sum_so_far = 0;\n        }\n        if (max_sum_so_far > max_sum) {\n            max_sum = max_sum_so_far;\n        }\n        if (a[i] > max_element) {\n            max_element = a[i];\n        }\n    }\n    if (max_sum == 0) {\n        return max_element * k;\n    }\n    long sum_of_all_elements = 0;\n    for (long i = 0; i < n; i++) {\n        sum_of_all_elements += a[i];\n    }\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        if (prefix_sum < 0) {\n            prefix_sum = 0;\n        }\n        if (prefix_sum > max_sum) {\n            max_sum = prefix_sum;\n        }\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        if (suffix_sum < 0) {\n            suffix_sum = 0;\n        }\n        if (suffix_sum > max_sum) {\n            max_sum = suffix_sum;\n        }\n    }\n    if (sum_of_all_elements > 0) {\n        return max_sum + (k - 2) * sum_of_all_elements;\n    }\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return std::max(max_so_far, (max_so_far + sum * (k - 2)));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    return std::max(ans1, std::max(ans2, std::max(ans3, ans4)));",
    "    long sum = 0;\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for (int i = 0; i < n; i++) {\n        sum += (k - 1) * a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    max_sum = max_sum + (k - 2) * sum;\n    return max_sum;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if(k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    long max_wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    max_wrap_sum += max_sum;\n    if (max_wrap_sum > max_sum && k > 1) {\n        max_sum = max_wrap_sum;\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here > max_wrap)\n            max_wrap = max_ending_here;\n    }\n    return std::max(max_so_far, max_wrap * k);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0) {\n        return *std::max_element(a.begin(), a.end());\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap = sum + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far * k);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_wrap, max_so_far + (k - 2) * max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        min_wrap = std::min(min_wrap, sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    min_wrap = -min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap > 0) {\n        return std::max(max_sum, max_wrap + min_wrap + max_wrap * (k - 2));\n    }\n    return std::max(max_sum, max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = max_so_far + (max_wrap * (k - 2));\n    return max_so_far;",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if(sum < 0) {\n        return max_so_far;\n    }\n    max_sum = max_so_far;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + sum - n * a[n - i - 1];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap * k;\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0)\n        return max_element * k;\n    for (int i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0)\n            max_so_far = 0;\n        if (max_sum < max_so_far)\n            max_sum = max_so_far;\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    long max_wrap_so_far = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap_so_far = max_wrap_so_far + a[i];\n        if (max_wrap_so_far < 0)\n            max_wrap_so_far = 0;\n        if (max_wrap_sum < max_wrap_so_far)\n            max_wrap_sum = max_wrap_so_far;\n    }\n    max_wrap = max_wrap + max_wrap_sum;\n    if (k == 1)\n        return max_sum;\n    return std::max(max_wrap, max_sum + (k - 2) * max_wrap + max_sum);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; ++i) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; ++i) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; ++i) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = std::max(max_so_far, max_wrap + max_ending_here_wrap);\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;",
    "    // Write your code here\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap += a[i];\n        if(max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if(max_so_far < max_ending_here_wrap) {\n            max_so_far = max_ending_here_wrap;\n        }\n    }\n    max_so_far = max(max_so_far, max_wrap * (k - 2) + max_ending_here_wrap);\n    return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    return ans;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > max_sum_so_far) {\n            max_sum_so_far = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    max_sum = max_sum_so_far;\n    long sum_of_all_elements = sum;\n    for (long i = 0; i < n; i++) {\n        sum_of_all_elements += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > max_sum_so_far) {\n            max_sum_so_far = sum;\n        }\n        if (sum < 0) {\n            sum = 0;\n        }\n    }\n    max_sum = std::max(max_sum, max_sum_so_far);\n    max_sum = std::max(max_sum, sum_of_all_elements * k);\n    if (max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        max_sum *= k;\n    }\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (sum > 0) {\n        return max(max_so_far, (sum * k - sum) + max_element);\n    }\n    else {\n        return max(max_so_far, max_element);\n    }",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans = std::max(ans1, std::max(ans2, std::max(ans3, std::max(ans4, ans5))));\n    return ans * k;",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if (total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0)\n            max_wrap_ending_here = 0;\n        if (max_wrap < max_wrap_ending_here)\n            max_wrap = max_wrap_ending_here;\n    }\n    max_wrap = max_wrap + max_wrap;\n    if (k == 1)\n        return max_so_far;\n    else\n        return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            j = i + 1;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = std::max(max_sum, sum + max_so_far);\n    return max_sum;",
    "    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if(max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if(max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    return std::max(max_so_far, max_wrap * (k - 1));",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        return std::max(max_sum, sum * (k - 2) + max_sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_sum_ending_here = max_sum_ending_here + a[i];\n        if(max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if(max_sum < max_sum_ending_here) {\n            max_sum = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum + sum;\n    return max_sum * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    if (sum > 0) {\n        max_sum = max_sum + (k - 2) * sum;\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0)\n            max_wrap_ending_here = 0;\n        if (max_wrap < max_wrap_ending_here)\n            max_wrap = max_wrap_ending_here;\n    }\n    return std::max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, curr_sum);\n    }\n    curr_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        curr_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, curr_sum);\n    }\n    for (long i = 0; i < n; i++) {\n        total_sum += a[i];\n    }\n    long ans = std::max(max_sum, std::max(max_prefix_sum + max_suffix_sum + (k - 2) * total_sum, max_prefix_sum + (k - 1) * total_sum));\n    return ans;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans = std::max(ans1, ans2);\n    ans = std::max(ans, ans3);\n    ans = std::max(ans, ans4);\n    ans = std::max(ans, ans5);\n    return ans * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = INT_MIN, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long min_so_far = 0, min_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if (min_ending_here > 0)\n            min_ending_here = 0;\n        if (min_so_far > min_ending_here)\n            min_so_far = min_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++)\n        sum += a[i];\n    long ans1 = max_so_far;\n    long ans2 = sum * (k - 2) + max_so_far;\n    long ans3 = sum * (k - 2) - min_so_far;\n    return std::max(ans1, std::max(ans2, ans3));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i = 0;\n    long j = 0;\n    for(i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long sum = 0;\n    for(i = 0; i < n; i++) {\n        sum = sum + a[i];\n    }\n    long min_sum = 0;\n    long min_so_far = 0;\n    long min_ending_here = 0;\n    for(i = 0; i < n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    min_sum = min_so_far * k;\n    if(k > 1) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return std::max(max_sum, sum + min_sum);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    max_so_far = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    return max_sum;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    if (sum_of_all_elements > 0) {\n        return std::max(max_sum, max_so_far + sum_of_all_elements * (k - 2));\n    }\n    return std::max(max_sum, max_so_far);",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum * k;",
    "    long max_sum = 0, max_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long min_sum = 0, min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_so_far = min_so_far + a[i];\n        if(min_so_far > 0) {\n            min_so_far = 0;\n        }\n        if(min_sum > min_so_far) {\n            min_sum = min_so_far;\n        }\n    }\n    long ans1 = max_sum;\n    long ans2 = sum + min_sum;\n    long ans3 = sum + min_sum + max_sum;\n    return std::max(ans1, std::max(ans2, ans3));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        if(max_suffix_sum < min_so_far) {\n            min_so_far = max_suffix_sum;\n        }\n    }\n    long max_prefix_sum = 0;\n    long min_prefix_sum = 0;\n    long min_ending_here = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        min_prefix_sum = min_prefix_sum + a[i];\n        if(min_prefix_sum < min_suffix_sum) {\n            min_suffix_sum = min_prefix_sum;\n        }\n        if(min_prefix_sum > min_ending_here) {\n            min_ending_here = min_prefix_sum;\n        }\n    }\n    long max_",
    "    // Write your code here\n    long max_so_far = 0, max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    if(k == 1)\n        return ans1;\n    long ans2 = sum + min_prefix_sum + min_suffix_sum;\n    long ans3 = sum + max_prefix_sum + max_suffix_sum;\n    long ans4 = ans3;\n    for(long i = 1; i < k - 1; i++) {\n        ans4 = ans4 + sum + std::min(min_prefix_sum, min_suffix_sum);\n    }\n    return std::max(ans1, std::max(ans2, ans4));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, max_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        max_prefix_sum += a[i];\n        if (max_prefix_sum > max_so_far)\n            max_so_far = max_prefix_sum;\n    }\n    return max_so_far + (k - 2) * sum;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_sum = 0;\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_wrap_sum = std::max(max_wrap_sum, curr_sum);\n    }\n    max_wrap_sum = max_wrap + max_wrap_sum;\n    return std::max(max_sum, max_wrap_sum);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) return max_element*k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) max_ending_here = 0;\n        if(max_so_far < max_ending_here) max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) max_ending_here = 0;\n        if(max_so_far < max_ending_here) max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        max_suffix_sum += a[i];\n        min_suffix_sum = std::min(min_suffix_sum, max_suffix_sum);\n    }\n    long max_prefix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_prefix_sum += a[i];\n        min_prefix_sum = std::min(min_prefix_sum, max_prefix_sum);\n    }\n    long ans1 = max_so_far;\n    if (k == 1)\n        return ans1;\n    long ans2 = sum + max_prefix_sum + max_suffix_sum;\n    long ans3 = sum + max_prefix_sum + min_suffix_sum;\n    long ans4 = sum + min_prefix_sum + max_suffix_sum;\n    long ans5 = sum + min_prefix_sum + min_suffix_sum;\n    long ans6 = sum + max_so_far;\n    return std::max(ans1, std::max(ans2, std::max(ans3, std::max(ans4, std::max(ans5, ans6)))));",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k-1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    long sum = 0;\n    if(max_element < 0)\n        return max_element * k;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(int i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = sum + max_wrap;\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        sum -= a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    long max_sum = 0;\n    long max_sum_so_far = 0;\n    long max_sum_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here = max_sum_ending_here + a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n    max_sum = max_sum_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    long max_sum_ending_here_2 = 0;\n    long max_sum_so_far_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_ending_here_2 = max_sum_ending_here_2 + a[i];\n        if (max_sum_ending_here_2 < 0) {\n            max_sum_ending_here_2 = 0;\n        }\n        if (max_sum_so_far_2 < max_sum_ending_here_2) {\n            max_sum_so_far_2 = max_sum_ending_here_2;\n        }\n    }\n    max_sum_so_far_2 = sum + max_sum_so_far_2;\n    if (max_sum_so_far_2 > max_sum) {\n        max_sum = max_sum_so_far_2;\n    }\n    long max_sum_so_far_3 = 0;\n    for (long i = 0; i < n; i++) {\n        max_sum_so_far_3 = max_sum_so_far_3 + a[i];\n    }\n    max_sum_so_far_3 = max_sum_so_far_3",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (sum > 0) {\n        max_sum += sum * (k - 2);\n    }\n    for (long i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_ending_here = max_ending_here - a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        max_sum = std::max(max_sum, max_so_far + sum * (k - 2));\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_sum = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_sum += a[i];\n    }\n    max_sum *= k;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_sum;\n    long max_wrap = 0;\n    long curr_wrap = 0;\n    for (i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if (curr_wrap < 0)\n            curr_wrap = 0;\n        if (max_wrap < curr_wrap)\n            max_wrap = curr_wrap;\n    }\n    return std::max(max_so_far, max_wrap + max_sum);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum) {\n        max_sum = max_wrap;\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return (max_wrap > max_so_far) ? max_wrap : max_so_far;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);",
    "    // Write your code here\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if(max_so_far < max_ending_here_wrap)\n            max_so_far = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_ending_here_wrap;\n    if(k == 1)\n        return max_so_far;\n    return max(max_so_far, max_wrap * (k - 2) + max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if(max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if(max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if(sum > 0) {\n        max_sum = std::max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return max_sum;",
    "    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > min_wrap) {\n            min_wrap = sum;\n        }\n    }\n    min_wrap = std::max(min_wrap, 0l);\n    long ans1 = max_wrap + min_wrap * (k - 2);\n    long ans2 = max_sum;\n    return std::max(ans1, ans2);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element * k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if (max_sum == 0)\n        return max_sum;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here > max_wrap)\n            max_wrap = max_ending_here;\n    }\n    return std::max(max_sum, max_wrap * k);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if(k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long max_suffix_sum = 0;\n    long total_sum = 0;\n    for(long i = 0; i < n; i++) {\n        total_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, total_sum);\n    }\n    total_sum = 0;\n    for(long i = n - 1; i >= 0; i--) {\n        total_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, total_sum);\n    }\n    long ans = std::max(max_sum, max_prefix_sum + max_suffix_sum);\n    if(total_sum > 0) {\n        ans = std::max(ans, total_sum * (k - 2) + max_prefix_sum + max_suffix_sum);\n    }\n    return ans;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far;\n    long sum = max_so_far;\n    for (i = 0; i < n; i++) {\n        sum = sum - a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    long total_sum = 0;\n    for (i = 0; i < n; i++) {\n        total_sum = total_sum + a[i];\n    }\n    max_sum = std::max(max_sum, total_sum * k);\n    max_sum = std::max(max_sum, total_sum + sum);\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long sum = 0;\n    long max_sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum += a[i];\n    }\n    long min_sum = 0;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        min_sum += a[i];\n    }\n    long max_sum_so_far = max_sum;\n    for(int i = 0; i < n; i++) {\n        long curr_sum = sum - min_sum;\n        max_sum_so_far = std::max(max_sum_so_far, curr_sum);\n        sum += a[i];\n        min_sum += a[i];\n    }\n    return max_sum_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        min_ending_here += a[i];\n        if(min_ending_here > 0)\n            min_ending_here = 0;\n        if(min_so_far > min_ending_here)\n            min_so_far = min_ending_here;\n    }\n    min_sum = min_so_far * k;\n    long corner_case = sum * (k - 2);\n    return std::max(max_sum, std::max(corner_case, corner_case + sum + min_sum));",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long curr_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        curr_wrap += a[i];\n        if(curr_wrap < 0) {\n            curr_wrap = 0;\n        }\n        max_wrap = std::max(max_wrap, curr_wrap);\n    }\n    max_wrap = std::max(max_wrap, max_wrap + (k - 2) * max_wrap);\n    return std::max(max_sum, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(sum, max_sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(sum, max_sum);\n    }\n    max_wrap = max_wrap + sum;\n    if (k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_prefix_sum = 0;\n    long min_prefix_sum = 0;\n    long prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        prefix_sum += a[i];\n        max_prefix_sum = std::max(max_prefix_sum, prefix_sum);\n        min_prefix_sum = std::min(min_prefix_sum, prefix_sum);\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        max_suffix_sum = std::max(max_suffix_sum, suffix_sum);\n        min_suffix_sum = std::min(min_suffix_sum, suffix_sum);\n    }\n    long total_sum = prefix_sum;\n    long ans1 = std::max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n    long ans2 = max_prefix_sum + (k - 1) * total_sum - min_suffix_sum;\n    long ans3 = max_suffix_sum + (k - 1) * total_sum - min_prefix_sum;\n    return std::max(ans1, std::max(ans2, ans3));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (int i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = max_so_far + a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return ans;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far += a[i];\n        if (max_so_far < 0) {\n            max_so_far = 0;\n        }\n        if (max_sum < max_so_far) {\n            max_sum = max_so_far;\n        }\n    }\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    long ans = max_sum + (k - 2) * sum;\n    return std::max(ans, max_sum);",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for(long i=0; i<n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long min_sum = 0;\n    long min_ending_here = 0;\n    long min_so_far = 0;\n    for(long i=0; i<n; i++) {\n        min_ending_here = min_ending_here + a[i];\n        if(min_ending_here > 0) {\n            min_ending_here = 0;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    long total_sum = 0;\n    for(long i=0; i<n; i++) {\n        total_sum += a[i];\n    }\n    if(k == 1) {\n        return max_so_far;\n    }\n    else {\n        long max_sum_k = 0;\n        max_sum_k = std::max(max_so_far, total_sum * k - min_so_far);\n        return max_sum_k;\n    }",
    "    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_wrap, max_so_far * k);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_ending_here;\n    if (k == 1) {\n        return max_so_far;\n    }\n    return std::max(max_wrap, max_so_far + (k - 2) * max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element*k;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if(max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if(max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1) {\n        return max_so_far;\n    }\n    if(k == 2) {\n        return std::max(max_so_far, max_wrap);\n    }\n    return std::max(max_so_far, max_wrap + max_sub_array_sum_repeated(a, n, k-2));",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0)\n        return max_element * k;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if(k == 1)\n        return max_so_far;\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0) {\n        return max_element;\n    }\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far * k;\n    long prefix_sum = 0;\n    long suffix_sum = 0;\n    for(long i = 0; i < n; i++) {\n        prefix_sum = prefix_sum + a[i];\n        max_sum = std::max(max_sum, prefix_sum);\n    }\n    for(long i = n - 1; i >= 0; i--) {\n        suffix_sum = suffix_sum + a[i];\n        max_sum = std::max(max_sum, suffix_sum);\n    }\n    long total_sum = std::accumulate(a.begin(), a.end(), 0);\n    max_sum = std::max(max_sum, total_sum * k);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long max_sum = max_element * k;\n    long curr_prefix_sum = 0;\n    long curr_suffix_sum = 0;\n    long prefix_sum[n];\n    long suffix_sum[n];\n    for (long i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        prefix_sum[i] = curr_prefix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        suffix_sum[i] = curr_suffix_sum;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = std::max(max_ending_here + a[i], a[i]);\n        max_so_far = std::max(max_so_far, max_ending_here);\n    }\n    long ans1 = max_so_far;\n    for (long i = 0; i < n; i++) {\n        max_so_far = std::max(max_so_far, prefix_sum[i] + suffix_sum[i] - a[i]);\n    }\n    long ans2 = max_so_far;\n    return std::max(ans1, ans2 + (k - 2) * max_sum);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if(curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if(k == 1) {\n        return max_sum;\n    }\n    return std::max(max_sum, max_wrap);",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    long sum = std::accumulate(a.begin(), a.end(), 0);\n    if (max_element < 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_so_far = std::max(a[i], max_so_far + a[i]);\n        max_sum = std::max(max_so_far, max_sum);\n    }\n    max_sum = std::max(max_sum, max_sum + (k - 2) * sum);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element < 0)\n        return max_element * k;\n    for(int i = 0; i < n; i++) {\n        sum += a[i];\n        if(sum < 0)\n            sum = 0;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far = max_so_far + max_wrap * (k - 2);\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i=0;i<n;i++){\n        sum += a[i];\n    }\n    long max_sum_so_far = sum;\n    for(long i=0;i<n;i++){\n        sum += a[i];\n        sum -= a[i]*k;\n        max_sum_so_far = std::max(max_sum_so_far,sum);\n    }\n    return max_sum_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if (max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        return max_sum * k;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if (max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if (max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_sum;\n    if (k == 1)\n        return max_sum;\n    return std::max(max_wrap, max_sum * k);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_wrap_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap_ending_here += a[i];\n        if (max_wrap_ending_here < 0) {\n            max_wrap_ending_here = 0;\n        }\n        if (max_wrap < max_wrap_ending_here) {\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    return std::max(max_so_far, max_wrap * (k - 1));",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 2);\n    return std::max(max_so_far, max_wrap);",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element < 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far) {\n        max_so_far = max_wrap;\n    }\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0)\n            max_ending_here = 0;\n        if(max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    if(max_sum == 0) {\n        max_sum = *std::max_element(a.begin(), a.end());\n        return max_sum * k;\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here_wrap = max_ending_here_wrap + a[i];\n        if(max_ending_here_wrap < 0)\n            max_ending_here_wrap = 0;\n        if(max_wrap < max_ending_here_wrap)\n            max_wrap = max_ending_here_wrap;\n    }\n    max_wrap = max_wrap + max_sum;\n    if(max_wrap > max_sum)\n        return max_wrap * (k - 2) + max_sum;\n    else\n        return max_sum * k;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for (long i = 0; i < n; i++) {\n        sum -= a[i];\n        sum += a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    if (k == 1) {\n        return max_sum;\n    }\n    long max_wrap_sum = 0;\n    long min_wrap_sum = 0;\n    long wrap_sum = 0;\n    for (long i = 0; i < n; i++) {\n        wrap_sum += a[i];\n        max_wrap_sum = std::max(max_wrap_sum, wrap_sum);\n        if (wrap_sum < 0) {\n            wrap_sum = 0;\n        }\n        min_wrap_sum = std::min(min_wrap_sum, wrap_sum);\n    }\n    long max_wrap_sum_k = max_wrap_sum * k;\n    long min_wrap_sum_k = min_wrap_sum * k;\n    long max_sum_k = max_wrap_sum_k - min_wrap_sum_k;\n    return std::max(max_sum, max_sum_k);",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_ending_here_2 = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here_2 = max_ending_here_2 + a[i];\n        if (max_ending_here_2 < 0) {\n            max_ending_here_2 = 0;\n        }\n        if (max_sum < max_ending_here_2) {\n            max_sum = max_ending_here_2;\n        }\n    }\n    max_sum = std::max(max_sum, sum * k);\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long max_sum = max_so_far;\n    long curr_val = 0;\n    for (long i = 0; i < n; i++) {\n        curr_val += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = std::max(max_sum, max_so_far + curr_val * (k - 2));\n    return max_sum;",
    "    long sum = 0;\n    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (sum < 0) {\n        return max_so_far;\n    }\n    max_sum = max_so_far;\n    for (long i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        max_ending_here = std::max(max_ending_here, 0L);\n        max_so_far = std::max(max_so_far, max_ending_here);\n    }\n    max_sum = std::max(max_sum, max_so_far);\n    max_sum = std::max(max_sum, max_sum + (k - 2) * sum);\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;"
  ]
}