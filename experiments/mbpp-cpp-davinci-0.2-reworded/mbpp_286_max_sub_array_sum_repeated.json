{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\nlong max_sub_array_sum_repeated(std::vector<long> a, long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sub_array_sum_repeated;\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)-30, (long)-1})), (4), (3)) == (30));\n    assert(candidate((std::vector<long>({(long)-1, (long)10, (long)20})), (3), (2)) == (59));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3})), (3), (3)) == (-1));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if(max_element <= 0) {\n        return max_element * k;\n    }\n    for(int i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(int i = 0; i < n; i++) {\n        max_wrap = max_wrap + a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0;\n    long min_suffix_sum = 0;\n    long min_so_far = 0;\n    for(int i = n - 1; i >= 0; i--) {\n        max_suffix_sum = max_suffix_sum + a[i];\n        if(max_suffix_sum > max_so_far) {\n            max_so_far = max_suffix_sum;\n        }\n        min_suffix_sum = min_suffix_sum + a[i];\n        if(min_suffix_sum < min_so_far) {\n            min_so_far = min_suffix_sum;\n        }\n    }\n    long max_wrap_sum = max_wrap + min_so_far;\n    if(max_wrap_sum > max_so_far) {\n        max_so_far = max_wrap_sum;\n    }\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum < 0) {\n            sum = 0;\n        }\n        max_sum = std::max(max_sum, sum);\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    long min_wrap = 0;\n    sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        if (sum > 0) {\n            sum = 0;\n        }\n        min_wrap = std::min(min_wrap, sum);\n    }\n    min_wrap = -min_wrap;\n    long max_wrap_sum = max_wrap + min_wrap;\n    if (k == 1) {\n        return max_sum;\n    }\n    if (max_wrap_sum > 0) {\n        return std::max(max_sum, max_wrap_sum * (k - 1) + max_sum);\n    } else {\n        return std::max(max_sum, max_wrap_sum * k);\n    }",
    "    long max_so_far = 0, max_ending_here = 0;\n    for(long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for(long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k);\n    return std::max(max_wrap, max_so_far);",
    "    long sum = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_sum = sum;\n    for(long i = 0; i < n; i++) {\n        sum = sum - a[i] + a[i] * k;\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    max_so_far = std::max(max_so_far, sum * (k - 2));\n    return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (max_so_far == 0)\n        return max_so_far;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        a[i] = -a[i];\n    }\n    long max_suffix_sum = 0, min_prefix_sum = 0;\n    for (long i = 0; i < n; i++) {\n        max_suffix_sum += a[i];\n        if (max_suffix_sum > max_so_far)\n            max_so_far = max_suffix_sum;\n    }\n    for (long i = n - 1; i >= 0; i--) {\n        min_prefix_sum += a[i];\n        if (min_prefix_sum < max_so_far)\n            max_so_far = min_prefix_sum;\n    }\n    return max_so_far + (k - 2) * sum;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_sum = 0;\n    long max_ending_here = 0;\n    long max_so_far = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_sum = max_so_far * k;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    max_wrap = max_wrap + max_so_far;\n    if (max_wrap > max_sum)\n        max_sum = max_wrap;\n    return max_sum;",
    "\tlong max_so_far = 0, max_ending_here = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tmax_ending_here = max_ending_here + a[i];\n\t\tif (max_ending_here < 0)\n\t\t\tmax_ending_here = 0;\n\t\tif (max_so_far < max_ending_here)\n\t\t\tmax_so_far = max_ending_here;\n\t}\n\tlong max_wrap = 0, i;\n\tfor (i = 0; i < n; i++) {\n\t\tmax_wrap += a[i];\n\t\ta[i] = -a[i];\n\t}\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n\tif (max_wrap > max_so_far)\n\t\tmax_so_far = max_wrap;\n\treturn max_so_far * k;",
    "    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    long max_sum_so_far = 0;\n    for(long i = 0; i < n; i++) {\n        sum += a[i];\n        max_sum_so_far = std::max(max_sum_so_far, sum);\n        if(sum < 0) {\n            sum = 0;\n        }\n    }\n    if(max_sum_so_far == 0) {\n        return *std::max_element(a.begin(), a.end());\n    }\n    max_sum = max_sum_so_far;\n    long sum_of_all_elements = std::accumulate(a.begin(), a.end(), 0);\n    long max_wrap_sum = sum_of_all_elements * (k - 2);\n    max_wrap_sum += max_sum_so_far;\n    max_sum = std::max(max_sum, max_wrap_sum);\n    return max_sum;",
    "    long max_so_far = 0;\n    long max_ending_here = 0;\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (max_element <= 0) {\n        return max_element * k;\n    }\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap) * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0, i;\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    else\n        return max_so_far;",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    if (k == 1)\n        return max_so_far;\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k - 1);\n    return std::max(max_wrap, max_so_far);",
    "    long max_so_far = 0, max_ending_here = 0;\n    for (long i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    return std::max(max_so_far, max_wrap * k);",
    "    long sum = 0;\n    long max_sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    long max_element = *std::max_element(a.begin(), a.end());\n    if (sum > 0) {\n        max_sum = sum * k;\n    } else {\n        max_sum = max_element;\n    }\n    long curr_sum = 0;\n    for (long i = 0; i < n; i++) {\n        curr_sum += a[i];\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n        max_sum = std::max(max_sum, curr_sum);\n    }\n    long suffix_sum = 0;\n    for (long i = n - 1; i >= 0; i--) {\n        suffix_sum += a[i];\n        if (suffix_sum > max_sum) {\n            max_sum = suffix_sum;\n        }\n    }\n    return max_sum;",
    "    long max_so_far = INT_MIN;\n    long max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    if (sum > 0)\n        return max(max_so_far, (max_so_far % sum) + sum * (k - 2));\n    else\n        return max(max_so_far, max_so_far % sum);",
    "    long max_so_far = 0, max_ending_here = 0;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    long max_wrap = 0;\n    for (long i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1);\n    if (max_wrap > max_so_far)\n        max_so_far = max_wrap;\n    return max_so_far * k;",
    "    long max_sum = 0;\n    long max_so_far = 0;\n    long max_ending_here = 0;\n    long i;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum > max_sum) {\n        max_sum = sum;\n    }\n    max_sum = max_sum * k;\n    if (k == 1) {\n        max_sum = max_sum - sum;\n    }\n    return max_sum;"
  ]
}