{
  "name": "mbpp_393_max_length_list",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    // Implement max_length_list function.\n    if(input_list.size() == 0)\n        result = 0;\n    else{\n        result = input_list[0];\n        for(int i = 1; i < input_list.size(); i++)\n            if(input_list[i].size() > result.f1.size())\n                result = input_list[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmp8gakhjkb.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8gakhjkb.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp8gakhjkb.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8gakhjkb.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8gakhjkb.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8gakhjkb.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp8gakhjkb.cpp:19:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   19 |         result = 0;\n      |                  ^\n/tmp/tmp8gakhjkb.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8gakhjkb.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp8gakhjkb.cpp:21:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto &i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1mclauvs.cpp:2:\n/tmp/tmp1mclauvs.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1mclauvs.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result.f1 = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmp7fi3jvfe.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7fi3jvfe.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7fi3jvfe.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7fi3jvfe.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7fi3jvfe.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7fi3jvfe.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7fi3jvfe.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp7fi3jvfe.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7fi3jvfe.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7fi3jvfe.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if ((input_list.size() == 0)) {\n        result = 0;\n        return result;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (auto i = 0; (i < input_list.size()); i++) {\n            if ((input_list[i].size() > max_length_vector.size())) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n        return result;\n    }\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpo4_zyc58.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpo4_zyc58.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpo4_zyc58.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo4_zyc58.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpo4_zyc58.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo4_zyc58.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpo4_zyc58.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpo4_zyc58.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo4_zyc58.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpo4_zyc58.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    if(max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmp6tmi_oi2.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6tmi_oi2.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6tmi_oi2.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tmi_oi2.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6tmi_oi2.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tmi_oi2.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6tmi_oi2.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp6tmi_oi2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6tmi_oi2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    int max_length = 0;\n    int max_length_index = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_index = i;\n        }\n    }\n    result = input_list[max_length_index];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmphwutg31a.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmphwutg31a.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmphwutg31a.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphwutg31a.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphwutg31a.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphwutg31a.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmphwutg31a.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmphwutg31a.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphwutg31a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmphwutg31a.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = Union_long_std_vector_long_(0);\n    } else {\n        std::vector<long> max_list = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_list.size()) {\n                max_list = input_list[i];\n            }\n        }\n        result = Union_long_std_vector_long_(max_list);\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpae6u9m7k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpae6u9m7k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpae6u9m7k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpae6u9m7k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpae6u9m7k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpae6u9m7k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpae6u9m7k.cpp:18:47: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = Union_long_std_vector_long_(0);\n      |                                               ^\n/tmp/tmpae6u9m7k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpae6u9m7k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpae6u9m7k.cpp:26:54: error: use of deleted function \u2018Union_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    result.f1 = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmppz1dj04x.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmppz1dj04x.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmppz1dj04x.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmppz1dj04x.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpotnvo27a.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpotnvo27a.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpotnvo27a.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpotnvo27a.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpotnvo27a.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpotnvo27a.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (std::vector<long> vector : input_list) {\n        if (vector.size() > max_length) {\n            max_length = vector.size();\n            max_length_vector = vector;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpzlia991y.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzlia991y.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzlia991y.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzlia991y.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzlia991y.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_vector;\n      |              ^~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzlia991y.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_vector.size()) {\n            max_vector = input_list[i];\n        }\n    }\n    result.f1 = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmploaph5jo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmploaph5jo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmploaph5jo.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmploaph5jo.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto &i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpotnvo27a.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpotnvo27a.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpotnvo27a.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpotnvo27a.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpotnvo27a.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpotnvo27a.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpotnvo27a.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (std::vector<long> vector_ : input_list) {\n        if (vector_.size() > max_length) {\n            max_length = vector_.size();\n            max_length_vector = vector_;\n        }\n    }\n    if (max_length == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmp1s05kr5n.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1s05kr5n.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1s05kr5n.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1s05kr5n.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1s05kr5n.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1s05kr5n.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1s05kr5n.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     return result;\n      |            ^~~~~~\n/tmp/tmp1s05kr5n.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1s05kr5n.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto &i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpj6d7pwig.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpj6d7pwig.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpj6d7pwig.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6d7pwig.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj6d7pwig.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6d7pwig.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj6d7pwig.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpj6d7pwig.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6d7pwig.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpj6d7pwig.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpfvvl0im4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfvvl0im4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfvvl0im4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfvvl0im4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfvvl0im4.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpfvvl0im4.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpfvvl0im4.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = -1;\n        return result;\n    }\n    int max_length = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpoavf6e77.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpoavf6e77.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpoavf6e77.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoavf6e77.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpoavf6e77.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoavf6e77.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpoavf6e77.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpoavf6e77.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoavf6e77.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpoavf6e77.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_vector.size()) {\n            max_vector = input_list[i];\n        }\n    }\n    result.f1 = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmploaph5jo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmploaph5jo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmploaph5jo.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmploaph5jo.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2k8j0m2m.cpp:2:\n/tmp/tmp2k8j0m2m.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2k8j0m2m.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if ((input_list.size() == 0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector;\n    max_length_vector = input_list[0];\n    for (auto i = 0; (i < input_list.size()); ++i) {\n        if ((input_list[i].size() > max_length_vector.size())) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpl_n6pskg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpl_n6pskg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpl_n6pskg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl_n6pskg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl_n6pskg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl_n6pskg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl_n6pskg.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpl_n6pskg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl_n6pskg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpl_n6pskg.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(auto i : input_list){\n        if(i.size() > max_length){\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    if(max_length == 0)\n        return 0;\n    else\n        return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpwt1jwjf6.cpp:2:\n/tmp/tmpwt1jwjf6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpwt1jwjf6.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = input_list[0];\n    for (size_t i = 1; i < input_list.size(); i++) {\n        if (max_length.f1.size() < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp3esojumu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp3esojumu.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmp3esojumu.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3esojumu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3esojumu.cpp:2:\n/tmp/tmp3esojumu.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3esojumu.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f1.size() < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpamwnt6_f.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpamwnt6_f.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpamwnt6_f.cpp:2:\n/tmp/tmpamwnt6_f.cpp: In function \u2018int main()\u2019:\n/tmp/tmpamwnt6_f.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp16xy67na.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp16xy67na.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp16xy67na.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp16xy67na.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp16xy67na.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmp16xy67na.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp16xy67na.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for(int i = 0; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    if(max_length == 0) {\n        return -1;\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8ji44nbn.cpp:2:\n/tmp/tmp8ji44nbn.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8ji44nbn.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp5i864fdo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp5i864fdo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp5i864fdo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5i864fdo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5i864fdo.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp5i864fdo.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp5i864fdo.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for(auto i : input_list) {\n        if(i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp9gjonek2.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9gjonek2.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp9gjonek2.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9gjonek2.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9gjonek2.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9gjonek2.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9gjonek2.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp9gjonek2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9gjonek2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp61nfwo5h.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp61nfwo5h.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp61nfwo5h.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp61nfwo5h.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp61nfwo5h.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp61nfwo5h.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp61nfwo5h.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (std::vector<long> v : input_list) {\n        if (v.size() > max_length_vector.size()) {\n            max_length_vector = v;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpbs7ljytd.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpbs7ljytd.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpbs7ljytd.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbs7ljytd.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbs7ljytd.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbs7ljytd.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbs7ljytd.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpbs7ljytd.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbs7ljytd.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpbs7ljytd.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpq2aa0q4m.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpq2aa0q4m.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpq2aa0q4m.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq2aa0q4m.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpq2aa0q4m.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq2aa0q4m.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpq2aa0q4m.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpq2aa0q4m.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq2aa0q4m.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpq2aa0q4m.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmphzowpl9s.cpp:2:\n/tmp/tmphzowpl9s.cpp: In function \u2018int main()\u2019:\n/tmp/tmphzowpl9s.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_vec;\n    for (std::vector<long> vec : input_list) {\n        if (vec.size() > max_len) {\n            max_len = vec.size();\n            max_vec = vec;\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmprvx5yn83.cpp:2:\n/tmp/tmprvx5yn83.cpp: In function \u2018int main()\u2019:\n/tmp/tmprvx5yn83.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(auto i : input_list){\n        if(i.size() > max_length){\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    if(max_length == 0){\n        return 0;\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpx49sneex.cpp:2:\n/tmp/tmpx49sneex.cpp: In function \u2018int main()\u2019:\n/tmp/tmpx49sneex.cpp:32:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   32 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8rahuiy.cpp:2:\n/tmp/tmpv8rahuiy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8rahuiy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpei11b44v.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpei11b44v.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpei11b44v.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpei11b44v.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpei11b44v.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpei11b44v.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpei11b44v.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpei11b44v.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpei11b44v.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpei11b44v.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpf1y81sj6.cpp:2:\n/tmp/tmpf1y81sj6.cpp: In function \u2018int main()\u2019:\n/tmp/tmpf1y81sj6.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for(long i = 1; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpxwc34875.cpp:2:\n/tmp/tmpxwc34875.cpp: In function \u2018int main()\u2019:\n/tmp/tmpxwc34875.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpndd43yue.cpp:2:\n/tmp/tmpndd43yue.cpp: In function \u2018int main()\u2019:\n/tmp/tmpndd43yue.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpuqf6wdek.cpp:2:\n/tmp/tmpuqf6wdek.cpp: In function \u2018int main()\u2019:\n/tmp/tmpuqf6wdek.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    int max_length = 0;\n    std::vector<long> max_length_vector;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpjtvqk7fp.cpp:2:\n/tmp/tmpjtvqk7fp.cpp: In function \u2018int main()\u2019:\n/tmp/tmpjtvqk7fp.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_list = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_list.size()) {\n                max_list = input_list[i];\n            }\n        }\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp_tb9ra_j.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_tb9ra_j.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_tb9ra_j.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tb9ra_j.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_tb9ra_j.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tb9ra_j.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_tb9ra_j.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp_tb9ra_j.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tb9ra_j.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_tb9ra_j.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    result.f1 = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpof7yanm9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpof7yanm9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpof7yanm9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpof7yanm9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpof7yanm9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpof7yanm9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpof7yanm9.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpof7yanm9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpof7yanm9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpof7yanm9.cpp:29:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   29 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (std::vector<long> i : input_list) {\n        if (i.size() > result.f1.size()) {\n            result = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpz_em4ac8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpz_em4ac8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpz_em4ac8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz_em4ac8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpz_em4ac8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz_em4ac8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpz_em4ac8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpz_em4ac8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz_em4ac8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpz_em4ac8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.empty()) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (std::vector<long> v : input_list) {\n            if (v.size() > max_length_vector.size()) {\n                max_length_vector = v;\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzfnwclgq.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzfnwclgq.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzfnwclgq.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzfnwclgq.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzfnwclgq.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzfnwclgq.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzfnwclgq.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzfnwclgq.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzfnwclgq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzfnwclgq.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpe5vhldvh.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe5vhldvh.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpe5vhldvh.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpe5vhldvh.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzix04j95.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzix04j95.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzix04j95.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzix04j95.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpdpayqrmj.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdpayqrmj.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpdpayqrmj.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpdpayqrmj.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    long max_length_index = 0;\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_index = i;\n        }\n    }\n    result = input_list[max_length_index];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmptic1js7w.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmptic1js7w.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmptic1js7w.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptic1js7w.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptic1js7w.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmptic1js7w.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptic1js7w.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_vector;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_vector = i;\n        }\n    }\n    result = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmprfs0zqq6.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprfs0zqq6.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprfs0zqq6.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprfs0zqq6.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprfs0zqq6.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprfs0zqq6.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprfs0zqq6.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprfs0zqq6.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprfs0zqq6.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprfs0zqq6.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = -1;\n    if (input_list.size() == 0) {\n        return result;\n    }\n    result.f0 = 0;\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > input_list[result.f0].size()) {\n            result.f0 = i;\n        }\n    }\n    result.f1 = input_list[result.f0];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp_8wlp16p.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_8wlp16p.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_8wlp16p.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_8wlp16p.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_8wlp16p.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_8wlp16p.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_8wlp16p.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp_8wlp16p.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_8wlp16p.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_8wlp16p.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = -1;\n        return result;\n    }\n    result.f1 = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp63_sxw2c.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp63_sxw2c.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp63_sxw2c.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp63_sxw2c.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp63_sxw2c.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp63_sxw2c.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp63_sxw2c.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp63_sxw2c.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp63_sxw2c.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp63_sxw2c.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    int max_length = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpakuewmpi.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpakuewmpi.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpakuewmpi.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakuewmpi.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpakuewmpi.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakuewmpi.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpakuewmpi.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpakuewmpi.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpakuewmpi.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpakuewmpi.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (result.f0 < i.size()) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp_dwrhez2.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_dwrhez2.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_dwrhez2.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_dwrhez2.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_dwrhez2.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_dwrhez2.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_dwrhez2.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp_dwrhez2.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_dwrhez2.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzix04j95.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzix04j95.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzix04j95.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzix04j95.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp5i864fdo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp5i864fdo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp5i864fdo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5i864fdo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp5i864fdo.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp5i864fdo.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5i864fdo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp5i864fdo.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (std::vector<long> vector : input_list) {\n        if (vector.size() > max_length) {\n            max_length = vector.size();\n            max_length_vector = vector;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpzlia991y.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzlia991y.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzlia991y.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzlia991y.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzlia991y.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_vector;\n      |              ^~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzlia991y.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzlia991y.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_vector.size()) {\n            max_vector = input_list[i];\n        }\n    }\n    result.f1 = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmploaph5jo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmploaph5jo.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmploaph5jo.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmploaph5jo.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmploaph5jo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmploaph5jo.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp2t0b8qot.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp2t0b8qot.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp2t0b8qot.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2t0b8qot.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp2t0b8qot.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2t0b8qot.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp2t0b8qot.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp2t0b8qot.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2t0b8qot.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp2t0b8qot.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    long max_length = 0;\n    std::vector<long> max_list;\n    for(auto list: input_list){\n        if(list.size() > max_length){\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdcati48o.cpp:2:\n/tmp/tmpdcati48o.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdcati48o.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8rahuiy.cpp:2:\n/tmp/tmpv8rahuiy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8rahuiy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    long max_length_index = 0;\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_index = i;\n        }\n    }\n    result = input_list[max_length_index];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmptic1js7w.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmptic1js7w.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmptic1js7w.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptic1js7w.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmptic1js7w.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmptic1js7w.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptic1js7w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmptic1js7w.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n        return result;\n    }\n    int max_length = input_list[0].size();\n    int max_length_index = 0;\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_index = i;\n        }\n    }\n    result = input_list[max_length_index];\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmprc3qjgqx.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprc3qjgqx.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprc3qjgqx.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprc3qjgqx.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprc3qjgqx.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprc3qjgqx.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprc3qjgqx.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmprc3qjgqx.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprc3qjgqx.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprc3qjgqx.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (result.f1.size() < input_list[i].size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpj6klsx91.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpj6klsx91.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpj6klsx91.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6klsx91.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj6klsx91.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6klsx91.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpj6klsx91.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpj6klsx91.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj6klsx91.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpj6klsx91.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp762uun9i.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp762uun9i.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp762uun9i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpaawy63aj.cpp:2:\n/tmp/tmpaawy63aj.cpp: In function \u2018int main()\u2019:\n/tmp/tmpaawy63aj.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpd_pmepnc.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpd_pmepnc.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpd_pmepnc.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd_pmepnc.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd_pmepnc.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd_pmepnc.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpd_pmepnc.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpd_pmepnc.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpd_pmepnc.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpd_pmepnc.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmiyqpdi7.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmiyqpdi7.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmiyqpdi7.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmiyqpdi7.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmiyqpdi7.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmiyqpdi7.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmiyqpdi7.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmiyqpdi7.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmiyqpdi7.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmiyqpdi7.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpdpayqrmj.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdpayqrmj.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpdpayqrmj.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpdpayqrmj.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if ((input_list.size() == 0)) {\n        result = (0);\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (auto i : input_list) {\n        if ((i.size() > max_length_vector.size())) {\n            max_length_vector = i;\n        }\n    }\n    result = (max_length_vector);\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp0zv8lbt_.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp0zv8lbt_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp0zv8lbt_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0zv8lbt_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0zv8lbt_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0zv8lbt_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0zv8lbt_.cpp:18:20: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = (0);\n      |                    ^\n/tmp/tmp0zv8lbt_.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0zv8lbt_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0zv8lbt_.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(con",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp36v9jv5f.cpp:2:\n/tmp/tmp36v9jv5f.cpp: In function \u2018int main()\u2019:\n/tmp/tmp36v9jv5f.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f1.size() < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpamwnt6_f.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpamwnt6_f.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpamwnt6_f.cpp:2:\n/tmp/tmpamwnt6_f.cpp: In function \u2018int main()\u2019:\n/tmp/tmpamwnt6_f.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        result = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmpyrmshhmg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpyrmshhmg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpyrmshhmg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpyrmshhmg.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmpbmg9az6e.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpbmg9az6e.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpbmg9az6e.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmg9az6e.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbmg9az6e.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmg9az6e.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpbmg9az6e.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return result;\n      |            ^~~~~~\n/tmp/tmpbmg9az6e.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbmg9az6e.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    result = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp1xtevyzm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1xtevyzm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1xtevyzm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1xtevyzm.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_vector.size()) {\n            max_vector = input_list[i];\n        }\n    }\n    result = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp7ljyo9vv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ljyo9vv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ljyo9vv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ljyo9vv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ljyo9vv.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ljyo9vv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ljyo9vv.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto vector : input_list) {\n        if (vector.size() > max_length) {\n            max_length = vector.size();\n            max_length_vector = vector;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpf8nayck8.cpp:2:\n/tmp/tmpf8nayck8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpf8nayck8.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (auto i = input_list.begin(); i != input_list.end(); ++i) {\n        if (i->size() > max_length_vector.size()) {\n            max_length_vector = *i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5zs0srvu.cpp:2:\n/tmp/tmp5zs0srvu.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5zs0srvu.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_list = input_list[0];\n        for (std::vector<long> list: input_list) {\n            if (list.size() > max_list.size()) {\n                max_list = list;\n            }\n        }\n        result = max_list;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp9u7f3leq.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9u7f3leq.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp9u7f3leq.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9u7f3leq.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9u7f3leq.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9u7f3leq.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9u7f3leq.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp9u7f3leq.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9u7f3leq.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9u7f3leq.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp762uun9i.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp762uun9i.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp762uun9i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpe5vhldvh.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe5vhldvh.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpe5vhldvh.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpe5vhldvh.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp6l257if3.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp6l257if3.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp6l257if3.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6l257if3.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6l257if3.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6l257if3.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp6l257if3.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp6l257if3.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6l257if3.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp6l257if3.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for(int i = 0; i < input_list.size(); i++){\n        if(input_list[i].size() > max_length){\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpzm9r25_5.cpp:2:\n/tmp/tmpzm9r25_5.cpp: In function \u2018int main()\u2019:\n/tmp/tmpzm9r25_5.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8rahuiy.cpp:2:\n/tmp/tmpv8rahuiy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8rahuiy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_list;\n    for (auto list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmpc8r6rfms.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpc8r6rfms.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpc8r6rfms.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc8r6rfms.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpc8r6rfms.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc8r6rfms.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpc8r6rfms.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpc8r6rfms.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc8r6rfms.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpc8r6rfms.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1xv7h6ys.cpp:2:\n/tmp/tmp1xv7h6ys.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1xv7h6ys.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n    } else {\n        result = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmp_gv8nvv1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_gv8nvv1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_gv8nvv1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_gv8nvv1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_gv8nvv1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_gv8nvv1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_gv8nvv1.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmp_gv8nvv1.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_gv8nvv1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_gv8nvv1.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::oper",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ max_length_list = -1;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_list.f0) {\n            max_length_list.f1 = input_list[i];\n            max_length_list.f0 = input_list[i].size();\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmpio14cslo.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpio14cslo.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length_list;\n      |            ^~~~~~~~~~~~~~~\n/tmp/tmpio14cslo.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpio14cslo.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpio14cslo.cpp:2:\n/tmp/tmpio14cslo.cpp: In function \u2018int main()\u2019:\n/tmp/tmpio14cslo.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length_list = Union_long_std_vector_long_(0);\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length_list.f0) {\n            max_length_list.f1 = list;\n            max_length_list.f0 = list.size();\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmps_09jrtf.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmps_09jrtf.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return max_length_list;\n      |            ^~~~~~~~~~~~~~~\n/tmp/tmps_09jrtf.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps_09jrtf.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps_09jrtf.cpp:2:\n/tmp/tmps_09jrtf.cpp: In function \u2018int main()\u2019:\n/tmp/tmps_09jrtf.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n        return result;\n    }\n    int max_length = 0;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmpb49g7kr0.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpb49g7kr0.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpb49g7kr0.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb49g7kr0.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpb49g7kr0.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb49g7kr0.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpb49g7kr0.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmpb49g7kr0.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb49g7kr0.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpb49g7kr0.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_vec;\n    for (std::vector<long> vec : input_list) {\n        if (vec.size() > max_len) {\n            max_len = vec.size();\n            max_vec = vec;\n        }\n    }\n    return max_vec;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy4n_zz1r.cpp:2:\n/tmp/tmpy4n_zz1r.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy4n_zz1r.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_vec;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_len < input_list[i].size()) {\n            max_len = input_list[i].size();\n            max_vec = input_list[i];\n        }\n    }\n    return max_vec;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpw8930zwm.cpp:2:\n/tmp/tmpw8930zwm.cpp: In function \u2018int main()\u2019:\n/tmp/tmpw8930zwm.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    int max_length = 0;\n    std::vector<long> max_length_vector;\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmpn_px2d3h.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpn_px2d3h.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpn_px2d3h.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_px2d3h.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpn_px2d3h.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_px2d3h.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpn_px2d3h.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpn_px2d3h.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn_px2d3h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpn_px2d3h.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto &v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmpfskuec80.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfskuec80.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfskuec80.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfskuec80.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfskuec80.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfskuec80.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfskuec80.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_vector;\n      |              ^~~~~~~~~~~~~~~~~\n/tmp/tmpfskuec80.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfskuec80.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpfskuec80.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmp_6zuvf3w.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_6zuvf3w.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_6zuvf3w.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_6zuvf3w.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_6zuvf3w.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp_6zuvf3w.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_6zuvf3w.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto &v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpm8mife2d.cpp:2:\n/tmp/tmpm8mife2d.cpp: In function \u2018int main()\u2019:\n/tmp/tmpm8mife2d.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f0) {\n            result.f1 = input_list[i];\n            result.f0 = input_list[i].size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "/tmp/tmpf5wr3dqx.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpf5wr3dqx.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpf5wr3dqx.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf5wr3dqx.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpf5wr3dqx.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf5wr3dqx.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpf5wr3dqx.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmpf5wr3dqx.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf5wr3dqx.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122790,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp2a1bwlic.cpp:2:\n/tmp/tmp2a1bwlic.cpp: In function \u2018int main()\u2019:\n/tmp/tmp2a1bwlic.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpjjzziqb8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpjjzziqb8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpjjzziqb8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpjjzziqb8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjjzziqb8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpjjzziqb8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8rahuiy.cpp:2:\n/tmp/tmpv8rahuiy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8rahuiy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzix04j95.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzix04j95.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzix04j95.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzix04j95.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_vec;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_len < input_list[i].size()) {\n            max_len = input_list[i].size();\n            max_vec = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpr2c72r0b.cpp:2:\n/tmp/tmpr2c72r0b.cpp: In function \u2018int main()\u2019:\n/tmp/tmpr2c72r0b.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    if (input_list.size() == 0) {\n        return result;\n    }\n    result.f1 = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpvxo609id.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpvxo609id.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpvxo609id.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvxo609id.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvxo609id.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvxo609id.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpvxo609id.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpvxo609id.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvxo609id.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpvxo609id.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto vector : input_list) {\n        if (vector.size() > max_length) {\n            max_length = vector.size();\n            max_length_vector = vector;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp858vpzyh.cpp:2:\n/tmp/tmp858vpzyh.cpp: In function \u2018int main()\u2019:\n/tmp/tmp858vpzyh.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzix04j95.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzix04j95.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzix04j95.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzix04j95.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Implement max_length_list function.\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto& i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp3u6m99oy.cpp:2:\n/tmp/tmp3u6m99oy.cpp: In function \u2018int main()\u2019:\n/tmp/tmp3u6m99oy.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (auto i : input_list) {\n        if (i.size() > result.f1.size()) {\n            result = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmp88nyy51_.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp88nyy51_.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp88nyy51_.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp88nyy51_.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp88nyy51_.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp88nyy51_.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp88nyy51_.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp88nyy51_.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp88nyy51_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp88nyy51_.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp955elgfo.cpp:2:\n/tmp/tmp955elgfo.cpp: In function \u2018int main()\u2019:\n/tmp/tmp955elgfo.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = -1;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp16xy67na.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp16xy67na.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp16xy67na.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp16xy67na.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp16xy67na.cpp:18:19: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = -1;\n      |                   ^\n/tmp/tmp16xy67na.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp16xy67na.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp16xy67na.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    result = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp1xtevyzm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1xtevyzm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1xtevyzm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1xtevyzm.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = 0;\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f1.size() < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpamwnt6_f.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpamwnt6_f.cpp:23:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   23 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpamwnt6_f.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpamwnt6_f.cpp:2:\n/tmp/tmpamwnt6_f.cpp: In function \u2018int main()\u2019:\n/tmp/tmpamwnt6_f.cpp:27:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   27 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    if (input_list.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp5g7ez7lm.cpp:2:\n/tmp/tmp5g7ez7lm.cpp: In function \u2018int main()\u2019:\n/tmp/tmp5g7ez7lm.cpp:31:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   31 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        result = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmpyrmshhmg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpyrmshhmg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpyrmshhmg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpyrmshhmg.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (std::vector<long> v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsoxi6f7r.cpp:2:\n/tmp/tmpsoxi6f7r.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsoxi6f7r.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmpnme4xvr1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpnme4xvr1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpnme4xvr1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpnme4xvr1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnme4xvr1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpnme4xvr1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_vector.size()) {\n            max_vector = input_list[i];\n        }\n    }\n    result = max_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp7ljyo9vv.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ljyo9vv.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ljyo9vv.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ljyo9vv.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ljyo9vv.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ljyo9vv.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ljyo9vv.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ljyo9vv.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (std::vector<long> v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmp0kqc1js5.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp0kqc1js5.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp0kqc1js5.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0kqc1js5.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0kqc1js5.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0kqc1js5.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp0kqc1js5.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp0kqc1js5.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0kqc1js5.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp0kqc1js5.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(auto i : input_list) {\n        if(i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp1xv7h6ys.cpp:2:\n/tmp/tmp1xv7h6ys.cpp: In function \u2018int main()\u2019:\n/tmp/tmp1xv7h6ys.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for(int i = 0; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpqye99jhm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpqye99jhm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpqye99jhm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqye99jhm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqye99jhm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqye99jhm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpqye99jhm.cpp:25:14: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   25 |     result = max_length_vector;\n      |              ^~~~~~~~~~~~~~~~~\n/tmp/tmpqye99jhm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqye99jhm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpqye99jhm.cpp:26:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (auto &v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpue__s8m9.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpue__s8m9.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpue__s8m9.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpue__s8m9.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpue__s8m9.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpue__s8m9.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpue__s8m9.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpue__s8m9.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpue__s8m9.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpue__s8m9.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n    } else {\n        result.f1 = input_list[0];\n        for (int i = 0; i < input_list.size(); i++) {\n            if (result.f1.size() < input_list[i].size()) {\n                result.f1 = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpl49ig6y8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpl49ig6y8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpl49ig6y8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl49ig6y8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl49ig6y8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl49ig6y8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpl49ig6y8.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     return result;\n      |            ^~~~~~\n/tmp/tmpl49ig6y8.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl49ig6y8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmp1f36vy6k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1f36vy6k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1f36vy6k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f36vy6k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1f36vy6k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f36vy6k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1f36vy6k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmp1f36vy6k.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1f36vy6k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1f36vy6k.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpe5vhldvh.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpe5vhldvh.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpe5vhldvh.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpe5vhldvh.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe5vhldvh.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpe5vhldvh.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    result = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmp1xtevyzm.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp1xtevyzm.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp1xtevyzm.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp1xtevyzm.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1xtevyzm.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp1xtevyzm.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    long max_len = 0;\n    std::vector<long> max_vec;\n    for (std::vector<long> vec : input_list) {\n        if (vec.size() > max_len) {\n            max_len = vec.size();\n            max_vec = vec;\n        }\n    }\n    return max_vec;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpy4n_zz1r.cpp:2:\n/tmp/tmpy4n_zz1r.cpp: In function \u2018int main()\u2019:\n/tmp/tmpy4n_zz1r.cpp:29:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   29 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    result.f1 = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmppz1dj04x.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmppz1dj04x.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmppz1dj04x.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmppz1dj04x.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ max_length_list = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length_list.f1.size()) {\n            max_length_list.f1 = i;\n        }\n    }\n    return max_length_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpdabztjxs.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdabztjxs.cpp:22:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   22 |     return max_length_list;\n      |            ^~~~~~~~~~~~~~~\n/tmp/tmpdabztjxs.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdabztjxs.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpdabztjxs.cpp:2:\n/tmp/tmpdabztjxs.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdabztjxs.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (auto it = input_list.begin(); it != input_list.end(); ++it) {\n        if (it->size() > max_length_vector.size()) {\n            max_length_vector = *it;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpjhh97_j8.cpp:2:\n/tmp/tmpjhh97_j8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpjhh97_j8.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            result.f1 = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmph3nob8nr.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmph3nob8nr.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmph3nob8nr.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph3nob8nr.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph3nob8nr.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph3nob8nr.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmph3nob8nr.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmph3nob8nr.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph3nob8nr.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmph3nob8nr.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmpfvvl0im4.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfvvl0im4.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfvvl0im4.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfvvl0im4.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfvvl0im4.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpfvvl0im4.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfvvl0im4.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpfvvl0im4.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    return max_list;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp_omw7izm.cpp:2:\n/tmp/tmp_omw7izm.cpp: In function \u2018int main()\u2019:\n/tmp/tmp_omw7izm.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (std::vector<long> list : input_list) {\n        if (list.size() > max_list.size()) {\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp61nfwo5h.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp61nfwo5h.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp61nfwo5h.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp61nfwo5h.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp61nfwo5h.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp61nfwo5h.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp61nfwo5h.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp61nfwo5h.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    result.f1 = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result.f1 = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmppz1dj04x.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmppz1dj04x.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmppz1dj04x.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmppz1dj04x.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppz1dj04x.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmppz1dj04x.cpp:27:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   27 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_list = input_list[0];\n    for (long i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpzix04j95.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpzix04j95.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpzix04j95.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpzix04j95.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzix04j95.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpzix04j95.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmps6cb66u5.cpp:2:\n/tmp/tmps6cb66u5.cpp: In function \u2018int main()\u2019:\n/tmp/tmps6cb66u5.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    // Replace this code with a faster implementation\n    Union_long_std_vector_long_ max_length = Union_long_std_vector_long_(0);\n    for (size_t i = 0; i < input_list.size(); i++) {\n        if (max_length.f0 < input_list[i].size()) {\n            max_length.f1 = input_list[i];\n            max_length.f0 = input_list[i].size();\n        }\n    }\n    return max_length;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmp8z5ji2v_.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp8z5ji2v_.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return max_length;\n      |            ^~~~~~~~~~\n/tmp/tmp8z5ji2v_.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8z5ji2v_.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmp8z5ji2v_.cpp:2:\n/tmp/tmp8z5ji2v_.cpp: In function \u2018int main()\u2019:\n/tmp/tmp8z5ji2v_.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for(int i = 1; i < input_list.size(); i++) {\n        if(input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpsp75fyp8.cpp:2:\n/tmp/tmpsp75fyp8.cpp: In function \u2018int main()\u2019:\n/tmp/tmpsp75fyp8.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122776,
      "stdout": "",
      "stderr": "/tmp/tmp_6zuvf3w.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp_6zuvf3w.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp_6zuvf3w.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_6zuvf3w.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp_6zuvf3w.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp_6zuvf3w.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6zuvf3w.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp_6zuvf3w.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpeza2a6q1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpeza2a6q1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpeza2a6q1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpeza2a6q1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpeza2a6q1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpeza2a6q1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpeza2a6q1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector;\n    long max_length = 0;\n    for (auto i : input_list) {\n        if (i.size() > max_length) {\n            max_length = i.size();\n            max_length_vector = i;\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpv8rahuiy.cpp:2:\n/tmp/tmpv8rahuiy.cpp: In function \u2018int main()\u2019:\n/tmp/tmpv8rahuiy.cpp:28:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   28 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_list;\n    for (long i = 0; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_list = input_list[i];\n        }\n    }\n    result = max_length_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "/tmp/tmp9dxncppg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp9dxncppg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp9dxncppg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9dxncppg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9dxncppg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9dxncppg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp9dxncppg.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp9dxncppg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9dxncppg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp9dxncppg.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "/tmp/tmprnxl626k.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmprnxl626k.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmprnxl626k.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmprnxl626k.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprnxl626k.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmprnxl626k.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    result = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > result.f1.size()) {\n            result = input_list[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpmz2_udv8.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpmz2_udv8.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpmz2_udv8.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpmz2_udv8.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmz2_udv8.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpmz2_udv8.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_list = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_list.size()) {\n            max_list = input_list[i];\n        }\n    }\n    result.f1 = max_list;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "/tmp/tmpeza2a6q1.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpeza2a6q1.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpeza2a6q1.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpeza2a6q1.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpeza2a6q1.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpeza2a6q1.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeza2a6q1.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpeza2a6q1.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        result = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > result.f1.size()) {\n                result = input_list[i];\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122775,
      "stdout": "",
      "stderr": "/tmp/tmpyrmshhmg.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpyrmshhmg.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpyrmshhmg.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpyrmshhmg.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyrmshhmg.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpyrmshhmg.cpp:20:30: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n    } else {\n        std::vector<long> max_length_vector = input_list[0];\n        for (int i = 1; i < input_list.size(); i++) {\n            if (input_list[i].size() > max_length_vector.size()) {\n                max_length_vector = input_list[i];\n            }\n        }\n        result = max_length_vector;\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122745,
      "stdout": "",
      "stderr": "/tmp/tmp7ubz1xpu.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp7ubz1xpu.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp7ubz1xpu.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmp7ubz1xpu.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ubz1xpu.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmp7ubz1xpu.cpp:26:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operat",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    result.f0 = 0;\n    for (auto i : input_list) {\n        if (i.size() > result.f0) {\n            result.f1 = i;\n            result.f0 = i.size();\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmp762uun9i.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmp762uun9i.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmp762uun9i.cpp:24:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   24 |     return result;\n      |            ^~~~~~\n/tmp/tmp762uun9i.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp762uun9i.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result = 0;\n        return result;\n    }\n    long max_length = input_list[0].size();\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length) {\n            max_length = input_list[i].size();\n            max_length_vector = input_list[i];\n        }\n    }\n    result = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122760,
      "stdout": "",
      "stderr": "/tmp/tmpdpayqrmj.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpdpayqrmj.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpdpayqrmj.cpp:18:18: error: use of deleted function \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019\n   18 |         result = 0;\n      |                  ^\n/tmp/tmpdpayqrmj.cpp:3:7: note: \u2018Union_long_std_vector_long_& Union_long_std_vector_long_::operator=(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdpayqrmj.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpdpayqrmj.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const U",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    std::vector<long> max_length_vector = input_list[0];\n    for (auto i : input_list) {\n        if (i.size() > max_length_vector.size()) {\n            max_length_vector = i;\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "/tmp/tmpx8cwju12.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpx8cwju12.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpx8cwju12.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx8cwju12.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpx8cwju12.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx8cwju12.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpx8cwju12.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpx8cwju12.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx8cwju12.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpx8cwju12.cpp:28:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   28 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    std::vector<long> max_length_vector = input_list[0];\n    for (int i = 1; i < input_list.size(); i++) {\n        if (input_list[i].size() > max_length_vector.size()) {\n            max_length_vector = input_list[i];\n        }\n    }\n    return max_length_vector;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1665510023,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n                 from /tmp/tmpk58fcjak.cpp:2:\n/tmp/tmpk58fcjak.cpp: In function \u2018int main()\u2019:\n/tmp/tmpk58fcjak.cpp:26:352: error: no match for \u2018operator==\u2019 (operand types are \u2018Union_long_std_vector_long_\u2019 and \u2018std::tuple<int, std::vector<long int, std::allocator<long int> > >\u2019)\n   26 |     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |                                                                                                                                                                                                                                                                                                                                                            |\n      |                     Union_long_std_vector_long_                                                                                                                                                                                                                                                               ",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector with maximum length.\nUnion_long_std_vector_long_ max_length_list(std::vector<std::vector<long>> input_list) {\n    Union_long_std_vector_long_ result;\n    if (input_list.size() == 0) {\n        result.f0 = 0;\n        return result;\n    }\n    long max_length = 0;\n    std::vector<long> max_length_vector;\n    for (std::vector<long> v : input_list) {\n        if (v.size() > max_length) {\n            max_length = v.size();\n            max_length_vector = v;\n        }\n    }\n    result.f1 = max_length_vector;\n    return result;\n}\nint main() {\n    auto candidate = max_length_list;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)1})}))) == std::make_tuple(5, std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)3, (long)4, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)7, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)10, (long)11, (long)12})}))) == std::make_tuple(4, std::vector<long>({(long)6, (long)7, (long)8, (long)9})));\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "/tmp/tmpfi71mm5y.cpp: In function \u2018Union_long_std_vector_long_ max_length_list(std::vector<std::vector<long int> >)\u2019:\n/tmp/tmpfi71mm5y.cpp:16:33: error: no matching function for call to \u2018Union_long_std_vector_long_::Union_long_std_vector_long_()\u2019\n   16 |     Union_long_std_vector_long_ result;\n      |                                 ^~~~~~\n/tmp/tmpfi71mm5y.cpp:6:5: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(std::vector<long int>)\u2019\n    6 |     Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfi71mm5y.cpp:6:5: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfi71mm5y.cpp:5:30: note: candidate: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(long int)\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfi71mm5y.cpp:5:30: note:   candidate expects 1 argument, 0 provided\n/tmp/tmpfi71mm5y.cpp:19:16: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   19 |         return result;\n      |                ^~~~~~\n/tmp/tmpfi71mm5y.cpp:3:7: note: \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019 is implicitly deleted because the default definition would be ill-formed:\n    3 | union Union_long_std_vector_long_{\n      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfi71mm5y.cpp:5:23: error: union member \u2018Union_long_std_vector_long_::f1\u2019 with non-trivial \u2018std::vector<_Tp, _Alloc>::vector(const std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n    5 |     std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n      |                       ^~\n/tmp/tmpfi71mm5y.cpp:30:12: error: use of deleted function \u2018Union_long_std_vector_long_::Union_long_std_vector_long_(const Union_long_std_vector_long_&)\u2019\n   30 |     r",
      "exit_code": -1,
      "status": "SyntaxError"
    }
  ]
}