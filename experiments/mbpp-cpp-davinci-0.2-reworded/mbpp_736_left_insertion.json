{
  "name": "mbpp_736_left_insertion",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/cppthon-exercises/data-structures-and-algorithms/cppthon-data-structure-exercise-24.php\nlong left_insertion(std::vector<long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = left_insertion;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (6)) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (3)) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5})), (7)) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long left = 0;\n    long right = a.size() - 1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    long mid = 0;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (x <= a[mid]) {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1;\n    while (low < high) {\n        long mid = (low + high) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long left = 0, right = a.size() - 1;\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        if (x <= a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low < high) {\n        mid = (low + high) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;",
    "    long start = 0;\n    long end = a.size()-1;\n    long mid = 0;\n    while (start <= end) {\n        mid = (start+end)/2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            end = mid-1;\n        } else {\n            start = mid+1;\n        }\n    }\n    return start;",
    "    long low = 0, high = a.size() - 1, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;",
    "    long l = 0;\n    long r = a.size()-1;\n    long mid = 0;\n    while (l <= r) {\n        mid = l + (r-l)/2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return l;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (x > a[mid]) {\n            low = mid + 1;\n        } else if (x < a[mid]) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    while (low <= high) {\n        long mid = (low + high) / 2;\n        if (x > a[mid]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0, high = a.size() - 1, mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;",
    "    long low = 0;\n    long high = a.size() - 1;\n    long mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (a[mid] == x) {\n            return mid;\n        } else if (a[mid] > x) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;"
  ]
}