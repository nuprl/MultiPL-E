{
  "name": "mbpp_56_checks",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long r=0;\n    long t=n;\n    while(t>0) {\n        r=r*10+t%10;\n        t=t/10;\n    }\n    if(n==r+1) {\n        return true;\n    }\n    return false;",
    "    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);",
    "    long r=0,t=n;\n    while(t>0) {\n        r=r*10+t%10;\n        t=t/10;\n    }\n    return (n==r-1);",
    "    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);",
    "    long r = 0;\n    long t = n;\n    while(t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;",
    "    long rev = 0;\n    long num = n;\n    while(num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev - 1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);",
    "    long rev = 0;\n    long num = n;\n    while (num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev + 1);",
    "    long rev = 0;\n    long num = n;\n    while(num) {\n        rev = rev*10 + num%10;\n        num /= 10;\n    }\n    return (n == (rev*2 - 1));",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);",
    "    long rev = 0;\n    long num = n;\n    while(num) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == (rev - 1) / 2);",
    "    long r = 0;\n    long temp = n;\n    while(temp != 0) {\n        r = r*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == r-1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == 2*rev-1);",
    "    long rev = 0;\n    long temp = n;\n    while (temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == (rev * 2 - 1));",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);",
    "    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);",
    "    long r = 0;\n    long temp = n;\n    while(temp) {\n        r = r*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == r-1);"
  ]
}