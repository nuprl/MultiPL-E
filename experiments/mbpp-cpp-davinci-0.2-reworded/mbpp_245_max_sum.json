{
  "name": "mbpp_245_max_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector and finds the maximum sum of a bitonic subsequence for the given vector, where a sequence is bitonic if it is first increasing and then decreasing.\nlong max_sum(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)15, (long)51, (long)45, (long)33, (long)100, (long)12, (long)18, (long)9}))) == (194));\n    assert(candidate((std::vector<long>({(long)80, (long)60, (long)30, (long)40, (long)20, (long)10}))) == (210));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)14, (long)16, (long)21, (long)23, (long)29, (long)30}))) == (138));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j]) {\n                lis[i] = lis[j];\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j]) {\n                lds[i] = lds[j];\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(int i = 1; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    long dp[n];\n    for (long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for (long i = 1; i < n; i++) {\n        for (long j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for (long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        for (long j = n - 1; j > i; j--) {\n            if (arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for (long i = 0; i < n; i++) {\n        if (dp[i] + dp2[i] - arr[i] > max) {\n            max = dp[i] + dp2[i] - arr[i];\n        }\n    }\n    return max;",
    "    long max_sum = 0;\n    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, dp[i]);\n    }\n    return max_sum;",
    "    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp1[n];\n    for(long i = 0; i < n; i++) {\n        dp1[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i]) {\n                dp1[i] = dp1[j] + arr[i];\n            }\n        }\n    }\n    long max = dp[0] + dp1[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < dp[i] + dp1[i] - arr[i]) {\n            max = dp[i] + dp1[i] - arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    long max_sum = 0;\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    for(long i = 1; i < n; i++) {\n        left[i] = std::max(arr[i], left[i - 1] + arr[i]);\n    }\n    right[n - 1] = arr[n - 1];\n    for(long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(arr[i], right[i + 1] + arr[i]);\n    }\n    for(long i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, left[i] + right[i] - arr[i]);\n    }\n    return max_sum;",
    "    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {\n                dp[i] = dp[j] + arr[i];\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n-2; i >= 0; i--) {\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i]) {\n                dp2[i] = dp2[j] + arr[i];\n            }\n        }\n    }\n    long ans = INT_MIN;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;",
    "    int n = arr.size();\n    std::vector<long> inc(n, 0);\n    std::vector<long> dec(n, 0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(int i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(int j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    long dp[n];\n    for(long i=0;i<n;i++) dp[i] = arr[i];\n    for(long i=1;i<n;i++){\n        for(long j=0;j<i;j++){\n            if(arr[i]>arr[j]) dp[i] = std::max(dp[i],dp[j]+arr[i]);\n        }\n    }\n    long ans = dp[0];\n    for(long i=1;i<n;i++) ans = std::max(ans,dp[i]);\n    return ans;",
    "    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    long dp[n];\n    for(long i = 0; i < n; i++) {\n        dp[i] = arr[i];\n    }\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                dp[i] = std::max(dp[i], dp[j] + arr[i]);\n            }\n        }\n    }\n    long dp2[n];\n    for(long i = 0; i < n; i++) {\n        dp2[i] = arr[i];\n    }\n    for(long i = n - 2; i >= 0; i--) {\n        for(long j = n - 1; j > i; j--) {\n            if(arr[i] > arr[j]) {\n                dp2[i] = std::max(dp2[i], dp2[j] + arr[i]);\n            }\n        }\n    }\n    long ans = 0;\n    for(long i = 0; i < n; i++) {\n        ans = std::max(ans, dp[i] + dp2[i] - arr[i]);\n    }\n    return ans;",
    "    long n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    for(int i = 1; i < n; i++) {\n        for(int j = 0; j < i; j++) {\n            if(arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j]);\n            }\n        }\n        lis[i] += arr[i];\n    }\n    lds[n-1] = arr[n-1];\n    for(int i = n-2; i >= 0; i--) {\n        for(int j = n-1; j > i; j--) {\n            if(arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j]);\n            }\n        }\n        lds[i] += arr[i];\n    }\n    long max = 0;\n    for(int i = 0; i < n; i++) {\n        if(lis[i] + lds[i] - arr[i] > max) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;",
    "    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i=1;i<n;i++){\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++){\n            if(arr[i]>arr[j]){\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--){\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--){\n            if(arr[i]>arr[j]){\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<n;i++){\n        if(inc[i]+dec[i]-arr[i]>max){\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    std::vector<long> inc(n);\n    std::vector<long> dec(n);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        inc[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                inc[i] = inc[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        dec[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                dec[i] = dec[j] + arr[i];\n            }\n        }\n    }\n    long max = 0;\n    for(long i = 0; i < n; i++) {\n        if(max < inc[i] + dec[i] - arr[i]) {\n            max = inc[i] + dec[i] - arr[i];\n        }\n    }\n    return max;",
    "    int n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(int i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(int j=0;j<i;j++) {\n            if(arr[j] < arr[i]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(int i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(int j=n-1;j>i;j--) {\n            if(arr[j] < arr[i]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = 0;\n    for(int i=0;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;",
    "\tstd::vector<long> inc(arr.size(), 0);\n\tstd::vector<long> dec(arr.size(), 0);\n\tinc[0] = arr[0];\n\tdec[arr.size() - 1] = arr[arr.size() - 1];\n\tfor (int i = 1; i < arr.size(); i++) {\n\t\tinc[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tinc[i] = std::max(inc[i], inc[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = arr.size() - 2; i >= 0; i--) {\n\t\tdec[i] = arr[i];\n\t\tfor (int j = arr.size() - 1; j > i; j--) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdec[i] = std::max(dec[i], dec[j] + arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tlong max = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (inc[i] + dec[i] - arr[i] > max) {\n\t\t\tmax = inc[i] + dec[i] - arr[i];\n\t\t}\n\t}\n\treturn max;",
    "    int n = arr.size();\n    std::vector<long> lis(n, 0);\n    std::vector<long> lds(n, 0);\n    lis[0] = arr[0];\n    lds[n - 1] = arr[n - 1];\n    for (int i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] < arr[i]) {\n                lis[i] = std::max(lis[i], lis[j] + arr[i]);\n            }\n        }\n    }\n    for (int i = n - 2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for (int j = n - 1; j > i; j--) {\n            if (arr[j] < arr[i]) {\n                lds[i] = std::max(lds[i], lds[j] + arr[i]);\n            }\n        }\n    }\n    long max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum = std::max(max_sum, lis[i] + lds[i] - arr[i]);\n    }\n    return max_sum;",
    "    long n = arr.size();\n    std::vector<long> lis(n,0);\n    std::vector<long> lds(n,0);\n    lis[0] = arr[0];\n    lds[n-1] = arr[n-1];\n    for(long i = 1; i < n; i++) {\n        lis[i] = arr[i];\n        for(long j = 0; j < i; j++) {\n            if(arr[i] > arr[j] && lis[i] < lis[j] + arr[i]) {\n                lis[i] = lis[j] + arr[i];\n            }\n        }\n    }\n    for(long i = n-2; i >= 0; i--) {\n        lds[i] = arr[i];\n        for(long j = n-1; j > i; j--) {\n            if(arr[i] > arr[j] && lds[i] < lds[j] + arr[i]) {\n                lds[i] = lds[j] + arr[i];\n            }\n        }\n    }\n    long max = lis[0] + lds[0] - arr[0];\n    for(long i = 1; i < n; i++) {\n        if(max < lis[i] + lds[i] - arr[i]) {\n            max = lis[i] + lds[i] - arr[i];\n        }\n    }\n    return max;",
    "    long n = arr.size();\n    std::vector<long> inc(n,0);\n    std::vector<long> dec(n,0);\n    inc[0] = arr[0];\n    dec[n-1] = arr[n-1];\n    for(long i=1;i<n;i++) {\n        inc[i] = arr[i];\n        for(long j=0;j<i;j++) {\n            if(arr[i] > arr[j]) {\n                inc[i] = std::max(inc[i],inc[j]+arr[i]);\n            }\n        }\n    }\n    for(long i=n-2;i>=0;i--) {\n        dec[i] = arr[i];\n        for(long j=n-1;j>i;j--) {\n            if(arr[i] > arr[j]) {\n                dec[i] = std::max(dec[i],dec[j]+arr[i]);\n            }\n        }\n    }\n    long max = inc[0]+dec[0]-arr[0];\n    for(long i=1;i<n;i++) {\n        if(inc[i]+dec[i]-arr[i] > max) {\n            max = inc[i]+dec[i]-arr[i];\n        }\n    }\n    return max;",
    "  // Write your code here\n  long n = arr.size();\n  long left[n];\n  long right[n];\n  left[0] = arr[0];\n  right[n-1] = arr[n-1];\n  for(long i = 1; i < n; i++)\n  {\n    left[i] = std::max(left[i-1], arr[i]);\n  }\n  for(long i = n-2; i >= 0; i--)\n  {\n    right[i] = std::max(right[i+1], arr[i]);\n  }\n  long sum = 0;\n  for(long i = 0; i < n; i++)\n  {\n    sum += std::min(left[i], right[i]) - arr[i];\n  }\n  return sum;",
    "    long n = arr.size();\n    std::vector<long> left(n, 0);\n    std::vector<long> right(n, 0);\n    left[0] = arr[0];\n    right[n - 1] = arr[n - 1];\n    for (long i = 1; i < n; i++) {\n        left[i] = std::max(left[i - 1], arr[i]);\n    }\n    for (long i = n - 2; i >= 0; i--) {\n        right[i] = std::max(right[i + 1], arr[i]);\n    }\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        sum += std::min(left[i], right[i]) - arr[i];\n    }\n    return sum;"
  ]
}