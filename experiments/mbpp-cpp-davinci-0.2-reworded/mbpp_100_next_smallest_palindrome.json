{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlong next_smallest_palindrome(long num) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = next_smallest_palindrome;\n    assert(candidate((99)) == (101));\n    assert(candidate((1221)) == (1331));\n    assert(candidate((120)) == (121));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = num;\n    while(next_palindrome <= rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;",
    "    int n = num;\n    int digits = 0;\n    while(n) {\n        digits++;\n        n /= 10;\n    }\n    int mid = digits/2;\n    int left = mid-1;\n    int right = digits%2 == 0 ? mid : mid+1;\n    while(left >= 0 && num/pow(10, left) == num%10) {\n        left--;\n        right++;\n    }\n    if(left < 0) {\n        return num;\n    }\n    long left_half = num/pow(10, right);\n    long right_half = num%(long)pow(10, mid);\n    if(num/pow(10, left) < num%10) {\n        left_half = left_half-1;\n    }\n    long palindrome = left_half*pow(10, right) + right_half;\n    return palindrome;",
    "    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0){\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(num==rev){\n        num++;\n    }\n    while(num!=rev){\n        num++;\n        temp=num;\n        rev=0;\n        while(temp!=0){\n            rev=rev*10+temp%10;\n            temp/=10;\n        }\n    }\n    return num;",
    "    long temp = num;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if (num == rev) {\n        return num;\n    }\n    long next_palindrome = num;\n    while (next_palindrome <= rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while (temp != 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;",
    "    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    if(num < rev) {\n        return rev;\n    }\n    long temp1 = num;\n    int i = 0;\n    while(temp1 > 0) {\n        temp1 /= 10;\n        i++;\n    }\n    long temp2 = num;\n    long temp3 = num;\n    long temp4 = num;\n    long temp5 = num;\n    long temp6 = num;\n    long temp7 = num;\n    long temp8 = num;\n    long temp9 = num;\n    long temp10 = num;\n    long temp11 = num;\n    long temp12 = num;\n    long temp13 = num;\n    long temp14 = num;\n    long temp15 = num;\n    long temp16 = num;\n    long temp17 = num;\n    long temp18 = num;\n    long temp19 = num;\n    long temp20 = num;\n    long temp21 = num;\n    long temp22 = num;\n    long temp23 = num;\n    long temp24 = num;\n    long temp25 = num;\n    long temp26 = num;\n    long temp27 = num;\n    long temp28 = num;\n    long temp29 = num;\n    long temp30 = num;\n    long temp31 = num;\n    long temp32 = num;\n    long temp33 = num;\n    long temp34 = num;\n    long temp35 = num;\n    long temp36 = num;\n    long temp37 = num;\n    long temp38 = num;\n    long temp39 = num;\n    long temp40 = num;\n    long temp41 = num;\n    long temp42 = num;\n    long temp43 = num;\n    long temp44 = num;\n    long temp45 = num;\n    long temp46 = num;\n    long temp47 = num;\n    long temp48 = num;\n    long temp49 = num;\n   ",
    "    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len/2;\n    int left = mid - 1;\n    int right = (len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while(left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if(left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while(left >= 0) {\n        str[right++] = str[left--];\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if(len % 2 == 1) {\n            int num = str[mid] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            str[mid] = num + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while(left >= 0) {\n            int num = str[left] - '0';\n            num += carry;\n            carry = num / 10;\n            num %= 10;\n            str[left] = num + '0';\n            str[right] = str[left];\n            left--;\n            right++;\n        }\n    }\n    return std::stol(str);",
    "    std::string str = std::to_string(num);\n    int n = str.size();\n    int mid = n/2;\n    int left = mid - 1;\n    int right = (n%2)? mid + 1 : mid;\n    bool left_smaller = false;\n    while(left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if(left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while(left >= 0) {\n        str[right++] = str[left--];\n    }\n    if(left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if(n%2 == 1) {\n            int num = str[mid] - '0';\n            num += carry;\n            carry = num/10;\n            num = num%10;\n            str[mid] = num + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while(left >= 0) {\n            int num = str[left] - '0';\n            num += carry;\n            carry = num/10;\n            num = num%10;\n            str[left] = num + '0';\n            str[right] = str[left];\n            left--;\n            right++;\n        }\n    }\n    return std::stol(str);",
    "    // Write your code here\n    long temp = num;\n    int len = 0;\n    while(temp) {\n        len++;\n        temp /= 10;\n    }\n    int mid = len/2;\n    long left = num;\n    long right = num;\n    for(int i = 0; i < mid; i++) {\n        left /= 10;\n        right %= (long)pow(10, len - i - 1);\n    }\n    if(left == right) {\n        return num;\n    }\n    else if(left < right) {\n        left++;\n        right = left;\n        for(int i = 0; i < mid; i++) {\n            right *= 10;\n        }\n        return left + right;\n    }\n    else {\n        left--;\n        right = left;\n        for(int i = 0; i < mid; i++) {\n            right *= 10;\n        }\n        return left + right;\n    }",
    "    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string num_str = std::to_string(num);\n    int len = num_str.length();\n    int mid = len / 2;\n    int left_mid = (len % 2) ? mid : mid - 1;\n    int i = left_mid;\n    int j = (len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (i >= 0 && num_str[i] == num_str[j]) {\n        i--;\n        j++;\n    }\n    if (i < 0 || num_str[i] < num_str[j]) {\n        left_smaller = true;\n    }\n    while (i >= 0) {\n        num_str[j] = num_str[i];\n        j++;\n        i--;\n    }\n    if (left_smaller) {\n        int carry = 1;\n        i = left_mid;\n        if (len % 2 == 1) {\n            int num = num_str[mid] - '0' + carry;\n            carry = num / 10;\n            num_str[mid] = (num % 10) + '0';\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n        while (i >= 0) {\n            int num = num_str[i] - '0' + carry;\n            carry = num / 10;\n            num_str[i] = (num % 10) + '0';\n            num_str[j++] = num_str[i--];\n        }\n    }\n    return std::stol(num_str);",
    "    long temp = num;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = num;\n    while(next_palindrome <= rev) {\n        next_palindrome++;\n        temp = next_palindrome;\n        rev = 0;\n        while(temp != 0) {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n    }\n    return next_palindrome;",
    "    // Write your code here\n    long n=num;\n    long rev=0;\n    long temp=n;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp=temp/10;\n    }\n    if(rev==n)\n    {\n        return n;\n    }\n    else\n    {\n        long temp1=n+1;\n        long rev1=0;\n        while(temp1!=0)\n        {\n            rev1=rev1*10+temp1%10;\n            temp1=temp1/10;\n        }\n        if(rev1==temp1)\n        {\n            return temp1;\n        }\n        else\n        {\n            return rev;\n        }\n    }",
    "    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return rev;\n    }\n    if(rev > num) {\n        return rev;\n    }\n    long pal = num;\n    while(pal < rev) {\n        pal++;\n        temp = pal;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev*10 + temp%10;\n            temp /= 10;\n        }\n        if(rev == pal) {\n            return rev;\n        }\n    }\n    return -1;",
    "    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(temp!=0)\n    {\n        rev=rev*10+temp%10;\n        temp/=10;\n    }\n    if(rev==num)\n    {\n        return num;\n    }\n    else\n    {\n        return rev;\n    }",
    "    // Write your code here\n    long temp = num;\n    long rev = 0;\n    while(temp != 0){\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    if(rev == num){\n        return num;\n    }\n    else{\n        return next_smallest_palindrome(num+1);\n    }",
    "    if (num < 0) {\n        return -1;\n    }\n    if (num < 10) {\n        return num;\n    }\n    std::string str = std::to_string(num);\n    int len = str.length();\n    int mid = len / 2;\n    int left = mid - 1;\n    int right = (len % 2) ? mid + 1 : mid;\n    bool left_smaller = false;\n    while (left >= 0 && str[left] == str[right]) {\n        left--;\n        right++;\n    }\n    if (left < 0 || str[left] < str[right]) {\n        left_smaller = true;\n    }\n    while (left >= 0) {\n        str[right++] = str[left--];\n    }\n    if (left_smaller) {\n        int carry = 1;\n        left = mid - 1;\n        if (len % 2 == 1) {\n            int num = str[mid] - '0' + carry;\n            carry = num / 10;\n            str[mid] = (num % 10) + '0';\n            right = mid + 1;\n        } else {\n            right = mid;\n        }\n        while (left >= 0) {\n            int num = str[left] - '0' + carry;\n            carry = num / 10;\n            str[left] = (num % 10) + '0';\n            str[right++] = str[left--];\n        }\n    }\n    return std::stol(str);",
    "    long n = num;\n    int digits = 0;\n    while (n > 0) {\n        n /= 10;\n        digits++;\n    }\n    int half_digits = digits / 2;\n    int i = 0;\n    long left = 0;\n    long right = 0;\n    while (i < half_digits) {\n        left = left * 10 + (num % 10);\n        right = right + (num % 10) * pow(10, i);\n        num /= 10;\n        i++;\n    }\n    if (digits % 2 == 1) {\n        left = left * 10 + (num % 10);\n        right = right + (num % 10) * pow(10, i);\n        num /= 10;\n    }\n    if (left < right) {\n        left = left + 1;\n    }\n    long result = left;\n    i = 0;\n    while (i < half_digits) {\n        result = result * 10 + (left % 10);\n        left /= 10;\n        i++;\n    }\n    return result;",
    "    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(num == rev) {\n        return num;\n    }\n    if(num > rev) {\n        return rev;\n    }\n    long palindrome = num;\n    while(palindrome <= rev) {\n        palindrome++;\n        temp = palindrome;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(palindrome == rev) {\n            return palindrome;\n        }\n    }\n    return -1;",
    "    long temp = num;\n    long rev = 0;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    if(rev == num) {\n        return num;\n    }\n    long next_palindrome = num + 1;\n    while(true) {\n        temp = next_palindrome;\n        rev = 0;\n        while(temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        if(rev == next_palindrome) {\n            return next_palindrome;\n        }\n        next_palindrome++;\n    }",
    "    // Write your code here\n    long temp=num;\n    long rev=0;\n    while(num>0)\n    {\n        rev=rev*10+num%10;\n        num=num/10;\n    }\n    if(temp==rev)\n    {\n        return temp;\n    }\n    else\n    {\n        return rev;\n    }",
    "    // Write your code here\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n    long a[100],b[100];\n    i=0;\n    while(num!=0)\n    {\n        a[i]=num%10;\n        num=num/10;\n        i++;\n    }\n    j=i-1;\n    for(k=0;k<i;k++)\n    {\n        b[k]=a[j];\n        j--;\n    }\n    l=0;\n    for(m=0;m<i;m++)\n    {\n        if(a[m]!=b[m])\n        {\n            l=1;\n            break;\n        }\n    }\n    if(l==0)\n    {\n        for(n=0;n<i;n++)\n        {\n            if(a[n]!=9)\n            {\n                a[n]++;\n                break;\n            }\n            else\n            {\n                a[n]=0;\n            }\n        }\n        if(n==i)\n        {\n            a[i]=1;\n            i++;\n        }\n    }\n    o=0;\n    for(p=i-1;p>=0;p--)\n    {\n        o=o*10+a[p];\n    }\n    return o;"
  ]
}