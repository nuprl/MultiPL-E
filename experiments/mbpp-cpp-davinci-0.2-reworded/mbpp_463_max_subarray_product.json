{
  "name": "mbpp_463_max_subarray_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product subvector of the given vector.\nlong max_subarray_product(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_subarray_product;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)0, (long)7, (long)-8, (long)-2}))) == (112));\n    assert(candidate((std::vector<long>({(long)6, (long)-3, (long)-10, (long)0, (long)2}))) == (180));\n    assert(candidate((std::vector<long>({(long)-2, (long)-40, (long)0, (long)-2, (long)-3}))) == (80));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        }\n        else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    if(arr.size() == 0) return 0;\n    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        long temp = max_so_far;\n        max_so_far = std::max(std::max(max_so_far * arr[i], min_so_far * arr[i]), arr[i]);\n        min_so_far = std::min(std::min(temp * arr[i], min_so_far * arr[i]), arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        }\n        else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here;\n    }\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i],1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i],1L);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_product = max_product*arr[i];\n            min_product = std::min(min_product*arr[i],1);\n        }\n        else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        }\n        else {\n            long temp = max_product;\n            max_product = std::max(min_product*arr[i],1);\n            min_product = temp*arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = arr[0];\n    long min_product = arr[0];\n    long result = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            std::swap(max_product, min_product);\n        }\n        max_product = std::max(arr[i], max_product * arr[i]);\n        min_product = std::min(arr[i], min_product * arr[i]);\n        result = std::max(result, max_product);\n    }\n    return result;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        if(min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = arr[0];\n    long min_product = arr[0];\n    long max_so_far = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_product, min_product);\n        }\n        max_product = std::max(arr[i], max_product * arr[i]);\n        min_product = std::min(arr[i], min_product * arr[i]);\n        max_so_far = std::max(max_so_far, max_product);\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here;\n    }\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far*arr[i]);\n        min_so_far = std::min(arr[i], min_so_far*arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_product = max_product*arr[i];\n            min_product = std::min(min_product*arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        } else {\n            long temp = max_product;\n            max_product = std::max(min_product*arr[i], 1L);\n            min_product = temp*arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_ending_here = arr[0];\n    long min_ending_here = arr[0];\n    long max_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = std::max(max_ending_here * arr[i], arr[i]);\n            min_ending_here = std::min(min_ending_here * arr[i], arr[i]);\n        } else if (arr[i] == 0) {\n            max_ending_here = 0;\n            min_ending_here = 0;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], arr[i]);\n            min_ending_here = std::min(temp * arr[i], arr[i]);\n        }\n        if (max_ending_here > max_so_far) {\n            max_so_far = max_ending_here;\n        }\n        if (min_ending_here < min_so_far) {\n            min_so_far = min_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        if (min_so_far > min_ending_here) {\n            min_so_far = min_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i],1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i],1L);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i]>0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i],1L);\n        } else if(arr[i]==0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i],1L);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far<max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i],1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i],1);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long result = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "\tlong max_ending_here = 1;\n\tlong min_ending_here = 1;\n\tlong max_so_far = 1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = std::min(min_ending_here * arr[i], 1L);\n\t\t} else if (arr[i] == 0) {\n\t\t\tmax_ending_here = 1;\n\t\t\tmin_ending_here = 1;\n\t\t} else {\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = std::max(min_ending_here * arr[i], 1L);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\treturn max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "\tlong max_ending_here = 1;\n\tlong min_ending_here = 1;\n\tlong max_so_far = 1;\n\tfor(int i = 0; i < arr.size(); i++) {\n\t\tif(arr[i] > 0) {\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = std::min(min_ending_here * arr[i], 1L);\n\t\t} else if(arr[i] == 0) {\n\t\t\tmax_ending_here = 1;\n\t\t\tmin_ending_here = 1;\n\t\t} else {\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = std::max(min_ending_here * arr[i], 1L);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\tif(max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\treturn max_so_far;",
    "\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\tlong max_ending_here = 1;\n\tlong min_ending_here = 1;\n\tlong max_product = 1;\n\tfor(int i = 0; i < arr.size(); i++) {\n\t\tif(arr[i] > 0) {\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = std::min(min_ending_here * arr[i], 1l);\n\t\t} else if(arr[i] == 0) {\n\t\t\tmax_ending_here = 1;\n\t\t\tmin_ending_here = 1;\n\t\t} else {\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = std::max(min_ending_here * arr[i], 1l);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\tif(max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t\tif(min_so_far > min_ending_here) {\n\t\t\tmin_so_far = min_ending_here;\n\t\t}\n\t}\n\treturn max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (auto x : arr) {\n        if (x > 0) {\n            max_ending_here = max_ending_here * x;\n            min_ending_here = std::min(min_ending_here * x, 1L);\n        } else if (x == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * x, 1L);\n            min_ending_here = temp * x;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = 1;\n    long min_product = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_product = max_product * arr[i];\n            min_product = std::min(min_product * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_product = 1;\n            min_product = 1;\n        }\n        else {\n            long temp = max_product;\n            max_product = std::max(min_product * arr[i], 1);\n            min_product = temp * arr[i];\n        }\n        if(max_so_far < max_product) {\n            max_so_far = max_product;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = arr[0];\n    long min_so_far = arr[0];\n    long max_product = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] < 0) {\n            std::swap(max_so_far, min_so_far);\n        }\n        max_so_far = std::max(arr[i], max_so_far * arr[i]);\n        min_so_far = std::min(arr[i], min_so_far * arr[i]);\n        max_product = std::max(max_product, max_so_far);\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1L);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "  long max_ending_here = 1;\n  long min_ending_here = 1;\n  long max_so_far = 1;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n      max_ending_here = max_ending_here * arr[i];\n      min_ending_here = std::min(min_ending_here * arr[i], 1L);\n    } else if (arr[i] == 0) {\n      max_ending_here = 1;\n      min_ending_here = 1;\n    } else {\n      long temp = max_ending_here;\n      max_ending_here = std::max(min_ending_here * arr[i], 1L);\n      min_ending_here = temp * arr[i];\n    }\n    if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here;\n    }\n  }\n  return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long ans = INT_MIN;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_so_far = 1;\n    long min_so_far = 1;\n    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_product = arr[0];\n    long min_product = arr[0];\n    long max_so_far = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        long temp = max_product;\n        max_product = std::max(std::max(max_product * arr[i], min_product * arr[i]), arr[i]);\n        min_product = std::min(std::min(temp * arr[i], min_product * arr[i]), arr[i]);\n        max_so_far = std::max(max_so_far, max_product);\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "\tlong max_ending_here = 1;\n\tlong min_ending_here = 1;\n\tlong max_so_far = 1;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] > 0) {\n\t\t\tmax_ending_here = max_ending_here * arr[i];\n\t\t\tmin_ending_here = std::min(min_ending_here * arr[i], 1L);\n\t\t} else if (arr[i] == 0) {\n\t\t\tmax_ending_here = 1;\n\t\t\tmin_ending_here = 1;\n\t\t} else {\n\t\t\tlong temp = max_ending_here;\n\t\t\tmax_ending_here = std::max(min_ending_here * arr[i], 1L);\n\t\t\tmin_ending_here = temp * arr[i];\n\t\t}\n\t\tif (max_so_far < max_ending_here) {\n\t\t\tmax_so_far = max_ending_here;\n\t\t}\n\t}\n\treturn max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        }\n        else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "  long max_so_far = arr[0];\n  long min_so_far = arr[0];\n  long max_product = arr[0];\n  for(int i = 1; i < arr.size(); i++) {\n    if(arr[i] < 0) {\n      std::swap(max_so_far, min_so_far);\n    }\n    max_so_far = std::max(arr[i], max_so_far * arr[i]);\n    min_so_far = std::min(arr[i], min_so_far * arr[i]);\n    max_product = std::max(max_product, max_so_far);\n  }\n  return max_product;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i],1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i],1);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1);\n        } else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = std::min(min_ending_here * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here * arr[i], 1L);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;",
    "    long max_ending_here = 1;\n    long min_ending_here = 1;\n    long max_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_ending_here = max_ending_here*arr[i];\n            min_ending_here = std::min(min_ending_here*arr[i], 1);\n        }\n        else if(arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        }\n        else {\n            long temp = max_ending_here;\n            max_ending_here = std::max(min_ending_here*arr[i], 1);\n            min_ending_here = temp*arr[i];\n        }\n        if(max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    return max_so_far;"
  ]
}