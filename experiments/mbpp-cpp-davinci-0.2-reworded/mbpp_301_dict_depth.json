{
  "name": "mbpp_301_dict_depth",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the depth of a map.\nlong dict_depth(std::any d) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = dict_depth;\n    assert(candidate((std::any({{\"a\", 1}, {\"b\", std::map<std::string,std::map<std::string,std::map<long,long>>>({{\"c\", std::map<std::string,std::map<long,long>>({{\"d\", std::map<long,long>()}})}})}}))) == (4));\n    assert(candidate((std::any({{\"a\", 1}, {\"b\", std::map<std::string,std::string>({{\"c\", \"python\"}})}}))) == (2));\n    assert(candidate((std::any({{1, \"Sun\"}, {2, std::map<long,std::map<long,std::string>>({{3, std::any({{4, \"Mon\"}})}})}}))) == (3));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); ++it) {\n            long depth = dict_depth(it->second);\n            if(depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(it.second);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    } else {\n        return 1;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        long depth = dict_depth(it->second);\n        if(depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(kv.second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(kv.second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); ++it) {\n            long depth = dict_depth(it->second);\n            if(depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        auto m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); it++){\n            long depth = dict_depth(it->second);\n            if(depth > max_depth){\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max = 0;\n    for (auto &[key, value] : d) {\n        if (value.type() == typeid(std::map<std::string, std::any>)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& it : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(it.second);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    for (auto it = d.begin(); it != d.end(); it++) {\n        if (it->second.type() == typeid(std::any)) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n    }\n    return 1 + depth;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        auto m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto &[key, value] : m) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    } else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d))\n        max_depth = std::max(max_depth, dict_depth(value));\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto it = m.begin(); it != m.end(); ++it) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin();\n         it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(kv.second);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(kv.second);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return depth;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    for (auto it = m.begin(); it != m.end(); it++) {\n        depth = std::max(depth, dict_depth(it->second));\n    }\n    return depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "  if (d.type() != typeid(std::map<std::string, std::any>)) {\n    return 0;\n  }\n  long max_depth = 0;\n  for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n    max_depth = std::max(max_depth, dict_depth(kv.second));\n  }\n  return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[k, v] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(v));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto it = m.begin(); it != m.end(); it++) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto &i : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(i.second));\n        }\n        return depth + 1;\n    } else {\n        return 0;\n    }",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(kv.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::any, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& kv : std::any_cast<std::map<std::any, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth)\n            max_depth = depth;\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto const& [key, val] : m) {\n            max_depth = std::max(max_depth, dict_depth(val));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n            long depth = dict_depth(it->second);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(!d.has_value()) return 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for(auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        depth = 1;\n        for (auto &i : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(i.second) + 1);\n        }\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    // Your code here\n    long depth = 0;\n    if(d.type() == typeid(std::map<std::string, std::any>)){\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for(auto it = m.begin(); it != m.end(); it++){\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        depth = std::max(depth, dict_depth(value));\n    }\n    return depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "  long depth = 0;\n  if (d.type() == typeid(std::map<std::string, std::any>)) {\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n      depth = std::max(depth, dict_depth(value));\n    }\n    return depth + 1;\n  }\n  return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [k, v] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(v));\n    }\n    return max_depth + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto const& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::pair<std::any, long>> q;\n    q.push(std::make_pair(d, 1));\n    while (!q.empty()) {\n        auto p = q.front();\n        q.pop();\n        auto key = p.first;\n        auto depth = p.second;\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        if (key.type() == typeid(std::map<std::string, std::any>)) {\n            auto m = std::any_cast<std::map<std::string, std::any>>(key);\n            for (auto it = m.begin(); it != m.end(); ++it) {\n                q.push(std::make_pair(it->second, depth + 1));\n            }\n        }\n    }\n    return max_depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(val);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto const& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto &it : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(it.second);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for (auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto it = m.begin(); it != m.end(); ++it) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "  if(d.type() != typeid(std::map<std::string, std::any>)) {\n    return 0;\n  }\n  long max_depth = 0;\n  for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n    max_depth = std::max(max_depth, dict_depth(value));\n  }\n  return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto const &[key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(val);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin();\n         it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        long depth = dict_depth(it->second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max_depth = 0;\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "  if (d.type() != typeid(std::map<std::string, std::any>)) {\n    return 0;\n  }\n  long max_depth = 0;\n  for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n    max_depth = std::max(max_depth, dict_depth(value));\n  }\n  return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : d) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        depth = std::max(depth, dict_depth(value));\n    }\n    return depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for(auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n            long depth = dict_depth(it->second);\n            if(depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [k, v] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(v);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        long depth = dict_depth(it->second);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d))\n        max_depth = std::max(max_depth, dict_depth(value));\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto const& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); ++it) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    } else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long mx = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        mx = std::max(mx, dict_depth(value));\n    }\n    return mx + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        depth = std::max(depth, dict_depth(value));\n    }\n    return depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)){\n        long max_depth = 0;\n        for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)){\n            max_depth = std::max(max_depth, dict_depth(value));\n        }\n        return max_depth + 1;\n    }\n    else{\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(kv.second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    long max = 0;\n    for (auto& [key, value] : d) {\n        if (value.type() == typeid(std::any)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    } else {\n        return 1;\n    }",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for (auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    } else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto it = m.begin(); it != m.end(); it++) {\n            depth = std::max(depth, dict_depth(it->second));\n        }\n        return depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto elem : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(elem.second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        depth = std::max(depth, dict_depth(value));\n    }\n    return 1 + depth;",
    "    if(d.type() != typeid(std::map<std::string, std::any>)){\n        return 0;\n    }\n    auto m = std::any_cast<std::map<std::string, std::any>>(d);\n    long max_depth = 0;\n    for(auto it = m.begin(); it != m.end(); it++){\n        long depth = dict_depth(it->second);\n        if(depth > max_depth){\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max)\n                max = depth;\n        }\n        return max + 1;\n    }\n    else\n        return 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); it++) {\n        max_depth = std::max(max_depth, dict_depth(it->second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if(d.type() != typeid(std::map<std::string, std::any>))\n        return 1;\n    long max_depth = 0;\n    for(auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max_depth = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    }\n    else {\n        return 0;\n    }",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long max_depth = 0;\n    std::queue<std::any> q;\n    q.push(d);\n    while (!q.empty()) {\n        auto curr = q.front();\n        q.pop();\n        if (curr.type() == typeid(std::map<std::string, std::any>)) {\n            auto curr_map = std::any_cast<std::map<std::string, std::any>>(curr);\n            for (auto it = curr_map.begin(); it != curr_map.end(); ++it) {\n                q.push(it->second);\n            }\n        }\n        max_depth++;\n    }\n    return max_depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>))\n        return 0;\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max)\n            max = depth;\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto it = std::any_cast<std::map<std::string, std::any>>(d).begin(); it != std::any_cast<std::map<std::string, std::any>>(d).end(); ++it) {\n        long depth = dict_depth(it->second);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto &[key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    long depth = 1;\n    for (auto it = d.begin(); it != d.end(); ++it) {\n        if (it->second.type() == typeid(std::any)) {\n            depth = std::max(depth, 1 + dict_depth(it->second));\n        }\n    }\n    return depth;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& kv : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(kv.second));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    // Your code here\n    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        for (auto i : m) {\n            depth = std::max(depth, dict_depth(i.second));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    long depth = 0;\n    if (d.type() == typeid(std::map<std::string, std::any>)) {\n        for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n            depth = std::max(depth, dict_depth(value));\n        }\n        return depth + 1;\n    }\n    return depth;",
    "    if (!d.has_value()) {\n        return 0;\n    }\n    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        throw std::invalid_argument(\"not a dictionary\");\n    }\n    long max = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(value);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max = 0;\n    for (auto const& [key, val] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        long depth = dict_depth(val);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if (d.type() != typeid(std::map<std::string, std::any>)) {\n        return 0;\n    }\n    long max_depth = 0;\n    for (auto& [key, value] : std::any_cast<std::map<std::string, std::any>>(d)) {\n        max_depth = std::max(max_depth, dict_depth(value));\n    }\n    return max_depth + 1;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        long max = 0;\n        for(auto& [key, value]: std::any_cast<std::map<std::string, std::any>>(d)) {\n            long depth = dict_depth(value);\n            if(depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;",
    "    if(d.type() == typeid(std::map<std::string, std::any>)) {\n        std::map<std::string, std::any> m = std::any_cast<std::map<std::string, std::any>>(d);\n        long max = 0;\n        for(auto it = m.begin(); it != m.end(); it++) {\n            long depth = dict_depth(it->second);\n            if(depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;"
  ]
}