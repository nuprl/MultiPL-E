{
  "name": "mbpp_283_validate",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10]={0};\n    while(n>0) {\n        int digit = n%10;\n        freq[digit]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i]>i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n = n/10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    std::vector<int> v(10, 0);\n    while (n) {\n        v[n%10]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (v[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int r = n%10;\n        freq[r]++;\n        if(freq[r] > r) {\n            return false;\n        }\n        n = n/10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int count[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        count[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(count[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n = n / 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int freq[10]={0};\n    int digit;\n    while(n>0)\n    {\n        digit=n%10;\n        freq[digit]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(freq[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        freq[n%10]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n = n / 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        arr[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int d = n % 10;\n        freq[d]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int count[10] = {0};\n    while(n) {\n        count[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(count[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n>0){\n        int rem = n%10;\n        arr[rem]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i]>i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int digit=n%10;\n        arr[digit]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    int temp = n;\n    while(temp > 0) {\n        int digit = temp % 10;\n        arr[digit]++;\n        temp /= 10;\n    }\n    temp = n;\n    while(temp > 0) {\n        int digit = temp % 10;\n        if(arr[digit] > digit) {\n            return false;\n        }\n        temp /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int freq[10] = {0};\n    while(n > 0) {\n        freq[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int a[10] = {0};\n    while(n) {\n        int r = n % 10;\n        a[r]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(a[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        freq[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int rem = n % 10;\n        freq[rem]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int freq[10] = {0};\n    while(n>0){\n        int rem = n%10;\n        freq[rem]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(freq[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int arr[10] = {0};\n    while(n) {\n        int rem = n%10;\n        arr[rem]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n){\n        int r = n%10;\n        arr[r]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n > 0){\n        int rem = n % 10;\n        arr[rem]++;\n        n = n / 10;\n    }\n    for(int i = 0; i < 10; i++){\n        if(arr[i] > i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    while(n!=0){\n        int r=n%10;\n        a[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(a[i]>i)\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n!=0){\n        arr[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int count[10] = {0};\n    while(n) {\n        count[n%10]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(count[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n>0){\n        int rem = n%10;\n        arr[rem]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n!=0)\n    {\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int x=n%10;\n        arr[x]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int a[10]={0};\n    while(n>0){\n        a[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(a[i]>i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        arr[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n % 10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n) {\n        int r = n%10;\n        arr[r]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(arr[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    while(n>0)\n    {\n        int r=n%10;\n        a[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(a[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int a[10] = {0};\n    while(n) {\n        a[n%10]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(a[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i]>i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) return false;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n > 0) {\n        int rem = n % 10;\n        arr[rem]++;\n        n = n / 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n>0)\n    {\n        int rem = n%10;\n        arr[rem]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int d = n % 10;\n        freq[d]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int count[10] = {0};\n    while (n > 0) {\n        int digit = n % 10;\n        count[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (count[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        freq[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int r = n%10;\n        freq[r]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int arr[10] = {0};\n    while(n) {\n        int rem = n%10;\n        arr[rem]++;\n        n = n/10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    while(n>0)\n    {\n        a[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(a[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        freq[n % 10]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int freq[10] = {0};\n    while(n){\n        int d = n%10;\n        freq[d]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(freq[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n%10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int freq[10] = {0};\n    while(n>0) {\n        int digit = n%10;\n        freq[digit]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i]>i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n\t// Write your code here\n\tint a[10]={0};\n\twhile(n>0)\n\t{\n\t\tint r=n%10;\n\t\ta[r]++;\n\t\tn=n/10;\n\t}\n\tfor(int i=0;i<10;i++)\n\t{\n\t\tif(a[i]>i)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n>0){\n        int rem = n%10;\n        arr[rem]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int r=n%10;\n        arr[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int a[10] = {0};\n    while (n) {\n        int d = n % 10;\n        a[d]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (a[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0)\n    {\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    while(n>0){\n        int r=n%10;\n        a[r]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(a[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    int i;\n    while(n>0){\n        i=n%10;\n        a[i]++;\n        n=n/10;\n    }\n    for(i=0;i<10;i++){\n        if(a[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n > 0) {\n        int rem = n % 10;\n        arr[rem]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit)\n            return false;\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int count[10] = {0};\n    while(n) {\n        count[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(count[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n>0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int count[10] = {0};\n    while(n>0){\n        int digit = n%10;\n        count[digit]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(count[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        freq[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    long temp=n;\n    int arr[10]={0};\n    while(temp!=0)\n    {\n        arr[temp%10]++;\n        temp=temp/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n>0)\n    {\n        int r = n%10;\n        arr[r]++;\n        n = n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(arr[i]>i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n) {\n        int r = n%10;\n        arr[r]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10];\n    for(int i=0;i<10;i++)\n        a[i]=0;\n    while(n>0)\n    {\n        a[n%10]++;\n        n/=10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(a[i]>i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int a[10]={0};\n    while(n>0)\n    {\n        a[n%10]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++)\n    {\n        if(a[i]>i)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    std::map<int, int> freq;\n    while(n > 0) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(auto it = freq.begin(); it != freq.end(); it++) {\n        if(it->second > it->first) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10]={0};\n    while(n!=0){\n        int rem=n%10;\n        arr[rem]++;\n        n=n/10;\n    }\n    for(int i=0;i<10;i++){\n        if(arr[i]>i){\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n % 10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1665510256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while (n) {\n        int d = n % 10;\n        freq[d]++;\n        n /= 10;\n    }\n    for (int i = 0; i < 10; i++) {\n        if (freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int rem = n%10;\n        freq[rem]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0;i<10;i++) {\n        if(freq[i] > i)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n > 0) {\n        int r = n % 10;\n        arr[r]++;\n        n = n / 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int d = n % 10;\n        freq[d]++;\n        if(freq[d] > d) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122880,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    // Write your code here\n    int arr[10] = {0};\n    while(n) {\n        arr[n%10]++;\n        n /= 10;\n    }\n    for(int i = 0; i < 10; i++) {\n        if(arr[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        n /= 10;\n    }\n    for(int i=0; i<10; i++) {\n        if(freq[i] > i) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nbool validate(long n) {\n    int freq[10] = {0};\n    while(n) {\n        int digit = n%10;\n        freq[digit]++;\n        if(freq[digit] > digit) {\n            return false;\n        }\n        n /= 10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = validate;\n    assert(candidate((1234)) == (true));\n    assert(candidate((51241)) == (false));\n    assert(candidate((321)) == (true));\n}\n",
      "timestamp": 1666122878,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}