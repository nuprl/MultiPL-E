{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for(int i = 0; i < n; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == n-1) {\n                return false;\n            }\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!isalpha(text[i - 1]) || !isalpha(text[i + 1])) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i+1]>='a' && text[i+1]<='z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i]>='a' && text[i]<='z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        }\n    }\n    if (underscore_count == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i+1] == '_') {\n                return false;\n            }\n            if (text[i+1] < 'a' || text[i+1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp0io2igw7: /tmp/tmp0io2igw7.cpp:30: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                flag = false;\n                break;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp95h8udna: /tmp/tmp95h8udna.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpdvezth4n: /tmp/tmpdvezth4n.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) return false;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len-1) return false;\n            if(!islower(text[i-1]) || !islower(text[i+1])) return false;\n        }\n        else if(!islower(text[i])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    bool flag = false;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n            i++;\n        }\n        else if(text[i] == '_') {\n            flag = true;\n            i++;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (i == 0 && text[i] == '_') {\n            flag = false;\n            break;\n        }\n        if (i == text.length() - 1 && text[i] == '_') {\n            flag = false;\n            break;\n        }\n        if (text[i] == '_' && text[i + 1] == '_') {\n            flag = false;\n            break;\n        }\n        if (text[i] == '_' && !islower(text[i + 1])) {\n            flag = false;\n            break;\n        }\n        if (!islower(text[i]) && text[i] != '_') {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        }\n    }\n    if (underscore_count == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i+1] == '_') {\n                return false;\n            }\n            if (text[i-1] == '_') {\n                return false;\n            }\n        }\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (!isalpha(text[i-1])) {\n                return false;\n            }\n            if (!isalpha(text[i+1])) {\n                return false;\n            }\n        }\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (!islower(text[i-1])) {\n                return false;\n            }\n            if (!islower(text[i+1])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmplpersrx4: /tmp/tmplpersrx4.cpp:50: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp87mo3bnw: /tmp/tmp87mo3bnw.cpp:22: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i-1]>='a' && text[i-1]<='z' && text[i+1]>='a' && text[i+1]<='z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpvhzx8ga6: /tmp/tmpvhzx8ga6.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == '_') {\n      if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n        return false;\n      }\n      if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpgz601fd4: /tmp/tmpgz601fd4.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int i=0;\n    while(text[i]!='\\0')\n    {\n        if(text[i]=='_')\n        {\n            if(text[i-1]>='a' && text[i-1]<='z')\n            {\n                if(text[i+1]>='a' && text[i+1]<='z')\n                {\n                    i++;\n                    continue;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(text[i]>='a' && text[i]<='z')\n        {\n            i++;\n            continue;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmp9j21g1fv: /tmp/tmp9j21g1fv.cpp:22: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpfdu62cxw: /tmp/tmpfdu62cxw.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    continue;\n                }\n            }\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmp9orkthsz: /tmp/tmp9orkthsz.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore = 0;\n    int lowercase = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore++;\n        }\n        if (islower(text[i])) {\n            lowercase++;\n        }\n    }\n    if (underscore == 0) {\n        return false;\n    }\n    if (lowercase == 0) {\n        return false;\n    }\n    if (underscore == lowercase) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmptisby5t0: /tmp/tmptisby5t0.cpp:28: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool underscore = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (underscore == true) {\n                return false;\n            }\n            underscore = true;\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            underscore = false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (isalpha(text[i]) && islower(text[i])) {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  while(i < text.length()) {\n    if(text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n      continue;\n    }\n    if(text[i] == '_') {\n      i++;\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  int len = text.length();\n  while (i < len) {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n      continue;\n    }\n    if (text[i] == '_') {\n      i++;\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        } else {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpqyqyjlvt: /tmp/tmpqyqyjlvt.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] == '_') {\n            if(i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpxrw4api1: /tmp/tmpxrw4api1.cpp:23: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(!((text[i] >= 'a' && text[i] <= 'z') || text[i] == '_')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i+1]>=97 && text[i+1]<=122) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i]>=97 && text[i]<=122) {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpcdptq_2k: /tmp/tmpcdptq_2k.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpiu03nb42: /tmp/tmpiu03nb42.cpp:23: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for(int i=0; i<n; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == n-1)\n                return false;\n            if(!(text[i-1] >= 'a' && text[i-1] <= 'z'))\n                return false;\n            if(!(text[i+1] >= 'a' && text[i+1] <= 'z'))\n                return false;\n        }\n        else {\n            if(!(text[i] >= 'a' && text[i] <= 'z'))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    bool flag = false;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(flag == true && text[i] >= 'a' && text[i] <= 'z') {\n            flag = false;\n        }\n        else if(flag == false && text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z') {\n                flag = false;\n                break;\n            }\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmpe7zzo79o: /tmp/tmpe7zzo79o.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (i == 0) {\n            if (!isalpha(text[i])) {\n                return false;\n            }\n        }\n        else if (i == text.length() - 1) {\n            if (!isalpha(text[i])) {\n                return false;\n            }\n        }\n        else {\n            if (!isalpha(text[i]) && text[i] != '_') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmpwsi8zahk: /tmp/tmpwsi8zahk.cpp:30: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i-1]>='a' && text[i-1]<='z' && text[i+1]>='a' && text[i+1]<='z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmpvhzx8ga6: /tmp/tmpvhzx8ga6.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmpyrum94d3: /tmp/tmpyrum94d3.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpcdptq_2k: /tmp/tmpcdptq_2k.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int underscore = 0;\n    int length = text.length();\n    for (int i = 0; i < length; i++) {\n        if (text[i] == 'a') {\n            a++;\n        }\n        if (text[i] == 'b') {\n            b++;\n        }\n        if (text[i] == 'c') {\n            c++;\n        }\n        if (text[i] == 'd') {\n            d++;\n        }\n        if (text[i] == 'e') {\n            e++;\n        }\n        if (text[i] == 'f') {\n            f++;\n        }\n        if (text[i] == 'g') {\n            g++;\n        }\n        if (text[i] == 'h') {\n            h++;\n        }\n        if (text[i] == 'i') {\n            i++;\n        }\n        if (text[i] == 'j') {\n            j++;\n        }\n        if (text[i] == 'k') {\n            k++;\n        }\n        if (text[i] == 'l') {\n            l++;\n        }\n        if (text[i] == 'm') {\n            m++;\n        }\n        if (text[i] == 'n') {\n            n++;\n        }\n        if (text[i] == 'o') {\n            o++;\n        }\n        if (text[i] == 'p') {\n            p++;\n        }\n        if (text[i] == 'q') {\n            q++;\n        }\n        if (text[i] == 'r') {\n\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "/tmp/tmpozepp1ke.cpp: In function \u2018bool text_lowercase_underscore(std::string)\u2019:\n/tmp/tmpozepp1ke.cpp:27:13: error: \u2018a\u2019 was not declared in this scope\n   27 |             a++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:30:13: error: \u2018b\u2019 was not declared in this scope\n   30 |             b++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:33:13: error: \u2018c\u2019 was not declared in this scope\n   33 |             c++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:36:13: error: \u2018d\u2019 was not declared in this scope\n   36 |             d++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:39:13: error: \u2018e\u2019 was not declared in this scope\n   39 |             e++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:42:13: error: \u2018f\u2019 was not declared in this scope\n   42 |             f++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:45:13: error: \u2018g\u2019 was not declared in this scope\n   45 |             g++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:48:13: error: \u2018h\u2019 was not declared in this scope\n   48 |             h++;\n      |             ^\n/tmp/tmpozepp1ke.cpp:80:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmpozepp1ke.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpozepp1ke.cpp:25:38: note: to match this \u2018{\u2019\n   25 |     for (int i = 0; i < length; i++) {\n      |                                      ^\n/tmp/tmpozepp1ke.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpozepp1ke.cpp:4:50: note: to match this \u2018{\u2019\n    4 | bool text_lowercase_underscore(std::string text) {\n      |                                                  ^\n/tmp/tmpozepp1ke.cpp:85:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i=0;i<text.length();i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        } else if(text[i] == '_') {\n            if(flag == false) {\n                return false;\n            }\n            flag = false;\n        } else {\n            return false;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else {\n            if (!islower(text[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    for (int i = 0; i < n; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == n - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmp1maxedo7: /tmp/tmp1maxedo7.cpp:25: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "tmp0dsazr4b: /tmp/tmp0dsazr4b.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (islower(text[i])) {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                i++;\n                continue;\n            } else {\n                return false;\n            }\n        }\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if(text.size() == 0) return true;\n    if(text.size() == 1) {\n        if(islower(text[0])) return true;\n        else return false;\n    }\n    if(text[0] == '_') return false;\n    if(text[text.size() - 1] == '_') return false;\n    if(text[0] == '_' && text[1] == '_') return false;\n    if(text[text.size() - 1] == '_' && text[text.size() - 2] == '_') return false;\n    for(int i = 0; i < text.size(); i++) {\n        if(!islower(text[i]) && text[i] != '_') return false;\n        if(text[i] == '_' && text[i + 1] == '_') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tbool flag = true;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] >= 'a' && text[i] <= 'z') {\n\t\t\tcontinue;\n\t\t}\n\t\telse if (text[i] == '_') {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if(!isalpha(text[i - 1]) || !isalpha(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    std::regex pattern(\"[a-z]+_[a-z]+\");\n    return std::regex_match(text, pattern);\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "tmpqyqyjlvt: /tmp/tmpqyqyjlvt.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool underscore = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (underscore == true) {\n                return false;\n            }\n            underscore = true;\n        } else if (underscore == true) {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n            underscore = false;\n        } else {\n            if (text[i] < 'a' || text[i] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool underscore_flag = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (underscore_flag) {\n                return false;\n            }\n            underscore_flag = true;\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            underscore_flag = false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpyyouzsku: /tmp/tmpyyouzsku.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  bool result = true;\n  for (int i = 0; i < text.length(); i++) {\n    if (i == 0) {\n      if (text[i] >= 'a' && text[i] <= 'z') {\n        continue;\n      } else {\n        result = false;\n        break;\n      }\n    } else {\n      if (text[i] == '_') {\n        if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n          continue;\n        } else {\n          result = false;\n          break;\n        }\n      } else if (text[i] >= 'a' && text[i] <= 'z') {\n        continue;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(text[i+1]>=97 && text[i+1]<=122) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i]>=97 && text[i]<=122) {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        if(flag) {\n            if(text[i] == '_') {\n                return false;\n            }\n            if(text[i] >= 'A' && text[i] <= 'Z') {\n                return false;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpjfn3r7j4: /tmp/tmpjfn3r7j4.cpp:23: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmp9tga6btq: /tmp/tmp9tga6btq.cpp:27: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  bool result = false;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == '_') {\n      result = true;\n    }\n    else if (text[i] >= 'a' && text[i] <= 'z') {\n      result = true;\n    }\n    else {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z') {\n                return false;\n            }\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpxl04j3db: /tmp/tmpxl04j3db.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if (!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmp8kw1a038: /tmp/tmp8kw1a038.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpl5bqn5kw: /tmp/tmpl5bqn5kw.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(islower(text[i])) {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i=0;i<text.length();i++) {\n        if(text[i]=='_') {\n            if(!(text[i-1]>='a' && text[i-1]<='z')) {\n                return false;\n            }\n            if(!(text[i+1]>='a' && text[i+1]<='z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpabuiaeer: /tmp/tmpabuiaeer.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int n = text.length();\n    if(n == 0)\n        return false;\n    if(text[0] >= 'a' && text[0] <= 'z')\n    {\n        for(int i = 1; i < n; i++)\n        {\n            if(text[i] == '_')\n            {\n                if(i == n-1)\n                    return false;\n                if(text[i+1] >= 'a' && text[i+1] <= 'z')\n                    continue;\n                else\n                    return false;\n            }\n            else if(text[i] >= 'a' && text[i] <= 'z')\n                continue;\n            else\n                return false;\n        }\n        return true;\n    }\n    else\n        return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int i=0;\n    while(i<text.length()){\n        if(text[i]>='a' && text[i]<='z'){\n            i++;\n        }\n        else if(text[i]=='_'){\n            i++;\n        }\n        else{\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpvr980l9y: /tmp/tmpvr980l9y.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (text[i - 1] >= 'a' && text[i - 1] <= 'z') {\n                if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmppqg8tjdj: /tmp/tmppqg8tjdj.cpp:35: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            if(!islower(text[i-1]) || !islower(text[i+1])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpiunbu2yj: /tmp/tmpiunbu2yj.cpp:18: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int underscore_count = 0;\n    int lowercase_count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            underscore_count++;\n        }\n        if (islower(text[i])) {\n            lowercase_count++;\n        }\n    }\n    if (underscore_count == lowercase_count - 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "tmpuu949hc7: /tmp/tmpuu949hc7.cpp:22: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i;\n    for(i=0;i<text.length();i++)\n    {\n        if(text[i]=='_')\n        {\n            if(text[i+1]>=97 && text[i+1]<=122)\n            {\n                continue;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if(text[i]>=97 && text[i]<=122)\n        {\n            continue;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        if (flag) {\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                flag = true;\n            } else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmp43e90fo4: /tmp/tmp43e90fo4.cpp:22: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == text.size() - 1) {\n                flag = false;\n                break;\n            }\n            if(text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n        else if(text[i] < 'a' || text[i] > 'z') {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else {\n            if(flag) {\n                if(islower(text[i])) {\n                    flag = false;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                if(islower(text[i])) {\n                    flag = false;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z') {\n                flag = false;\n                break;\n            }\n            if(text[i+1] < 'a' || text[i+1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpfqlj0sqw: /tmp/tmpfqlj0sqw.cpp:24: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                i += 2;\n            } else {\n                return false;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // TODO: Write your code here\n    int i = 0;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int text_length = text.length();\n    if (text_length == 0) {\n        return false;\n    }\n    for (int i = 0; i < text_length; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i=0; i<len; i++) {\n        if(text[i] == '_') {\n            if(text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_' && text[i+1] == '_') {\n            return false;\n        }\n        if (text[i] == '_' && text[i+1] == '\\0') {\n            return false;\n        }\n        if (text[i] == '_' && text[i+1] == ' ') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == '_') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == ' ') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == '\\0') {\n            return false;\n        }\n        if (text[i] == '\\0' && text[i+1] == '_') {\n            return false;\n        }\n        if (text[i] == '\\0' && text[i+1] == ' ') {\n            return false;\n        }\n        if (text[i] == '\\0' && text[i+1] == '\\0') {\n            return false;\n        }\n        if (text[i] == '_' && text[i+1] == '_') {\n            return false;\n        }\n        if (text[i] == '_' && text[i+1] == '\\0') {\n            return false;\n        }\n        if (text[i] == '_' && text[i+1] == ' ') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == '_') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == ' ') {\n            return false;\n        }\n        if (text[i] == ' ' && text[i+1] == '\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "/tmp/tmpibsbkr_5.cpp:52:44: warning: missing terminating ' character\n   52 |         if (text[i] == ' ' && text[i+1] == '\n      |                                            ^\n/tmp/tmpibsbkr_5.cpp:52:44: error: missing terminating ' character\n/tmp/tmpibsbkr_5.cpp: In function \u2018bool text_lowercase_underscore(std::string)\u2019:\n/tmp/tmpibsbkr_5.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpibsbkr_5.cpp:52:43: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |         if (text[i] == ' ' && text[i+1] == '\n      |            ~                              ^\n      |                                           )\n   53 | }\n      | ~                                          \n/tmp/tmpibsbkr_5.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpibsbkr_5.cpp:54:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   54 | int main() {\n      |            ^\n/tmp/tmpibsbkr_5.cpp:59:1: error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmpibsbkr_5.cpp:4:50: note: to match this \u2018{\u2019\n    4 | bool text_lowercase_underscore(std::string text) {\n      |                                                  ^\n/tmp/tmpibsbkr_5.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    bool flag = false;\n    while(i < text.size()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else if(text[i] == '_') {\n            if(flag) {\n                flag = false;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (i == 0) {\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        } else if (i == text.length() - 1) {\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            } else {\n                return false;\n            }\n        } else {\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                continue;\n            } else if (text[i] == '_') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpgv3ebrlw: /tmp/tmpgv3ebrlw.cpp:27: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        if (text[i] == '_') {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] != '_' && text[i] != ' ' && !islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) return false;\n    for(int i = 0; i < len; i++) {\n        if(i == 0) {\n            if(!islower(text[i])) return false;\n        } else if(i == len - 1) {\n            if(!islower(text[i])) return false;\n        } else {\n            if(!islower(text[i]) && text[i] != '_') return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        if (text[i] >= 'A' && text[i] <= 'Z') {\n            return false;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpgz42suxf: /tmp/tmpgz42suxf.cpp:23: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] < 'a' || text[i-1] > 'z' || text[i+1] < 'a' || text[i+1] > 'z') {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "tmpu5_lion7: /tmp/tmpu5_lion7.cpp:20: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0)\n        return false;\n    for(int i = 0; i < len; i++) {\n        if(!(text[i] >= 'a' && text[i] <= 'z') && text[i] != '_')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmps6mn_rr8: /tmp/tmps6mn_rr8.cpp:28: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            if(text[i+1] == '_') {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmph7jna2gb: /tmp/tmph7jna2gb.cpp:18: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int count = 0;\n  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == '_') {\n      count++;\n    }\n  }\n  if (count == 0) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmpmhijs488: /tmp/tmpmhijs488.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            flag = true;\n        }\n        else {\n            if (flag == true) {\n                if (text[i] >= 'a' && text[i] <= 'z') {\n                    flag = false;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                if (text[i] >= 'a' && text[i] <= 'z') {\n                    flag = false;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else if(text[i] == '_') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.size() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmp3t1pfdgw: /tmp/tmp3t1pfdgw.cpp:30: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  while (i < text.length()) {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if (text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int len = text.length();\n  for (int i = 0; i < len; i++) {\n    if (text[i] == '_') {\n      if (i == 0 || i == len - 1) {\n        return false;\n      }\n      if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n        return false;\n      }\n    } else if (text[i] < 'a' || text[i] > 'z') {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.size() == 0) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmp3t1pfdgw: /tmp/tmp3t1pfdgw.cpp:30: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool is_lowercase = true;\n    bool is_underscore = true;\n    bool is_lowercase_underscore = true;\n    for (int i = 0; i < text.length(); i++) {\n        if (!islower(text[i])) {\n            is_lowercase = false;\n        }\n        if (text[i] != '_') {\n            is_underscore = false;\n        }\n        if (!islower(text[i]) && text[i] != '_') {\n            is_lowercase_underscore = false;\n        }\n    }\n    if (is_lowercase) {\n        return true;\n    }\n    if (is_underscore) {\n        return true;\n    }\n    if (is_lowercase_underscore) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = true;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == text.length() - 1) {\n                flag = false;\n                break;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                flag = false;\n                break;\n            }\n        }\n        else if(!islower(text[i])) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool flag = false;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            flag = true;\n        }\n        else if(text[i] >= 'a' && text[i] <= 'z') {\n            flag = true;\n        }\n        else {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i + 1] >= 'a' && text[i + 1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool result = true;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (text[i-1] < 'a' || text[i-1] > 'z') {\n                result = false;\n            }\n            if (text[i+1] < 'a' || text[i+1] > 'z') {\n                result = false;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmpuro3zuk0: /tmp/tmpuro3zuk0.cpp:22: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    if (text.empty()) {\n        return false;\n    }\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.size() - 1) {\n                return false;\n            }\n            if (text[i - 1] == '_' || text[i + 1] == '_') {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0)\n        return false;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1)\n                return false;\n            if(!islower(text[i-1]) || !islower(text[i+1]))\n                return false;\n        }\n        else if(!islower(text[i]))\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    // Write your code here\n    int count_underscore = 0;\n    int count_lowercase = 0;\n    for(int i=0;i<text.length();i++)\n    {\n        if(text[i] == '_')\n        {\n            count_underscore++;\n        }\n        if(text[i] >= 'a' && text[i] <= 'z')\n        {\n            count_lowercase++;\n        }\n    }\n    if(count_underscore == 0)\n    {\n        return false;\n    }\n    if(count_lowercase == 0)\n    {\n        return false;\n    }\n    if(count_underscore == count_lowercase)\n    {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "tmpm4wetd3x: /tmp/tmpm4wetd3x.cpp:35: int main(): Assertion `candidate((\"aab_cbbbc\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int n = text.length();\n    int i = 0;\n    while(i < n) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z') {\n                return false;\n            }\n            if (text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        } else if (text[i] < 'a' || text[i] > 'z') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if (text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.size()){\n        if(!(text[i] >= 'a' && text[i] <= 'z')){\n            if(text[i] != '_'){\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while(i < text.length()) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        }\n        else if(text[i] == '_') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) return false;\n    for(int i = 0; i < len; i++) {\n        if(i == 0) {\n            if(!(text[i] >= 'a' && text[i] <= 'z')) return false;\n        } else if(i == len - 1) {\n            if(!(text[i] >= 'a' && text[i] <= 'z')) return false;\n        } else {\n            if(text[i] == '_') {\n                if(!(text[i-1] >= 'a' && text[i-1] <= 'z')) return false;\n                if(!(text[i+1] >= 'a' && text[i+1] <= 'z')) return false;\n            } else {\n                if(!(text[i] >= 'a' && text[i] <= 'z')) return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if(len == 0) {\n        return false;\n    }\n    for(int i = 0; i < len; i++) {\n        if(!isalpha(text[i]) && text[i] != '_') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmp5yle_arv: /tmp/tmp5yle_arv.cpp:19: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.size()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if (!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n        else if (!(text[i] >= 'a' && text[i] <= 'z')) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int underscore = 0;\n    int length = text.length();\n    for (i = 0; i < length; i++) {\n        if (text[i] == 'a') {\n            a++;\n        }\n        if (text[i] == 'b') {\n            b++;\n        }\n        if (text[i] == 'c') {\n            c++;\n        }\n        if (text[i] == 'd') {\n            d++;\n        }\n        if (text[i] == 'e') {\n            e++;\n        }\n        if (text[i] == 'f') {\n            f++;\n        }\n        if (text[i] == 'g') {\n            g++;\n        }\n        if (text[i] == 'h') {\n            h++;\n        }\n        if (text[i] == 'i') {\n            i++;\n        }\n        if (text[i] == 'j') {\n            j++;\n        }\n        if (text[i] == 'k') {\n            k++;\n        }\n        if (text[i] == 'l') {\n            l++;\n        }\n        if (text[i] == 'm') {\n            m++;\n        }\n        if (text[i] == 'n') {\n            n++;\n        }\n        if (text[i] == 'o') {\n            o++;\n        }\n        if (text[i] == 'p') {\n            p++;\n        }\n        if (text[i] == 'q') {\n            q++;\n        }\n        if (text[i] == 'r') {\n           \n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "/tmp/tmpayv_x4vs.cpp: In function \u2018bool text_lowercase_underscore(std::string)\u2019:\n/tmp/tmpayv_x4vs.cpp:27:13: error: \u2018a\u2019 was not declared in this scope\n   27 |             a++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:30:13: error: \u2018b\u2019 was not declared in this scope\n   30 |             b++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:33:13: error: \u2018c\u2019 was not declared in this scope\n   33 |             c++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:36:13: error: \u2018d\u2019 was not declared in this scope\n   36 |             d++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:39:13: error: \u2018e\u2019 was not declared in this scope\n   39 |             e++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:42:13: error: \u2018f\u2019 was not declared in this scope\n   42 |             f++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:45:13: error: \u2018g\u2019 was not declared in this scope\n   45 |             g++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:48:13: error: \u2018h\u2019 was not declared in this scope\n   48 |             h++;\n      |             ^\n/tmp/tmpayv_x4vs.cpp:80:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   80 | int main() {\n      |            ^\n/tmp/tmpayv_x4vs.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpayv_x4vs.cpp:25:34: note: to match this \u2018{\u2019\n   25 |     for (i = 0; i < length; i++) {\n      |                                  ^\n/tmp/tmpayv_x4vs.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpayv_x4vs.cpp:4:50: note: to match this \u2018{\u2019\n    4 | bool text_lowercase_underscore(std::string text) {\n      |                                                  ^\n/tmp/tmpayv_x4vs.cpp:85:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int len = text.length();\n  int i = 0;\n  while(i < len) {\n    if(text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if(text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  bool flag = false;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == '_') {\n      flag = true;\n    }\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      flag = true;\n    }\n  }\n  return flag;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmp7fhzmkgm: /tmp/tmp7fhzmkgm.cpp:19: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool underscore = false;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            if (underscore == true) {\n                return false;\n            }\n            underscore = true;\n        } else if (text[i] >= 'a' && text[i] <= 'z') {\n            underscore = false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    bool is_lowercase = false;\n    bool is_underscore = false;\n    for (int i = 0; i < text.size(); i++) {\n        if (islower(text[i])) {\n            is_lowercase = true;\n        }\n        if (text[i] == '_') {\n            is_underscore = true;\n        }\n    }\n    return (is_lowercase && is_underscore);\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmpa3cgosta: /tmp/tmpa3cgosta.cpp:20: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n            if (text[i] >= 'a' && text[i] <= 'z') {\n                i++;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '_') {\n            if(text[i-1] >= 'a' && text[i-1] <= 'z' && text[i+1] >= 'a' && text[i+1] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmp0tqxicvh: /tmp/tmp0tqxicvh.cpp:21: int main(): Assertion `candidate((\"Aaab_abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z') {\n                return false;\n            }\n        }\n        else if (text[i] < 'a' || text[i] > 'z') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int j = 0;\n    int len = text.length();\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            j++;\n        } else if (text[i] == '_') {\n            j++;\n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (j == len) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint i = 0;\n\twhile(i < text.length()) {\n\t\tif(text[i] >= 'a' && text[i] <= 'z') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse if(text[i] == '_') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n  int i = 0;\n  while (i < text.length()) {\n    if (text[i] >= 'a' && text[i] <= 'z') {\n      i++;\n    } else if (text[i] == '_') {\n      i++;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        if (text[i] == '_') {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n\tint count = 0;\n\tfor (int i = 0; i < text.length(); i++) {\n\t\tif (text[i] == '_') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn false;\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmpw97ux8kf: /tmp/tmpw97ux8kf.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    if (len == 0) {\n        return false;\n    }\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!(text[i - 1] >= 'a' && text[i - 1] <= 'z')) {\n                return false;\n            }\n            if (!(text[i + 1] >= 'a' && text[i + 1] <= 'z')) {\n                return false;\n            }\n        }\n        else {\n            if (!(text[i] >= 'a' && text[i] <= 'z')) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (text[i] != '\\0') {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] == '_') {\n            if (i == 0 || i == len - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if (text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    int len = text.length();\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n            continue;\n        }\n        else if(text[i] == '_') {\n            i++;\n            continue;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    int i = 0;\n    while(i < len) {\n        if(text[i] >= 'a' && text[i] <= 'z') {\n            i++;\n        } else if(text[i] == '_') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123375,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == '_') {\n            count++;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "tmpp8axwkei: /tmp/tmpp8axwkei.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for (int i = 0; i < len; i++) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            continue;\n        } else if (text[i] == '_') {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123381,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int count = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1665510564,
      "stdout": "",
      "stderr": "tmp5zy2n5yk: /tmp/tmp5zy2n5yk.cpp:21: int main(): Assertion `candidate((\"aab_Abbbc\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int len = text.length();\n    for(int i = 0; i < len; i++) {\n        if(text[i] == '_') {\n            if(i == 0 || i == len - 1) {\n                return false;\n            }\n            if(!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        }\n        else if(!islower(text[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i = 0;\n    while (i < text.length()) {\n        if (text[i] == '_') {\n            if (i == 0 || i == text.length() - 1) {\n                return false;\n            }\n            if (!islower(text[i - 1]) || !islower(text[i + 1])) {\n                return false;\n            }\n        } else if (!islower(text[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nbool text_lowercase_underscore(std::string text) {\n    int i=0;\n    while(text[i]!='\\0') {\n        if(text[i]=='_') {\n            if(text[i-1]>='a' && text[i-1]<='z' && text[i+1]>='a' && text[i+1]<='z') {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(text[i]>='a' && text[i]<='z') {\n            i++;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = text_lowercase_underscore;\n    assert(candidate((\"aab_cbbbc\")) == (true));\n    assert(candidate((\"aab_Abbbc\")) == (false));\n    assert(candidate((\"Aaab_abbbc\")) == (false));\n}\n",
      "timestamp": 1666123383,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}