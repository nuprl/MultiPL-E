{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 2)) | (last_bit >> (sizeof(n) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "tmpn2406ytf: /tmp/tmpn2406ytf.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0x7ffffffffffffffe;\n    long mask6 = 0x0000000000000002;\n    long mask7 = 0xfffffffffffffffd;\n    long mask8 = 0x7ffffffffffffffd;\n    long mask9 = 0x0000000000000004;\n    long mask10 = 0xfffffffffffffffb;\n    long mask11 = 0x7ffffffffffffffb;\n    long mask12 = 0x0000000000000008;\n    long mask13 = 0xfffffffffffffff7;\n    long mask14 = 0x7ffffffffffffff7;\n    long mask15 = 0x0000000000000010;\n    long mask16 = 0xffffffffffffffef;\n    long mask17 = 0x7fffffffffffffef;\n    long mask18 = 0x0000000000000020;\n    long mask19 = 0xffffffffffffffdf;\n    long mask20 = 0x7fffffffffffffdf;\n    long mask21 = 0x0000000000000040;\n    long mask22 = 0xffffffffffffffbf;\n    long mask23 = 0x7fffffffffffffbf;\n    long mask24 = 0x0000000000000080;\n    long mask25 = 0xffffffffffffff7f;\n    long mask26 = 0x7fffffffffffff7f;\n    long mask27 = 0x0000000000000100;\n    long mask28 = 0xfffffffffffffeff;\n    long mask29 = 0x7ffffffffffffeff;\n    long mask30 = 0x0000000000000200;\n    long mask31 = 0xfffffffffffffdff;\n    long mask32 = 0x7ffffffffffffdff;\n    long mask33 = 0x0000000000000400;\n    long mask34 = 0xfffffffffffffbff;\n    long mask35 = 0x7ffffffffffffbff;\n    long mask36 = 0x0000000000000800;\n    long mask37 = 0xfffffffffffff7ff;\n    long mask38 = 0x7\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "/tmp/tmpge6v0o2h.cpp: In function \u2018long int toggle_middle_bits(long int)\u2019:\n/tmp/tmpge6v0o2h.cpp:43:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpge6v0o2h.cpp:43:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n;\n    for (int i = 0; i < sizeof(long) * 8 - 2; i++) {\n        if ((n & mask) == mask) {\n            result &= ~mask;\n        } else {\n            result |= mask;\n        }\n        mask <<= 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpchkg_tyq: /tmp/tmpchkg_tyq.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xFFFFFFFF;\n    long first_bit = n & 0x80000000;\n    long last_bit = n & 0x00000001;\n    mask = mask >> 2;\n    mask = mask << 2;\n    mask = mask | 0x00000003;\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpukwxono4: /tmp/tmpukwxono4.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long middle_bits = n >> 2;\n    middle_bits = middle_bits ^ ((1 << (sizeof(long) * 8 - 3)) - 1);\n    return (first_bit << (sizeof(long) * 8 - 1)) | (middle_bits << 1) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpu8ccbtz7: /tmp/tmpu8ccbtz7.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n;\n    for (int i = 0; i < sizeof(long) * 8 - 2; i++) {\n        long bit = (n & mask) >> i;\n        if (bit == 0) {\n            result |= (1 << i);\n        } else {\n            result &= ~(1 << i);\n        }\n        mask = mask << 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpmi3z_azd: /tmp/tmpmi3z_azd.cpp:20: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000001;\n    long res = n & mask;\n    res = res & mask2;\n    res = res & mask3;\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp4elf68_h: /tmp/tmp4elf68_h.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long a = n & 1;\n    long b = n & (1 << (sizeof(n) * 8 - 1));\n    long c = n & ~(1 | (1 << (sizeof(n) * 8 - 1)));\n    return a | (c ^ (c >> 1)) | b;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpusigte4g: /tmp/tmpusigte4g.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpefb8iefd: /tmp/tmpefb8iefd.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 2)) - 1);\n    long result = n ^ mask;\n    result = result | (first_bit << (sizeof(n) * 8 - 1));\n    result = result | (last_bit >> (sizeof(n) * 8 - 1));\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpowlkt3x2: /tmp/tmpowlkt3x2.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    return (n ^ mask) | (first_bit << 0) | (last_bit >> (sizeof(n) * 8 - 1));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpp4pgovzo: /tmp/tmpp4pgovzo.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long x = n & mask;\n    long y = n & ~mask;\n    return x | y;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp_6h_r8mu: /tmp/tmp_6h_r8mu.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpmc2t2w62: /tmp/tmpmc2t2w62.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    long mask2 = 0x80000000;\n    long mask3 = 0x00000001;\n    long res = n & mask;\n    res = res & mask2;\n    res = res | mask3;\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp45xmjakh: /tmp/tmp45xmjakh.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp5dtclk43: /tmp/tmp5dtclk43.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp1p1pm8v4: /tmp/tmp1p1pm8v4.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp2mydkd5s: /tmp/tmp2mydkd5s.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp44ftvcn2: /tmp/tmp44ftvcn2.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    assert(n>=0);\n    long first_bit = n & 1;\n    long last_bit = n & (1<<(sizeof(n)*8-1));\n    long mask = (1<<(sizeof(n)*8-1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpt93u7nw4: /tmp/tmpt93u7nw4.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << 1) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpwrkfreer: /tmp/tmpwrkfreer.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpw1r6pkmq: /tmp/tmpw1r6pkmq.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0b11;\n    long result = 0;\n    while (n) {\n        result = (result << 1) | (n & mask);\n        n = n >> 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpp33z55e8: /tmp/tmpp33z55e8.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp1p1pm8v4: /tmp/tmp1p1pm8v4.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits >> 1;\n    middle_bits = middle_bits << 1;\n    middle_bits = middle_bits ^ mask;\n    middle_bits = middle_bits >> 1;\n    middle_bits = middle_bits << 1;\n    middle_bits = middle_bits | first_bit;\n    middle_bits = middle_bits | last_bit;\n    return middle_bits;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp59jf96f0: /tmp/tmp59jf96f0.cpp:20: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpkblsz6j1: /tmp/tmpkblsz6j1.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmph3t1zx2e: /tmp/tmph3t1zx2e.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp5dtclk43: /tmp/tmp5dtclk43.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmph3t1zx2e: /tmp/tmph3t1zx2e.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for(int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpkoujexn3: /tmp/tmpkoujexn3.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long m = 1;\n    long k = n;\n    while (k > 0) {\n        m = m << 1;\n        k = k >> 1;\n    }\n    m = m - 1;\n    return n ^ m;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpaz2nm1gk: /tmp/tmpaz2nm1gk.cpp:16: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        if ((n & (mask << i)) != 0) {\n            result &= ~(mask << i);\n        } else {\n            result |= (mask << i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmph6svpq78: /tmp/tmph6svpq78.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpa3fozfce: /tmp/tmpa3fozfce.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = (n >> 1) & 1;\n    long last_bit = n & 1;\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = (middle_bits >> 1) << 1;\n    return (first_bit << 1) | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpnpp2mo0y: /tmp/tmpnpp2mo0y.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp5dtclk43: /tmp/tmp5dtclk43.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 2));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpeeoyjmvc: /tmp/tmpeeoyjmvc.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp2mydkd5s: /tmp/tmp2mydkd5s.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long a = n & 1;\n    long b = n & (1 << (sizeof(n) * 8 - 1));\n    long c = n & (~(1 << (sizeof(n) * 8 - 1)));\n    long d = c & (~1);\n    long e = d ^ (~(d >> 1) << 1);\n    return a | (e << 1) | b;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpgljhs5so: /tmp/tmpgljhs5so.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long result = n ^ mask;\n    result |= first_bit;\n    result |= last_bit;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpdjd9xsf8: /tmp/tmpdjd9xsf8.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    return first_bit | (middle_bits ^ mask) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp_0dzeplv: /tmp/tmp_0dzeplv.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpw1r6pkmq: /tmp/tmpw1r6pkmq.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpvxh4ykit: /tmp/tmpvxh4ykit.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpmc2t2w62: /tmp/tmpmc2t2w62.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    long x = 1;\n    for (int i = 1; i < sizeof(long)*8-1; i++) {\n        mask |= x;\n        x <<= 1;\n    }\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpc3e3mo8w: /tmp/tmpc3e3mo8w.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ (mask << 1);\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmprck4qroa: /tmp/tmprck4qroa.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7ffffffffffffffe;\n    long mask4 = 0x0000000000000002;\n    long mask5 = 0x7ffffffffffffffd;\n    long mask6 = 0x0000000000000004;\n    long mask7 = 0x7ffffffffffffffb;\n    long mask8 = 0x0000000000000008;\n    long mask9 = 0x7ffffffffffffff7;\n    long mask10 = 0x0000000000000010;\n    long mask11 = 0x7fffffffffffffef;\n    long mask12 = 0x0000000000000020;\n    long mask13 = 0x7fffffffffffffdf;\n    long mask14 = 0x0000000000000040;\n    long mask15 = 0x7fffffffffffffbf;\n    long mask16 = 0x0000000000000080;\n    long mask17 = 0x7fffffffffffff7f;\n    long mask18 = 0x0000000000000100;\n    long mask19 = 0x7ffffffffffffeff;\n    long mask20 = 0x0000000000000200;\n    long mask21 = 0x7ffffffffffffdff;\n    long mask22 = 0x0000000000000400;\n    long mask23 = 0x7ffffffffffffbff;\n    long mask24 = 0x0000000000000800;\n    long mask25 = 0x7ffffffffffff7ff;\n    long mask26 = 0x0000000000001000;\n    long mask27 = 0x7fffffffffffefff;\n    long mask28 = 0x0000000000002000;\n    long mask29 = 0x7fffffffffffdfff;\n    long mask30 = 0x0000000000004000;\n    long mask31 = 0x7fffffffffffbfff;\n    long mask32 = 0x0000000000008000;\n    long mask33 = 0x7fffffffffff7fff;\n    long mask34 = 0x0000000000010000;\n    long mask35 = 0x7ffffffffffeffff;\n    long mask36 = 0x0000000000020000;\n    long mask37 = 0x7ffffffffffdffff;\n   \n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpg90_9xbi: /tmp/tmpg90_9xbi.cpp:47: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    return (n ^ mask) | (first_bit | last_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp0impak4h: /tmp/tmp0impak4h.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // Write your code here\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 31);\n    long mask = 0;\n    for (int i = 1; i < 31; i++) {\n        mask = mask | (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    long ans = (first_bit | middle_bits | last_bit);\n    return ans;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp1x1h8jiu: /tmp/tmp1x1h8jiu.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp44ftvcn2: /tmp/tmp44ftvcn2.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long)*8 - 1));\n    long mask = (1 << (sizeof(long)*8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long)*8 - 1)) | (last_bit >> (sizeof(long)*8 - 1));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp3oq9gwhw: /tmp/tmp3oq9gwhw.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // assert(n>=0);\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask ^ (1<<0);\n    mask = mask ^ (1<<63);\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "tmppug72i53: /tmp/tmppug72i53.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // assert(n >= 0);\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp18wuu1ww: /tmp/tmp18wuu1ww.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp2mzksaer: /tmp/tmp2mzksaer.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpa3fozfce: /tmp/tmpa3fozfce.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp44ftvcn2: /tmp/tmp44ftvcn2.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = ~mask;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmps1mggl2e: /tmp/tmps1mggl2e.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    assert(n>=0);\n    long mask = 0x7;\n    long result = n;\n    for(int i=1; i<=sizeof(long)*8-2; i++) {\n        if(n&mask) {\n            result = result & ~mask;\n        } else {\n            result = result | mask;\n        }\n        mask = mask << 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpdy_8alic: /tmp/tmpdy_8alic.cpp:20: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp2mzksaer: /tmp/tmp2mzksaer.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    long mask_left = 0;\n    long mask_right = 0;\n    long mask_middle = 0;\n    long mask_middle_left = 0;\n    long mask_middle_right = 0;\n    long mask_middle_left_right = 0;\n    long mask_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left = 0;\n    long mask_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right_middle_left_right = 0;\n    long mask_middle_left\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmpyu7l9_kd.cpp: In function \u2018long int toggle_middle_bits(long int)\u2019:\n/tmp/tmpyu7l9_kd.cpp:28:1: error: expected initializer before \u2018}\u2019 token\n   28 | }\n      | ^\n/tmp/tmpyu7l9_kd.cpp:28:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // assert(n>=0);\n    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1<<0);\n    mask = mask ^ (1<<63);\n    return n^mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpumhnvxfr: /tmp/tmpumhnvxfr.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    int i = 1;\n    int j = sizeof(long)*8 - 2;\n    while(i < j) {\n        if((n & (1 << i)) != (n & (1 << j))) {\n            n = n ^ (1 << i);\n            n = n ^ (1 << j);\n        }\n        i++;\n        j--;\n    }\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp3s9dcj23: /tmp/tmp3s9dcj23.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long res = n;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        if (n & (1 << i)) {\n            res = res & ~(1 << i);\n        } else {\n            res = res | (1 << i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp4kfqljhy: /tmp/tmp4kfqljhy.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpd5gsz776: /tmp/tmpd5gsz776.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpw1r6pkmq: /tmp/tmpw1r6pkmq.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpadi2xwyb: /tmp/tmpadi2xwyb.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp_sxgxi09: /tmp/tmp_sxgxi09.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmprdl_1s1s: /tmp/tmprdl_1s1s.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp1dzuibf3: /tmp/tmp1dzuibf3.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    long count = 0;\n    while (n) {\n        if (count == 0 || count == 1) {\n            mask = mask | (n & 1);\n            mask = mask << 1;\n            n = n >> 1;\n            count++;\n        } else {\n            mask = mask | (n & 1);\n            mask = mask << 1;\n            n = n >> 1;\n            count++;\n        }\n    }\n    mask = mask >> 1;\n    return mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmptb_io4_s: /tmp/tmptb_io4_s.cpp:25: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 2)) | (last_bit >> (sizeof(n) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517165,
      "stdout": "",
      "stderr": "tmpn2406ytf: /tmp/tmpn2406ytf.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp2mydkd5s: /tmp/tmp2mydkd5s.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n\tlong mask = 0x7FFFFFFF;\n\treturn n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp_gekdm28: /tmp/tmp_gekdm28.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long res = n;\n    for (int i = 1; i < sizeof(long)*8-1; i++) {\n        if ((n & mask) == 0) {\n            res |= mask;\n        } else {\n            res &= ~mask;\n        }\n        mask <<= 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmppt1n5wzr: /tmp/tmppt1n5wzr.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp0tkopc_4: /tmp/tmp0tkopc_4.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long left_mask = 0x8;\n    long right_mask = 0x1;\n    long left_bit = (n & left_mask) >> 3;\n    long right_bit = n & right_mask;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return (left_bit << 3) | (middle_bits) | (right_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpi3nzv_vz: /tmp/tmpi3nzv_vz.cpp:18: int main(): Assertion `candidate((10)) == (12)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = ~((1 << (sizeof(n) * 8 - 1)) | 1);\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | (last_bit >> (sizeof(n) * 8 - 1));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp8rx3zy1u: /tmp/tmp8rx3zy1u.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpxufb2wf9: /tmp/tmpxufb2wf9.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp1dzuibf3: /tmp/tmp1dzuibf3.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long res = n ^ mask;\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp5m0ye128: /tmp/tmp5m0ye128.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long x = n & mask;\n    n = n >> 3;\n    n = n << 3;\n    n = n | x;\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmphu6i6hi6: /tmp/tmphu6i6hi6.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = ~((1 << (sizeof(long) * 8 - 1)) | 1);\n    return (n & mask) ^ (first_bit << (sizeof(long) * 8 - 1)) ^ (last_bit >> (sizeof(long) * 8 - 1));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp54fs3ozr: /tmp/tmp54fs3ozr.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long res = n ^ mask;\n    return res;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpmnwnyn_n: /tmp/tmpmnwnyn_n.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << 1) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp339ejnq3: /tmp/tmp339ejnq3.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmptedh1x6u: /tmp/tmptedh1x6u.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & (1 << 0);\n    long last_bit = n & (1 << 31);\n    long mask = 0xFFFFFFFF;\n    mask = mask & ~(1 << 0);\n    mask = mask & ~(1 << 31);\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp5r7jhjga: /tmp/tmp5r7jhjga.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    assert(n > 0);\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | middle_bits | last_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpswgflfxl: /tmp/tmpswgflfxl.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    int i = 1;\n    while(i < sizeof(long) * 8 - 1) {\n        mask |= (1 << i);\n        i++;\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpdnajeaoj: /tmp/tmpdnajeaoj.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return ((n & mask) | (~n & ~mask));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpfa2umbhk: /tmp/tmpfa2umbhk.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long left = n >> 2;\n    long right = n & mask;\n    long middle = ~(n >> 2) & ~mask;\n    return (left << 2) | middle | right;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpfszinj_v: /tmp/tmpfszinj_v.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    mask = mask ^ 0x8000000000000000;\n    mask = mask ^ 0x0000000000000001;\n    n = n ^ mask;\n    n = n | first_bit;\n    n = n | last_bit;\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmppolr7slg: /tmp/tmppolr7slg.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8-1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpghf0tae1: /tmp/tmpghf0tae1.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(n) * 8 - 1)) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpvj6nfz3p: /tmp/tmpvj6nfz3p.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = (1 << (sizeof(n) * 8 - 1)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    middle_bits = middle_bits & mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpxufb2wf9: /tmp/tmpxufb2wf9.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return first_bit | (mask ^ n) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp1p1pm8v4: /tmp/tmp1p1pm8v4.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long m = 1;\n    long i = 0;\n    while (m <= n) {\n        if (i == 0 || i == 63) {\n            m = m << 1;\n            i++;\n            continue;\n        }\n        n = n ^ m;\n        m = m << 1;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpdz7vpeq7: /tmp/tmpdz7vpeq7.cpp:21: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // assert(n > 0);\n    long mask = 0xffffffffffffffff;\n    long first_bit = n & (1 << 63);\n    long last_bit = n & 1;\n    long middle_bits = n & (mask >> 1);\n    middle_bits = middle_bits ^ (mask >> 1);\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpblu1ostu: /tmp/tmpblu1ostu.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ 1;\n    mask = mask ^ (1 << 63);\n    long result = n ^ mask;\n    result = result | first_bit;\n    result = result | last_bit;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp39bf4y7c: /tmp/tmp39bf4y7c.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    for(int i = 1; i < sizeof(long)*8-1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp87wz84yx: /tmp/tmp87wz84yx.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    // Write your code here\n    long ans = 0;\n    long mask = 1;\n    long i = 0;\n    while(n != 0) {\n        if(i == 0 || i == 31) {\n            ans = ans | (n & mask);\n        }\n        else {\n            ans = ans | ((n & mask) ^ mask);\n        }\n        n = n >> 1;\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmpo3wppmli: /tmp/tmpo3wppmli.cpp:23: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << 1) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmp339ejnq3: /tmp/tmp339ejnq3.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(n) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return (first_bit | (middle_bits << 1) | last_bit);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "tmphekoayj3: /tmp/tmphekoayj3.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    mask = mask >> 1;\n    mask = mask << 1;\n    mask = ~mask;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmprpvuye5r: /tmp/tmprpvuye5r.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(n) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(n) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmppzyra6re: /tmp/tmppzyra6re.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    long mask1 = 0x8000000000000000;\n    long mask2 = 0x0000000000000001;\n    long mask3 = 0x7ffffffffffffffe;\n    long mask4 = 0xfffffffffffffffe;\n    long mask5 = 0x7fffffffffffffff;\n    long mask6 = 0xfffffffffffffffc;\n    long mask7 = 0x7ffffffffffffffd;\n    long mask8 = 0xfffffffffffffffb;\n    long mask9 = 0x7ffffffffffffffb;\n    long mask10 = 0xfffffffffffffff7;\n    long mask11 = 0x7ffffffffffffff7;\n    long mask12 = 0xffffffffffffffef;\n    long mask13 = 0x7fffffffffffffef;\n    long mask14 = 0xffffffffffffffdf;\n    long mask15 = 0x7fffffffffffffdf;\n    long mask16 = 0xffffffffffffffbf;\n    long mask17 = 0x7fffffffffffffbf;\n    long mask18 = 0xffffffffffffff7f;\n    long mask19 = 0x7fffffffffffff7f;\n    long mask20 = 0xfffffffffffffeff;\n    long mask21 = 0x7ffffffffffffeff;\n    long mask22 = 0xfffffffffffffdff;\n    long mask23 = 0x7ffffffffffffdff;\n    long mask24 = 0xfffffffffffffbff;\n    long mask25 = 0x7ffffffffffffbff;\n    long mask26 = 0xfffffffffffff7ff;\n    long mask27 = 0x7ffffffffffff7ff;\n    long mask28 = 0xffffffffffffefff;\n    long mask29 = 0x7fffffffffffefff;\n    long mask30 = 0xffffffffffffdfff;\n    long mask31 = 0x7fffffffffffdfff;\n    long mask32 = 0xffffffffffffbfff;\n    long mask33 = 0x7fffffffffffbfff;\n    long mask34 = 0xffffffffffff7fff;\n    long mask35 = 0x7fffffffffff\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "/tmp/tmp2qo8ea8m.cpp: In function \u2018long int toggle_middle_bits(long int)\u2019:\n/tmp/tmp2qo8ea8m.cpp:41:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmp2qo8ea8m.cpp:41:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpa3fozfce: /tmp/tmpa3fozfce.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpa3fozfce: /tmp/tmpa3fozfce.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    long i = 0;\n    while(i < sizeof(n)*8) {\n        if(i == 0 || i == sizeof(n)*8 - 1) {\n            mask |= (1 << i);\n        }\n        i++;\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp881dw2bb: /tmp/tmp881dw2bb.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    assert(n>=0);\n    long mask = 0x7;\n    long result = 0;\n    while(n) {\n        long temp = n & mask;\n        result |= temp;\n        n = n >> 3;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp7avfiatu: /tmp/tmp7avfiatu.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 2));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmpeeoyjmvc: /tmp/tmpeeoyjmvc.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long mask1 = 0x0000000000000003;\n    long mask2 = 0x8000000000000000;\n    long mask3 = 0x0000000000000004;\n    long mask4 = 0x7ffffffffffffffc;\n    long mask5 = 0x7ffffffffffffff8;\n    long mask6 = 0x7ffffffffffffff0;\n    long mask7 = 0x7fffffffffffffe0;\n    long mask8 = 0x7fffffffffffffc0;\n    long mask9 = 0x7fffffffffffff80;\n    long mask10 = 0x7fffffffffffff00;\n    long mask11 = 0x7ffffffffffffe00;\n    long mask12 = 0x7ffffffffffffc00;\n    long mask13 = 0x7ffffffffffff800;\n    long mask14 = 0x7ffffffffffff000;\n    long mask15 = 0x7fffffffffffe000;\n    long mask16 = 0x7fffffffffffc000;\n    long mask17 = 0x7fffffffffff8000;\n    long mask18 = 0x7fffffffffff0000;\n    long mask19 = 0x7ffffffffffe0000;\n    long mask20 = 0x7ffffffffffc0000;\n    long mask21 = 0x7ffffffffff80000;\n    long mask22 = 0x7ffffffffff00000;\n    long mask23 = 0x7fffffffffe00000;\n    long mask24 = 0x7fffffffffc00000;\n    long mask25 = 0x7fffffffff800000;\n    long mask26 = 0x7fffffffff000000;\n    long mask27 = 0x7ffffffffe000000;\n    long mask28 = 0x7ffffffffc000000;\n    long mask29 = 0x7ffffffff8000000;\n    long mask30 = 0x7ffffffff0000000;\n    long mask31 = 0x7fffffffe0000000;\n    long mask32 = 0x7fffffffc0000000;\n    long mask33 = 0x7fffffff80000000;\n    long mask34 = 0x7fffffff00000000;\n    long mask35 = 0x7ffffffe00000000;\n    long mask\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "/tmp/tmpdvxeu89r.cpp: In function \u2018long int toggle_middle_bits(long int)\u2019:\n/tmp/tmpdvxeu89r.cpp:42:1: error: expected initializer before \u2018}\u2019 token\n   42 | }\n      | ^\n/tmp/tmpdvxeu89r.cpp:42:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp2mydkd5s: /tmp/tmp2mydkd5s.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long x = n;\n    while(x>0) {\n        long last_3_bits = x & mask;\n        x = x >> 3;\n        long toggle_bits = last_3_bits ^ mask;\n        n = n ^ (toggle_bits << 3*(log2(x)+1));\n    }\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "/tmp/tmpss8ha0pk.cpp: In function \u2018long int toggle_middle_bits(long int)\u2019:\n/tmp/tmpss8ha0pk.cpp:11:30: error: invalid operands of types \u2018long int\u2019 and \u2018double\u2019 to binary \u2018operator<<\u2019\n   11 |         n = n ^ (toggle_bits << 3*(log2(x)+1));\n      |                  ~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~\n      |                  |               |\n      |                  long int        double\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    assert(n>=0);\n    long mask = 0x7;\n    long first_bit = n & mask;\n    long last_bit = n & (mask << (sizeof(long)*8-3));\n    long middle_bits = n & ~(mask | (mask << (sizeof(long)*8-3)));\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp0qjmi6fy: /tmp/tmp0qjmi6fy.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long x = n;\n    long first_bit = x & 1;\n    long last_bit = x & (1 << 31);\n    x = x >> 1;\n    x = x << 1;\n    x = x ^ (~0);\n    x = x >> 1;\n    x = x << 1;\n    x = x | first_bit;\n    x = x | last_bit;\n    return x;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpsdhe2qlj: /tmp/tmpsdhe2qlj.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long left_mask = 0xFFFFFFFFFFFFFFFE;\n    long right_mask = 0xFFFFFFFFFFFFFFFD;\n    long left_bits = n & left_mask;\n    long right_bits = n & right_mask;\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return left_bits | middle_bits | right_bits;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmprf8z8lzi: /tmp/tmprf8z8lzi.cpp:17: int main(): Assertion `candidate((10)) == (12)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xFFFFFFFFFFFFFFFF;\n    long first_bit = (n & (1 << 63)) >> 63;\n    long last_bit = n & 1;\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << 63) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmppltqvfn9: /tmp/tmppltqvfn9.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp2mzksaer: /tmp/tmp2mzksaer.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    for (int i = 1; i < (sizeof(long) * 8) - 1; i++) {\n        mask |= (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp5psu2g5_: /tmp/tmp5psu2g5_.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0xffffffffffffffff;\n    mask = mask ^ (1 << (sizeof(long) * 8 - 1));\n    mask = mask ^ 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 1)) | (last_bit >> (sizeof(long) * 8 - 1));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpe2ekkzm2: /tmp/tmpe2ekkzm2.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpyzctx6r4: /tmp/tmpyzctx6r4.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7ffffffffffffffe;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpwxsdth5r: /tmp/tmpwxsdth5r.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    long first_bit = n & 1;\n    long last_bit = n & (1 << 63);\n    mask = mask ^ (1 << 63);\n    mask = mask ^ 1;\n    long result = n ^ mask;\n    result = result | first_bit;\n    result = result | last_bit;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmphop5fk4y: /tmp/tmphop5fk4y.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmp_sxgxi09: /tmp/tmp_sxgxi09.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0;\n    long temp = n;\n    int count = 0;\n    while(temp) {\n        temp = temp >> 1;\n        count++;\n    }\n    for(int i = 2; i < count - 1; i++) {\n        mask = mask | (1 << i);\n    }\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpi9x6j809: /tmp/tmpi9x6j809.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = 0;\n    for (int i = 1; i < sizeof(long) * 8 - 1; i++) {\n        mask |= 1 << i;\n    }\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp8xejhqi4: /tmp/tmp8xejhqi4.cpp:17: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    long first_bit = (n & 0x8000000000000000) >> 63;\n    long last_bit = (n & 0x0000000000000001);\n    long middle_bits = (n & mask) >> 1;\n    return (first_bit << 63) | (middle_bits << 1) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp4a1cmfav: /tmp/tmp4a1cmfav.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp5dtclk43: /tmp/tmp5dtclk43.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit << 1);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp1co7ewwk: /tmp/tmp1co7ewwk.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = (n >> 1) & 1;\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    return (first_bit << (sizeof(long) * 8 - 2)) | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpzshgo3b_: /tmp/tmpzshgo3b_.cpp:13: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 1)) - 1;\n    mask = mask ^ (1 << 0);\n    long middle_bits = n & mask;\n    middle_bits = middle_bits ^ mask;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpefb8iefd: /tmp/tmpefb8iefd.cpp:15: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long m = 1;\n    long i = 0;\n    while(i < sizeof(long)*8) {\n        if(i != 0 && i != sizeof(long)*8-1) {\n            n = n ^ m;\n        }\n        m = m << 1;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmp4841xlwy: /tmp/tmp4841xlwy.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    long first_bit = n & 0x8000000000000000;\n    long last_bit = n & 0x0000000000000001;\n    return (n ^ mask) | first_bit | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmpu_ao3vzt: /tmp/tmpu_ao3vzt.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0b11;\n    long result = 0;\n    for (int i = 0; i < sizeof(n) * 8; i++) {\n        if (i == 0 || i == sizeof(n) * 8 - 1) {\n            result |= (n & mask) << i;\n        } else {\n            result |= (~n & mask) << i;\n        }\n        mask <<= 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "tmptn8f9s20: /tmp/tmptn8f9s20.cpp:19: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "tmpnwc3h1uv: /tmp/tmpnwc3h1uv.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp2mydkd5s: /tmp/tmp2mydkd5s.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    long middle_bits = n & mask;\n    middle_bits = ~middle_bits;\n    return first_bit | middle_bits | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "tmpadi2xwyb: /tmp/tmpadi2xwyb.cpp:14: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7fffffffffffffff;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpexim8d_t: /tmp/tmpexim8d_t.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (8 * sizeof(long) - 1));\n    long mask = (1 << (8 * sizeof(long) - 2)) - 1;\n    return first_bit | (n ^ mask) | last_bit;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "tmp8mx1q7gs: /tmp/tmp8mx1q7gs.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long first_bit = n & 1;\n    long last_bit = n & (1 << (sizeof(long) * 8 - 1));\n    long mask = (1 << (sizeof(long) * 8 - 2)) - 1;\n    return (n ^ mask) | (first_bit << (sizeof(long) * 8 - 2)) | (last_bit >> (sizeof(long) * 8 - 2));\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "tmp44ftvcn2: /tmp/tmp44ftvcn2.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n ^ mask;\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmp95j8tp9l: /tmp/tmp95j8tp9l.cpp:11: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7FFFFFFFFFFFFFFF;\n    return (n ^ mask);\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1665517164,
      "stdout": "",
      "stderr": "tmpfc78zovd: /tmp/tmpfc78zovd.cpp:10: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0xffffffffffffffff;\n    mask = mask >> 2;\n    mask = mask << 2;\n    return n ^ mask;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "tmp7oq9n5hd: /tmp/tmp7oq9n5hd.cpp:12: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlong toggle_middle_bits(long n) {\n    long mask = 0x7;\n    long result = n;\n    for(int i = 1; i < sizeof(n) * 8 - 2; i++) {\n        if((n & (mask << i)) == 0) {\n            result |= (mask << i);\n        } else {\n            result &= ~(mask << i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = toggle_middle_bits;\n    assert(candidate((9)) == (15));\n    assert(candidate((10)) == (12));\n    assert(candidate((11)) == (13));\n    assert(candidate((65)) == (127));\n    assert(candidate((77)) == (115));\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "tmp88lvr3t3: /tmp/tmp88lvr3t3.cpp:18: int main(): Assertion `candidate((9)) == (15)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}