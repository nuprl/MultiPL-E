{
  "name": "mbpp_291_count_no_of_ways",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==0) return 0;\n    if(n==1) return k;\n    if(n==2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i=3; i<=n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    for (int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    if (n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n\tlong same = 0, diff = k;\n\tlong total = same + diff;\n\tfor (int i = 2; i <= n; i++) {\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for(long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0 || k == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==0) return 0;\n    if(n==1) return k;\n    if(n==2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i=3; i<=n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    if (n == 2) return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==0)\n        return 0;\n    if(n==1)\n        return k;\n    if(n==2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i=3; i<=n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i=2;i<=n;i++){\n        same = diff;\n        diff = total * (k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==1) return k;\n    if(n==2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i=3; i<=n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return (same + diff);\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==0)\n        return 0;\n    if(n==1)\n        return k;\n    if(n==2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i=3;i<=n;i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    for (long i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  long same = 0, diff = k, total = k;\n  for(int i = 2; i <= n; i++) {\n    same = diff;\n    diff = total * (k - 1);\n    total = same + diff;\n  }\n  return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  long same = 0, diff = k;\n  for(long i = 2; i <= n; i++) {\n    long temp = diff;\n    diff = (same + diff) * (k - 1);\n    same = temp;\n  }\n  return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k * k;\n    }\n    long same_color = k;\n    long diff_color = k * (k - 1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff_color;\n        diff_color = (same_color + diff_color) * (k - 1);\n        same_color = temp;\n    }\n    return same_color + diff_color;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for(int i=2; i<=n; i++) {\n        same = diff;\n        diff = total * (k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    for (long i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    if (n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n\tlong same = 0, diff = k;\n\tlong total = same + diff;\n\tfor (long i = 2; i <= n; i++) {\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return k;\n  }\n  if (n == 2) {\n    return k * k;\n  }\n  long same = k;\n  long diff = k * (k - 1);\n  for (long i = 3; i <= n; i++) {\n    long temp = diff;\n    diff = (same + diff) * (k - 1);\n    same = temp;\n  }\n  return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    long same = k;\n    long diff = k * (k - 1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return (same + diff);\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  long same = 0, diff = k;\n  for (int i = 2; i <= n; i++) {\n    long temp = diff;\n    diff = (same + diff) * (k - 1);\n    same = temp;\n  }\n  return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return k;\n  }\n  if (n == 2) {\n    return k * k;\n  }\n  long same = k;\n  long diff = k * (k - 1);\n  for (long i = 3; i <= n; i++) {\n    long temp = diff;\n    diff = (same + diff) * (k - 1);\n    same = temp;\n  }\n  return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    if(n==1)\n        return k;\n    if(n==2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i=3;i<=n;i++){\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n\tlong same = 0, diff = k;\n\tlong total = same + diff;\n\tfor (long i = 2; i <= n; i++) {\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n\tlong same = 0, diff = k;\n\tlong total = same + diff;\n\tfor (int i = 2; i <= n; i++) {\n\t\tsame = diff;\n\t\tdiff = total * (k - 1);\n\t\ttotal = same + diff;\n\t}\n\treturn total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    long same = k;\n    long diff = k * (k - 1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==1) return k;\n    if(n==2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i=3;i<=n;i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    long total = same+diff;\n    for(int i=3; i<=n; i++) {\n        same = diff;\n        diff = total*(k-1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) return k;\n    if (n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return k;\n  }\n  if (n == 2) {\n    return k * k;\n  }\n  long same = k;\n  long diff = k * (k - 1);\n  for (int i = 3; i <= n; i++) {\n    long temp = diff;\n    diff = (same + diff) * (k - 1);\n    same = temp;\n  }\n  return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    assert(n > 0);\n    assert(k > 0);\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same_color = k;\n    long diff_color = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff_color;\n        diff_color = (same_color + diff_color) * (k - 1);\n        same_color = temp;\n    }\n    return same_color + diff_color;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    for (long i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    long total = same + diff;\n    for(long i = 3; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    if(n==0)\n        return 0;\n    if(n==1)\n        return k;\n    if(n==2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i=3;i<=n;i++){\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i=3;i<=n;i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1)\n        return k;\n    if (n == 2)\n        return k * k;\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k, total = k;\n    for (long i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==1) return k;\n    if(n==2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i=3; i<=n; i++) {\n        long temp = diff;\n        diff = (same+diff)*(k-1);\n        same = temp;\n    }\n    return same+diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for(long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    // Write your code here\n    long same = 0, diff = k;\n    for(int i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    for (long i = 2; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for(int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    long same = 0, diff = k;\n    long total = same + diff;\n    for (int i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    assert(n > 0 && k > 0);\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0 || k == 0) return 0;\n    if(n == 1) return k;\n    if(n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0) return 0;\n    if (n == 1) return k;\n    if (n == 2) return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1665510185,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return k;\n    if(n == 2)\n        return k*k;\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n==0) {\n        return 0;\n    }\n    if(n==1) {\n        return k;\n    }\n    if(n==2) {\n        return k*k;\n    }\n    long same_color = k;\n    long diff_color = k*(k-1);\n    for(long i=3;i<=n;i++) {\n        long temp = diff_color;\n        diff_color = (same_color+diff_color)*(k-1);\n        same_color = temp;\n    }\n    return same_color+diff_color;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if(n == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return k;\n    }\n    if(n == 2) {\n        return k*k;\n    }\n    long same = k;\n    long diff = k*(k-1);\n    for(long i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff)*(k-1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlong count_no_of_ways(long n, long k) {\n    if (n == 0 || k == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    long same = k;\n    long diff = k * (k - 1);\n    for (int i = 3; i <= n; i++) {\n        long temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\nint main() {\n    auto candidate = count_no_of_ways;\n    assert(candidate((2), (4)) == (16));\n    assert(candidate((3), (2)) == (6));\n    assert(candidate((4), (4)) == (228));\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}