{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmphucwjjec: /tmp/tmphucwjjec.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp9yo4xj9v: /tmp/tmp9yo4xj9v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmphz400ksz: /tmp/tmphz400ksz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        long sum = max_sum_increasing_subseq(a, n, k, k) + a[index];\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpl9aa1nde: /tmp/tmpl9aa1nde.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpkvbjge4c: /tmp/tmpkvbjge4c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n        if (i == k) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmprjzmvpki: /tmp/tmprjzmvpki.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(i == k) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t\telse if(a[i] < a[k]) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp_4d7qnhg: /tmp/tmp_4d7qnhg.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum = sum + a[i];\n\t}\n\tmax = sum;\n\tfor (long i = k; i < n; i++) {\n\t\tsum = sum + a[i] - a[i - k];\n\t\tif (sum > max) {\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3qo80jl6: /tmp/tmp3qo80jl6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    max_sum = sum + a[k];\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpyioxw9fc: /tmp/tmpyioxw9fc.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpjw8mskqu: /tmp/tmpjw8mskqu.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(k == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[k] > a[index]) {\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, k, k+1);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index, k+1);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpxzr0ycb2: /tmp/tmpxzr0ycb2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) return 0;\n    if(k == n) return 0;\n    if(index > k) return 0;\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpx8lz4r87: /tmp/tmpx8lz4r87.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(k > index) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, k, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpkr37oday: /tmp/tmpkr37oday.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510481,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510467,
      "stdout": "",
      "stderr": "tmpt_a0ogsq: /tmp/tmpt_a0ogsq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif (a[index] < a[k]) {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\telse {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpiic3qfku: /tmp/tmpiic3qfku.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif(a[index] < a[k]) {\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmptbqwpewm: /tmp/tmptbqwpewm.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k + 1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpttehy_9g: /tmp/tmpttehy_9g.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n-1) {\n        if(k == n-1) {\n            return a[index];\n        }\n        return 0;\n    }\n    long ans = 0;\n    if(k == index) {\n        ans = a[index];\n    }\n    for(long i = index+1; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp040tt2sj: /tmp/tmp040tt2sj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t\tif(sum > max_sum) {\n\t\t\t\tmax_sum = sum;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp03yhgfu9: /tmp/tmp03yhgfu9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    long sum = 0;\n    for (long i = index; i < k; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpglnj3rij: /tmp/tmpglnj3rij.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tmax_sum = sum;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t\telse {\n\t\t\tsum = sum - a[i - 1] + a[i];\n\t\t}\n\t\tif (sum > max_sum) {\n\t\t\tmax_sum = sum;\n\t\t}\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpgs2g66a_: /tmp/tmpgs2g66a_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpkvbjge4c: /tmp/tmpkvbjge4c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n        if(a[i] < a[k]){\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp76xnn5ge: /tmp/tmp76xnn5ge.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpa_z0awg6: /tmp/tmpa_z0awg6.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] < a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpax4im26_: /tmp/tmpax4im26_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpiypi_1mj: /tmp/tmpiypi_1mj.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index >= n) {\n\t\treturn 0;\n\t}\n\tif(index == k) {\n\t\treturn a[index];\n\t}\n\tlong ans = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] > a[index]) {\n\t\t\tans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[index]);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp4jej_koi: /tmp/tmp4jej_koi.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    if(index == n)\n        return 0;\n    if(index == k)\n        return a[index];\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpcif8focm: /tmp/tmpcif8focm.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpcein9y2i: /tmp/tmpcein9y2i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpvlc5er6q: /tmp/tmpvlc5er6q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index + 1 == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpkz4o1_7c: /tmp/tmpkz4o1_7c.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpiypi_1mj: /tmp/tmpiypi_1mj.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = a[i] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpoqvcop7_: /tmp/tmpoqvcop7_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpaafc21gq: /tmp/tmpaafc21gq.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    if (index < k) {\n        return sum + a[index];\n    } else {\n        return sum;\n    }\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpwe3ywmlh: /tmp/tmpwe3ywmlh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[index];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp2kl0bkkn: /tmp/tmp2kl0bkkn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpjgajrbr4: /tmp/tmpjgajrbr4.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpvlc5er6q: /tmp/tmpvlc5er6q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpgjcg2m04: /tmp/tmpgjcg2m04.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index >= n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if (k > index) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp_2daa8ym: /tmp/tmp_2daa8ym.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long include = 0;\n    if(a[index] < a[k]) {\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp75uf8wez: /tmp/tmp75uf8wez.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmp4k9dzerj: /tmp/tmp4k9dzerj.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong include = 0;\n\tif(a[index] < a[k]) {\n\t\tinclude = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\tlong exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n\treturn std::max(include, exclude);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpuu5n7fo3: /tmp/tmpuu5n7fo3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    if (k == n) {\n        return 0;\n    }\n    long ans = 0;\n    if (a[index] < a[k]) {\n        ans = max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k];\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index, k + 1));\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp9ihti182: /tmp/tmp9ihti182.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpqjr6o1xv: /tmp/tmpqjr6o1xv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index + 1 == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpm69h86dl: /tmp/tmpm69h86dl.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum, sum1);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpa0i0zrpa: /tmp/tmpa0i0zrpa.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpw6n809wq: /tmp/tmpw6n809wq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp6lrrtff5: /tmp/tmp6lrrtff5.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp9yo4xj9v: /tmp/tmp9yo4xj9v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp7_zrqbqn: /tmp/tmp7_zrqbqn.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum=0;\n    for(long i=index;i<k;i++)\n    {\n        sum+=a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp4b4x87w0: /tmp/tmp4b4x87w0.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpk79_xuhc: /tmp/tmpk79_xuhc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long sum = 0;\n    long max_sum = 0;\n    long max_sum_k = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[index]) {\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    max_sum_k = max_sum + a[index];\n    if (max_sum_k > max_sum) {\n        max_sum = max_sum_k;\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp51x9eux5: /tmp/tmp51x9eux5.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for(long i = index + 1; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            } else {\n                sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpliy2gcd_: /tmp/tmpliy2gcd_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long include = 0;\n    if (a[index] < a[k]) {\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpt4fc1y9q: /tmp/tmpt4fc1y9q.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tif (index == n - 1) {\n\t\treturn a[index];\n\t}\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tsum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n\t\t\tif (sum > max) {\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t}\n\tif (a[k] > a[index]) {\n\t\tsum = a[index] + max_sum_increasing_subseq(a, n, k, k);\n\t\tif (sum > max) {\n\t\t\tmax = sum;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpzhf8ur8i: /tmp/tmpzhf8ur8i.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    if (index > k) {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    if (index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmplnlpq48f: /tmp/tmplnlpq48f.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpkvbjge4c: /tmp/tmpkvbjge4c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] < a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, k, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmplikucxs0: /tmp/tmplikucxs0.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpwukqdly3: /tmp/tmpwukqdly3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    for(long i = k+1; i < n; i++){\n        if(a[i] > a[k]){\n            max = max_sum_increasing_subseq(a, n, k, i);\n        }\n    }\n    if(max > sum){\n        return max;\n    }\n    else{\n        return sum;\n    }\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpnkz9auga: /tmp/tmpnkz9auga.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp5kw5762g: /tmp/tmp5kw5762g.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if (a[index] < a[k]) {\n        sum1 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp2zlg2moo: /tmp/tmp2zlg2moo.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpk79_xuhc: /tmp/tmpk79_xuhc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpqaf1nlhh: /tmp/tmpqaf1nlhh.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    if(index == n-1)\n        return a[index];\n    long max_sum = 0;\n    for(long i = index+1; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum)\n                max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpjy06wcd0: /tmp/tmpjy06wcd0.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n  // Write your code here\n  long sum = 0;\n  long max = 0;\n  for(long i = 0; i < index; i++) {\n    if(a[i] < a[k]) {\n      sum = sum + a[i];\n    }\n  }\n  sum = sum + a[k];\n  for(long i = index; i < n; i++) {\n    if(a[i] < a[k]) {\n      max = max + a[i];\n    }\n  }\n  if(max > sum) {\n    return max;\n  }\n  else {\n    return sum;\n  }\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpk6ad3iy8: /tmp/tmpk6ad3iy8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp84zxqj29: /tmp/tmp84zxqj29.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tfor(long i = index; i < k; i++)\n\t{\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpk_fdrv0h: /tmp/tmpk_fdrv0h.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpk79_xuhc: /tmp/tmpk79_xuhc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp8a_lsc1q: /tmp/tmp8a_lsc1q.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index >= n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i <= k; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i, k);\n            max_sum = std::max(max_sum, sum);\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpx7ssnizp: /tmp/tmpx7ssnizp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long including_k = 0;\n    if(k > index) {\n        including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including_k, excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpqx5t9r8q: /tmp/tmpqx5t9r8q.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp47rrvw7m: /tmp/tmp47rrvw7m.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp9yo4xj9v: /tmp/tmp9yo4xj9v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpvpqxs8p8: /tmp/tmpvpqxs8p8.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpx8k5l2r6: /tmp/tmpx8k5l2r6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpyopzecp9: /tmp/tmpyopzecp9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tlong sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp6vlzm5zt: /tmp/tmp6vlzm5zt.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpciwzy_9y: /tmp/tmpciwzy_9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpbt881_b2: /tmp/tmpbt881_b2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpv9izcohg: /tmp/tmpv9izcohg.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long including_k = 0;\n    if(k < n) {\n        including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long excluding_k = max_sum_increasing_subseq(a, n, index + 1, index + 1);\n    return std::max(including_k, excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpw7v83ngb: /tmp/tmpw7v83ngb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n - 1) {\n        return a[index];\n    }\n    long sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    if (index == k) {\n        return sum + a[index];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp4brrol87: /tmp/tmp4brrol87.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n)\n        return 0;\n    long sum_including_k = 0;\n    if(a[index] < a[k])\n        sum_including_k = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmptfq58ayd: /tmp/tmptfq58ayd.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpciwzy_9y: /tmp/tmpciwzy_9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i=0;i<n;i++)\n    {\n        if(i<index)\n        {\n            if(a[i]<a[index])\n            {\n                sum+=a[i];\n            }\n        }\n        else if(i==index)\n        {\n            sum+=a[i];\n        }\n        else if(i>index)\n        {\n            if(i<k)\n            {\n                if(a[i]<a[k])\n                {\n                    sum+=a[i];\n                }\n            }\n            else if(i==k)\n            {\n                sum+=a[i];\n            }\n            else if(i>k)\n            {\n                if(a[i]<a[k])\n                {\n                    sum+=a[i];\n                }\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp1tzz1202: /tmp/tmp1tzz1202.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmphauntlye: /tmp/tmphauntlye.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            if(i == k) {\n                max_sum = std::max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n            } else {\n                max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i + 1, k));\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpvlc5er6q: /tmp/tmpvlc5er6q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum1 = max_sum_increasing_subseq(a, n, index + 1, k);\n\tlong sum2 = 0;\n\tif (index < k) {\n\t\tsum2 = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\treturn std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp5saexbv4: /tmp/tmp5saexbv4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = sum + a[i];\n\t\t}\n\t}\n\tsum = sum + a[k];\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp7tbq57zc: /tmp/tmp7tbq57zc.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if (index == k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpkskve_ui: /tmp/tmpkskve_ui.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            ans = std::max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    if (index == k) {\n        ans = std::max(ans, a[index] + max_sum_increasing_subseq(a, n, index + 1, k));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpuoh8j4bc: /tmp/tmpuoh8j4bc.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpgjcg2m04: /tmp/tmpgjcg2m04.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = k+1; i < n; i++){\n        if(a[i] > a[k]){\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpbp35ppys: /tmp/tmpbp35ppys.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long max_sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(max_sum_including_k, max_sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123790,
      "stdout": "",
      "stderr": "tmp792q3s_m: /tmp/tmp792q3s_m.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long including = 0;\n    if (a[index] < a[k]) {\n        including = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including, excluding);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmp_gjx4hhp: /tmp/tmp_gjx4hhp.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpwukqdly3: /tmp/tmpwukqdly3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong max_sum = 0;\n\tlong max_sum_till_index = 0;\n\tlong max_sum_including_k = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[index]) {\n\t\t\tmax_sum_till_index = std::max(max_sum_till_index, max_sum_increasing_subseq(a, n, i, index));\n\t\t}\n\t}\n\tmax_sum_till_index += a[index];\n\tfor (long i = k; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum_including_k = std::max(max_sum_including_k, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\tmax_sum_including_k += a[k];\n\tmax_sum = std::max(max_sum_till_index, max_sum_including_k);\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tsum += a[i];\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpmzmsv30v: /tmp/tmpmzmsv30v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpp9_67dpk: /tmp/tmpp9_67dpk.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmpk79_xuhc: /tmp/tmpk79_xuhc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    for(long i = k+1; i < n; i++) {\n        if(a[i] > a[k]) {\n            max = std::max(max, max_sum_increasing_subseq(a, n, k, i));\n        }\n    }\n    return sum + max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpea76ugk9: /tmp/tmpea76ugk9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return a[k] + sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(max_sum < sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmp7iua9xc3: /tmp/tmp7iua9xc3.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_k = 0;\n    if(a[index] < a[k]) {\n        sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmpkvbjge4c: /tmp/tmpkvbjge4c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index == k) {\n        max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpxwfnul3d: /tmp/tmpxwfnul3d.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpqr7hozsn: /tmp/tmpqr7hozsn.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum=0;\n    long max_sum=0;\n    for(long i=index;i<k;i++)\n    {\n        sum+=a[i];\n        if(max_sum<sum)\n        {\n            max_sum=sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpk42wu6ba: /tmp/tmpk42wu6ba.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        long sum = max_sum_increasing_subseq(a, n, k + 1, k) + a[index];\n        if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpzikr3spe: /tmp/tmpzikr3spe.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpciwzy_9y: /tmp/tmpciwzy_9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    if(index == n)\n        return 0;\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpi25qpy_7: /tmp/tmpi25qpy_7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmptc5nh_45: /tmp/tmptc5nh_45.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k) + a[index];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpj1c_18kv: /tmp/tmpj1c_18kv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpvaotaxd_: /tmp/tmpvaotaxd_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp9yo4xj9v: /tmp/tmp9yo4xj9v.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index >= n) {\n        return 0;\n    }\n    long sum = 0;\n    if (a[index] < a[k]) {\n        sum = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    return std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k + 1));\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpai50llhu: /tmp/tmpai50llhu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    long max_sum_k = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[index]){\n            sum = max_sum_increasing_subseq(a, n, i, index);\n            if(sum > max_sum){\n                max_sum = sum;\n            }\n        }\n    }\n    max_sum_k = max_sum + a[index];\n    return max_sum_k;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpfpi5y24z: /tmp/tmpfpi5y24z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmp4deg5l65: /tmp/tmp4deg5l65.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    if (k == n) {\n        return 0;\n    }\n    if (a[index] > a[k]) {\n        return std::max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1));\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpnnzmpeo8: /tmp/tmpnnzmpeo8.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123806,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n    }\n    max_sum = sum;\n    for(long i = k; i < n; i++) {\n        sum = sum - a[i - k] + a[i];\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpudjqtwnx: /tmp/tmpudjqtwnx.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(k == n) {\n        return 0;\n    }\n    long ans = 0;\n    if(a[index] < a[k]) {\n        ans = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    ans = std::max(ans, max_sum_increasing_subseq(a, n, index + 1, k + 1));\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123792,
      "stdout": "",
      "stderr": "tmp0ug_tl3z: /tmp/tmp0ug_tl3z.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong max = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tif (sum > max) {\n\t\tmax = sum;\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp3p8bq5sg: /tmp/tmp3p8bq5sg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if (k > index) {\n        max_sum += a[index];\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpu1mdad2d: /tmp/tmpu1mdad2d.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpiypi_1mj: /tmp/tmpiypi_1mj.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong sum = 0;\n\tlong max_sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tfor (long i = k + 1; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, k, i));\n\t\t}\n\t}\n\treturn sum + max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpp3hgcn83: /tmp/tmpp3hgcn83.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tmax_sum = sum + a[k];\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpehtlvr9l: /tmp/tmpehtlvr9l.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp_v5h1qux: /tmp/tmp_v5h1qux.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpvaotaxd_: /tmp/tmpvaotaxd_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmpciwzy_9y: /tmp/tmpciwzy_9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum + a[i] > max_sum) {\n                max_sum = sum + a[i];\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp1rcqjat5: /tmp/tmp1rcqjat5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) return 0;\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if(index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpioe_4kej: /tmp/tmpioe_4kej.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpe6f54qpm: /tmp/tmpe6f54qpm.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpcein9y2i: /tmp/tmpcein9y2i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n-1) {\n        if(k == n-1) {\n            return a[n-1];\n        }\n        return 0;\n    }\n    if(k == n-1) {\n        return a[n-1];\n    }\n    if(k < index) {\n        return 0;\n    }\n    long sum1 = max_sum_increasing_subseq(a, n, index+1, k);\n    long sum2 = max_sum_increasing_subseq(a, n, index+1, k+1);\n    if(a[index] < a[k]) {\n        return std::max(sum1, sum2+a[index]);\n    }\n    return sum1;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp8r06dt4i: /tmp/tmp8r06dt4i.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(index > k) {\n        return max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    if(index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long option1 = max_sum_increasing_subseq(a, n, index + 1, k);\n    long option2 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(option1, option2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpddp8g076: /tmp/tmpddp8g076.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        if(sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpk5pzluvt: /tmp/tmpk5pzluvt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum + a[index];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmphqcg2k4s: /tmp/tmphqcg2k4s.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long temp = max_sum_increasing_subseq(a, n, i, k);\n            if(temp > sum) {\n                sum = temp;\n            }\n        }\n    }\n    if(a[index] < a[k]) {\n        sum += a[k];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpo3_tbcfj: /tmp/tmpo3_tbcfj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif (index == n - 1) {\n\t\treturn a[index];\n\t}\n\tlong sum = 0;\n\tfor (long i = index + 1; i <= k; i++) {\n\t\tif (a[i] > a[index]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn a[index] + sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp0ex_y_b2: /tmp/tmp0ex_y_b2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        sum += a[i];\n        max_sum = std::max(max_sum, sum);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmpl4ys1il6: /tmp/tmpl4ys1il6.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum_including_kth_element = 0;\n    if(a[index] < a[k]) {\n        sum_including_kth_element = a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1);\n    }\n    long sum_excluding_kth_element = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_kth_element, sum_excluding_kth_element);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp6sq_pqjt: /tmp/tmp6sq_pqjt.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if(a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index+1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index+1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmp7sgj_4jr: /tmp/tmp7sgj_4jr.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(i == k) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t} else {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "tmplynvwxpl: /tmp/tmplynvwxpl.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    else {\n        sum = max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "tmp13o6ids_: /tmp/tmp13o6ids_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long include_k = 0;\n    if(k > index) {\n        include_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long exclude_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include_k, exclude_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmp1i79l8mb: /tmp/tmp1i79l8mb.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n            if(sum > max) {\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpqwnkv4pg: /tmp/tmpqwnkv4pg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpgjcg2m04: /tmp/tmpgjcg2m04.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpmm0qz42n: /tmp/tmpmm0qz42n.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1665510466,
      "stdout": "",
      "stderr": "tmp3fu_jn2l: /tmp/tmp3fu_jn2l.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long j = index + 1; j <= n; j++) {\n        if(a[j] > a[index]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, j, k) + a[index]);\n        }\n    }\n    if(index < k) {\n        ans = std::max(ans, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmphxn8drnr: /tmp/tmphxn8drnr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(a[index] > a[k]) {\n        long sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123785,
      "stdout": "",
      "stderr": "tmpcein9y2i: /tmp/tmpcein9y2i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tlong max_sum = 0;\n\tfor(long i = 0; i < index; i++) {\n\t\tif(a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpef8w0ghu: /tmp/tmpef8w0ghu.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpbvxs1kkc: /tmp/tmpbvxs1kkc.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n - 1) {\n        return a[index];\n    }\n    long max_sum = a[index];\n    for (long i = index + 1; i < n; i++) {\n        if (a[i] > a[index]) {\n            if (i == k) {\n                max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            } else {\n                max_sum = std::max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i, k));\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpprexasko: /tmp/tmpprexasko.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long sum = 0;\n    for (long i = index; i < k; ++i) {\n        sum += a[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmp5fch4u4d: /tmp/tmp5fch4u4d.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum += a[i];\n        }\n    }\n    sum += a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123789,
      "stdout": "",
      "stderr": "tmp8a_lsc1q: /tmp/tmp8a_lsc1q.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long max_sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long max_sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(max_sum_including_k, max_sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123790,
      "stdout": "",
      "stderr": "tmp792q3s_m: /tmp/tmp792q3s_m.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpbf20hc7w: /tmp/tmpbf20hc7w.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = index; i < k; i++){\n        if(a[i] < a[k]){\n            sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max){\n                max = sum;\n            }\n        }\n    }\n    return max + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            long sum = a[index] + max_sum_increasing_subseq(a, n, i + 1, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    if(k > index) {\n        long sum = a[k] + max_sum_increasing_subseq(a, n, k + 1, k);\n        if(sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpbf20hc7w: /tmp/tmpbf20hc7w.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n-1) {\n        return a[index];\n    }\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i, k);\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tif(a[index] < a[k]) {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n\t}\n\telse {\n\t\tsum = max_sum_increasing_subseq(a, n, index + 1, k);\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpt22t6_6e: /tmp/tmpt22t6_6e.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif (index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor (long i = index; i < n; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123791,
      "stdout": "",
      "stderr": "tmpqr7hozsn: /tmp/tmpqr7hozsn.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    if(index == k) {\n        return a[index];\n    }\n    long sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    long sum_excluding_k = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_k, sum_excluding_k);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmppgw3nz9w: /tmp/tmppgw3nz9w.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for (long i = 0; i < index; i++) {\n        if (a[i] < a[k]) {\n            max_sum = std::max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k));\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpju9mywq0: /tmp/tmpju9mywq0.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = index; i < n; i++) {\n        if (a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i, k) + a[i]);\n        }\n    }\n    if (index < k) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k) + a[index]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmp_movvk0c: /tmp/tmp_movvk0c.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++) {\n        if(a[i] < a[k]) {\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp5kw5762g: /tmp/tmp5kw5762g.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum1 = 0;\n    long sum2 = 0;\n    if (a[index] < a[k]) {\n        sum1 = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    sum2 = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum1, sum2);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmp9s5jhm1y: /tmp/tmp9s5jhm1y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long ans = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            ans = std::max(ans, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123787,
      "stdout": "",
      "stderr": "tmp7_zrqbqn: /tmp/tmp7_zrqbqn.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index == n) {\n        return 0;\n    }\n    long sum_including_kth_element = 0;\n    if (a[index] < a[k]) {\n        sum_including_kth_element = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    long sum_excluding_kth_element = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(sum_including_kth_element, sum_excluding_kth_element);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmpycdouf9n: /tmp/tmpycdouf9n.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long max_sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] < a[k]) {\n            long sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i];\n            if(sum > max_sum) {\n                max_sum = sum;\n            }\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "tmp1ympdtcm: /tmp/tmp1ympdtcm.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        long max_sum_ending_here = 0;\n        for(long j = index; j < i; j++) {\n            if(a[j] < a[i]) {\n                max_sum_ending_here = std::max(max_sum_ending_here, max_sum_increasing_subseq(a, n, j, k));\n            }\n        }\n        max_sum_ending_here += a[i];\n        max_sum = std::max(max_sum, max_sum_ending_here);\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123796,
      "stdout": "",
      "stderr": "tmp67syddum: /tmp/tmp67syddum.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tlong max_sum = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tsum += a[i];\n\t\t}\n\t}\n\tsum += a[k];\n\tmax_sum = sum;\n\tfor (long i = index + 1; i < n; i++) {\n\t\tif (a[i] > a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmp6l8zx5ow: /tmp/tmp6l8zx5ow.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long including = 0;\n    if(a[index] < a[k]) {\n        including = max_sum_increasing_subseq(a, n, index + 1, k) + a[index];\n    }\n    long excluding = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(including, excluding);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpz23yi4eh: /tmp/tmpz23yi4eh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if (index > n) {\n        return 0;\n    }\n    if (index == n) {\n        return a[index];\n    }\n    if (index == k) {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k));\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpq0w1wcln: /tmp/tmpq0w1wcln.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k));\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpvn1eooqh: /tmp/tmpvn1eooqh.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n    for(long i = 0; i < index; i++){\n        if(a[i] < a[k]){\n            sum = sum + a[i];\n        }\n    }\n    sum = sum + a[k];\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpmn12wusm: /tmp/tmpmn12wusm.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    if(a[index] < a[k]) {\n        sum = a[index] + max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    return std::max(sum, max_sum_increasing_subseq(a, n, index + 1, k));\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpa9s8w4wl: /tmp/tmpa9s8w4wl.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tlong max_sum = 0;\n\tfor (long i = 0; i < index; i++) {\n\t\tif (a[i] < a[k]) {\n\t\t\tmax_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k));\n\t\t}\n\t}\n\treturn max_sum + a[k];\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpmozijvkl: /tmp/tmpmozijvkl.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\tif(index == n) {\n\t\treturn 0;\n\t}\n\tlong sum = 0;\n\tfor(long i = index; i < n; i++) {\n\t\tif(a[i] > a[k]) {\n\t\t\tsum = std::max(sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k));\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpq28irash: /tmp/tmpq28irash.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) return 0;\n    if(k == n) return 0;\n    long max_sum = 0;\n    for(long i = index; i < k; i++) {\n        if(a[i] < a[k]) {\n            max_sum = std::max(max_sum, max_sum_increasing_subseq(a, n, i, k+1) + a[k]);\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123798,
      "stdout": "",
      "stderr": "tmpynz5_y2o: /tmp/tmpynz5_y2o.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long include = a[index];\n    long exclude = 0;\n    if(index < k) {\n        include += max_sum_increasing_subseq(a, n, index + 1, k);\n    }\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k);\n    return std::max(include, exclude);\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpwit4byhv: /tmp/tmpwit4byhv.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    // Write your code here\n    long max_sum = 0;\n    long sum = 0;\n    for(long i = index; i < k; i++){\n        sum += a[i];\n        if(sum > max_sum){\n            max_sum = sum;\n        }\n    }\n    return max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmphv9dph8d: /tmp/tmphv9dph8d.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n    if(index == n) {\n        return 0;\n    }\n    long sum = 0;\n    for(long i = index; i < n; i++) {\n        if(a[i] > a[index]) {\n            sum = std::max(sum, max_sum_increasing_subseq(a, n, i + 1, k) + a[i]);\n        }\n    }\n    if(k > index) {\n        sum = std::max(sum, max_sum_increasing_subseq(a, n, k, k) + a[index]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmp495iqpp3: /tmp/tmp495iqpp3.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlong max_sum_increasing_subseq(std::vector<long> a, long n, long index, long k) {\n\t// Write your code here\n\tstd::vector<long> dp(n, 0);\n\tdp[0] = a[0];\n\tfor (long i = 1; i < n; i++) {\n\t\tdp[i] = a[i];\n\t\tfor (long j = 0; j < i; j++) {\n\t\t\tif (a[i] > a[j] && dp[i] < dp[j] + a[i]) {\n\t\t\t\tdp[i] = dp[j] + a[i];\n\t\t\t}\n\t\t}\n\t}\n\tlong max_sum = 0;\n\tfor (long i = index; i < k; i++) {\n\t\tmax_sum = std::max(max_sum, dp[i]);\n\t}\n\treturn max_sum;\n}\nint main() {\n    auto candidate = max_sum_increasing_subseq;\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11));\n    assert(candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (2), (5)) == (7));\n    assert(candidate((std::vector<long>({(long)11, (long)15, (long)19, (long)21, (long)26, (long)28, (long)31})), (7), (2), (4)) == (71));\n}\n",
      "timestamp": 1666123797,
      "stdout": "",
      "stderr": "tmpk8k1jzcq: /tmp/tmpk8k1jzcq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)101, (long)2, (long)3, (long)100, (long)4, (long)5})), (7), (4), (6)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}