{
  "name": "mbpp_59_is_octagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_octagonal;\n    assert(candidate((5)) == (65));\n    assert(candidate((10)) == (280));\n    assert(candidate((15)) == (645));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long) x;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long i = 1;\n    while(true) {\n        long oct = i * (3 * i - 2);\n        if(oct == n) {\n            return i;\n        } else if(oct > n) {\n            return -1;\n        }\n        i++;\n    }",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long x = (long)sqrt(n);\n    if(x*x == n) {\n        return x;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    double root = (1 + sqrt(1 + 24 * n)) / 6;\n    return root == (long) root;",
    "    long a = 1, b = 1, c = -3 * n;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return 0;\n    long x1 = (-b + sqrt(d)) / (2 * a);\n    long x2 = (-b - sqrt(d)) / (2 * a);\n    if (x1 < 0 || x2 < 0) return 0;\n    if (x1 == floor(x1) || x2 == floor(x2)) return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long i = 1;\n    long octagonal = 0;\n    while(octagonal < n) {\n        octagonal = (i * (3 * i - 2));\n        i++;\n    }\n    if(octagonal == n) {\n        return 1;\n    }\n    return 0;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (long)sqrt(n);\n    if(a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long m = (long) (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return -1;",
    "    long m = (long)sqrt(n);\n    if (m*m == n) {\n        return m;\n    }\n    return 0;",
    "    long i = 1;\n    while (n > 0) {\n        n -= (3 * i * i - i) / 2;\n        i++;\n    }\n    return n == 0;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        if ((a+1)%3 == 0) {\n            return a;\n        }\n    }\n    return 0;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    if (root == (long) root) {\n        return 1;\n    }\n    return 0;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        if((root+1)%3 == 0) {\n            return root;\n        }\n    }\n    return 0;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n)\n            return 1;\n        i++;\n    }\n    return 0;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n)\n            return 1;\n        i++;\n    }\n    return 0;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 3;\n    }\n    return n == 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (long)sqrt(n);\n    if (x*x == n) {\n        return x;\n    }\n    return 0;",
    "    long a = (long)sqrt(n);\n    if(a*a == n)\n        return a;\n    return 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 3;\n    }\n    return n == 0;",
    "    long m = (long)sqrt(n);\n    if(m*m == n) {\n        return 1;\n    }\n    return 0;",
    "    long m = (long)sqrt(n);\n    return m*m == n && (m % 2 == 1);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long i = 1;\n    while(true) {\n        long oct = i*(3*i-2);\n        if(oct == n) {\n            return 1;\n        } else if(oct > n) {\n            return 0;\n        }\n        i++;\n    }",
    "    long a = 1, b = 1, c = -3 * n;\n    long delta = b * b - 4 * a * c;\n    if (delta < 0) return 0;\n    long x1 = (-b + sqrt(delta)) / (2 * a);\n    if (x1 * (3 * x1 - 2) == n) return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    double root = (sqrt(1 + 24 * n) + 1.0) / 6.0;\n    return root == (long) root;",
    "    long i = 1;\n    long octagonal = 0;\n    while(octagonal < n) {\n        octagonal = i * (3 * i - 2);\n        i++;\n    }\n    if(octagonal == n) {\n        return 1;\n    }\n    return 0;",
    "    long t = (sqrt(1 + 24 * n) + 1) / 6;\n    return t * (3 * t - 2) == n;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long x = (long) (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1+24*n)+1)/6;\n    if(x*(3*x-2) == n)\n        return x;\n    return 0;",
    "    long i = 1;\n    long oct = 0;\n    while (oct < n) {\n        oct = i * (3 * i - 2);\n        i++;\n    }\n    if (oct == n) {\n        return 1;\n    }\n    return 0;",
    "    long i = 1;\n    while (n > 0) {\n        n -= i;\n        i += 3;\n    }\n    return n == 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2) == n;",
    "    long m = (long)sqrt(n);\n    if (m*m == n) {\n        return m;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    return (a * (3 * a - 2) == n);",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    return a * (3 * a - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long i = 1;\n    while (n > 0) {\n        n -= i;\n        i += 3;\n    }\n    return n == 0;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2) == n;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long)x;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "\tlong i = 1;\n\twhile(true) {\n\t\tlong oct = i*(3*i-2);\n\t\tif(oct == n) {\n\t\t\treturn true;\n\t\t}\n\t\tif(oct > n) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    return a * (3 * a - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    double x = (sqrt(24*n+1)+1)/6;\n    if(x == (long)x)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x == (long)x) return 1;\n    return 0;",
    "    long m = (long) (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long i = 1;\n    while(true) {\n        long num = i*(3*i-2);\n        if(num == n) {\n            return i;\n        }\n        if(num > n) {\n            return 0;\n        }\n        i++;\n    }",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    if (a * (3 * a - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    if (a * (3 * a - 2) == n) {\n        return 1;\n    } else {\n        return 0;\n    }",
    "    long x = (sqrt(24*n+1)+1)/6;\n    return x*(3*x-2) == n;",
    "    long root = (long) sqrt(1 + 24 * n);\n    if (root * root != 1 + 24 * n) {\n        return 0;\n    }\n    root += 1;\n    if (root % 6 != 0) {\n        return 0;\n    }\n    return root / 6;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    if (a * (3 * a - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24*n) + 1)/6;\n    if (x*(3*x - 2) == n)\n        return x;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "\tlong a = (1 + sqrt(1 + 24 * n)) / 6;\n\tif (a * (3 * a - 2) == n) {\n\t\treturn 1;\n\t}\n\treturn 0;",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    return a * (3 * a - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "    double root = (sqrt(1+24*n)+1)/6;\n    if (root == (long)root)\n        return 1;\n    return 0;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long) x;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        if((root+1)%3 == 0) {\n            return root;\n        }\n    }\n    return 0;",
    "    double root = (sqrt(1 + 24 * n) + 1.0) / 6.0;\n    return root == (long) root;",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        long n1 = (long)sqrt(root);\n        if (n1 * n1 == root) {\n            return n1;\n        }\n    }\n    return 0;",
    "    long root = (long) sqrt(n);\n    if (root * root == n) {\n        return root;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    long root = (1 + sqrt(1 + 24 * n)) / 6;\n    if (root * (3 * root - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root * (3 * root - 2);",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = 1, b = 1, c = -(n << 3);\n    long d = b * b - 4 * a * c;\n    if (d < 0) return 0;\n    long s = sqrt(d);\n    if (s * s != d) return 0;\n    long x1 = (-b + s) / (2 * a);\n    if (x1 <= 0) return 0;\n    return x1;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    long root = (1 + sqrt(1 + 24 * n)) / 6;\n    return root * (3 * root - 2);",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long root = (long)sqrt(n);\n    if (root*root == n) {\n        if ((root + 1) % 3 == 0) {\n            return root;\n        }\n    }\n    return 0;",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    return a * (3 * a - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long x = (long)sqrt(n);\n    if (x*x == n) {\n        return x;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (int)x;",
    "    long a = (long)sqrt(n);\n    if (a * a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    if (a * (3 * a - 2) == n) {\n        return a;\n    }\n    return 0;",
    "    long m = (long)sqrt(n);\n    if (m * m == n) {\n        return m;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        long x = (1 + root) / 3;\n        if (x * (3 * x - 2) == n) {\n            return x;\n        }\n    }\n    return 0;",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        if ((1 + root) % 3 == 0) {\n            return (1 + root) / 3;\n        }\n    }\n    return 0;",
    "    long x = (sqrt(24*n+1)+1)/6;\n    if (x*(3*x-2) == n)\n        return x;\n    return 0;",
    "    double root = (sqrt(1+24*n)+1)/6;\n    if (root == (int)root) {\n        return 1;\n    }\n    return 0;",
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long) x;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long i = 1;\n    while (i * (3 * i - 2) < n) {\n        i++;\n    }\n    return i * (3 * i - 2) == n;",
    "    long root = (long) sqrt(n);\n    if (root * root == n) {\n        return root;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long a = (long) (sqrt(1 + 24 * n) + 1) / 6;\n    if (a * (3 * a - 2) == n)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long m = (long) (sqrt(n) + 1);\n    if (m * m == n) {\n        return m;\n    }\n    return 0;",
    "    long a = (long)sqrt(n);\n    if(a*a == n) {\n        return a;\n    }\n    return -1;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        return root;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return 0;",
    "    long i = 1;\n    while(n > 0) {\n        n -= i;\n        i += 3;\n    }\n    if(n == 0)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while (i * (3 * i - 2) < n) {\n        i++;\n    }\n    if (i * (3 * i - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long root = (long)sqrt(n);\n    if (root*root == n) {\n        return root;\n    }\n    return 0;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "\tlong x = (long)sqrt(n);\n\tif (x*x == n) {\n\t\treturn x;\n\t}\n\treturn 0;",
    "    long a = (long)sqrt(n);\n    if(a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long m = (long)sqrt(n);\n    if (m*m == n) {\n        return m;\n    }\n    return 0;",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        return root;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        if((root+1)%3 == 0) {\n            return root;\n        }\n    }\n    return 0;",
    "    long i = 1;\n    while (i * (3 * i - 2) < n) {\n        i++;\n    }\n    return i * (3 * i - 2) == n;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    if (m * (3 * m - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1+24*n)+1)/6;\n    if(x*(3*x-2) == n)\n        return 1;\n    return 0;",
    "    long a = (1 + sqrt(1 + 24 * n)) / 6;\n    if (a * (3 * a - 2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return 0;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return x;\n    return 0;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    if (m * (3 * m - 2) == n)\n        return 1;\n    return 0;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    double root = (sqrt(1 + 24 * n) + 1) / 6;\n    return root == (long) root;",
    "    long nth_octagonal = n*(3*n-2);\n    return nth_octagonal;",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long root = (1 + sqrt(1 + 24 * n)) / 6;\n    return root * (3 * root - 2);",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    return i*(3*i-2) == n;",
    "    long i = 1;\n    while (i*(3*i-2) < n) {\n        i++;\n    }\n    if (i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long t = (sqrt(1 + 24 * n) + 1) / 6;\n    if (t * (3 * t - 2) == n) {\n        return t;\n    }\n    return 0;",
    "    long i = 1;\n    while(i*(3*i-2) <= n) {\n        if(i*(3*i-2) == n) {\n            return 1;\n        }\n        i++;\n    }\n    return 0;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = 1, b = 1, c = -3 * n;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return 0;\n    long x1 = (-b + sqrt(d)) / (2 * a);\n    long x2 = (-b - sqrt(d)) / (2 * a);\n    if (x1 > 0 && x1 == (long)x1) return x1;\n    if (x2 > 0 && x2 == (long)x2) return x2;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long a = 1;\n    long b = 1;\n    long c = -(n * 2);\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return 0;\n    }\n    long x1 = (-b + sqrt(d)) / (2 * a);\n    long x2 = (-b - sqrt(d)) / (2 * a);\n    if (x1 > 0 && x1 == (long)x1) {\n        return x1;\n    }\n    if (x2 > 0 && x2 == (long)x2) {\n        return x2;\n    }\n    return 0;",
    "    long i = 1;\n    while (i * (3 * i - 2) < n) {\n        i++;\n    }\n    return i * (3 * i - 2) == n;",
    "    long root = (1 + sqrt(1 + 24 * n)) / 6;\n    return root * (3 * root - 2) == n;",
    "    long nth_octagonal = (n * (3 * n - 2));\n    return nth_octagonal;",
    "    long root = (long)sqrt(n);\n    if (root * root == n) {\n        return root;\n    }\n    return 0;",
    "    long a = 1, b = 1, c = -1 * (n * 2);\n    long delta = b * b - 4 * a * c;\n    long x1 = (-b + sqrt(delta)) / (2 * a);\n    long x2 = (-b - sqrt(delta)) / (2 * a);\n    if (x1 > 0 && (x1 % 1 == 0)) {\n        return x1;\n    } else if (x2 > 0 && (x2 % 1 == 0)) {\n        return x2;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2) == n;",
    "    long root = (long)sqrt(n);\n    if (root*root == n) {\n        return root;\n    }\n    return -1;",
    "    long root = (long)sqrt(1 + 24 * n);\n    if (root * root != 1 + 24 * n) {\n        return 0;\n    }\n    root += 1;\n    if (root % 6 != 0) {\n        return 0;\n    }\n    root /= 6;\n    return root;",
    "    long a = (long)sqrt(n);\n    if (a*a == n) {\n        return a;\n    }\n    return 0;"
  ]
}