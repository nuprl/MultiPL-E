{
  "name": "mbpp_59_is_octagonal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the nth octagonal number.\nlong is_octagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_octagonal;\n    assert(candidate((5)) == (65));\n    assert(candidate((10)) == (280));\n    assert(candidate((15)) == (645));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    double x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x == (long) x;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long i = 1;\n    while(true) {\n        long oct = i * (3 * i - 2);\n        if(oct == n) {\n            return i;\n        } else if(oct > n) {\n            return -1;\n        }\n        i++;\n    }",
    "    long m = (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long x = (long)sqrt(n);\n    if(x*x == n) {\n        return x;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long i = 1;\n    while(i*(3*i-2) < n) {\n        i++;\n    }\n    if(i*(3*i-2) == n) {\n        return 1;\n    }\n    return 0;",
    "    double root = (1 + sqrt(1 + 24 * n)) / 6;\n    return root == (long) root;",
    "    long a = 1, b = 1, c = -3 * n;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return 0;\n    long x1 = (-b + sqrt(d)) / (2 * a);\n    long x2 = (-b - sqrt(d)) / (2 * a);\n    if (x1 < 0 || x2 < 0) return 0;\n    if (x1 == floor(x1) || x2 == floor(x2)) return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n)\n        return 1;\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    if (x * (3 * x - 2) == n) {\n        return x;\n    }\n    return 0;",
    "    long i = 1;\n    long octagonal = 0;\n    while(octagonal < n) {\n        octagonal = (i * (3 * i - 2));\n        i++;\n    }\n    if(octagonal == n) {\n        return 1;\n    }\n    return 0;",
    "    long a = (sqrt(1 + 24 * n) + 1) / 6;\n    return a * (3 * a - 2);",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long a = (long)sqrt(n);\n    if(a*a == n) {\n        return a;\n    }\n    return 0;",
    "    long x = (sqrt(1 + 24 * n) + 1) / 6;\n    return x * (3 * x - 2);",
    "    long m = (long) (sqrt(1 + 24 * n) + 1) / 6;\n    return m * (3 * m - 2) == n;",
    "    long root = (long)sqrt(n);\n    if(root*root == n) {\n        return root;\n    }\n    return -1;",
    "    long m = (long)sqrt(n);\n    if (m*m == n) {\n        return m;\n    }\n    return 0;",
    "    long i = 1;\n    while (n > 0) {\n        n -= (3 * i * i - i) / 2;\n        i++;\n    }\n    return n == 0;"
  ]
}