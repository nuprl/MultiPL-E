{
  "name": "mbpp_69_is_sublist",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a vector contains the given subvector or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin()+1, l.end());\n        std::vector<long> s_new(s.begin()+1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin()+1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return (it != l.end());",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 != *first2) continue;\n        ++first2;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto s_last = s.end();\n    auto l_first = l.begin();\n    auto l_last = l.end();\n    while (l_first != l_last) {\n        if (*l_first == *s_first) {\n            auto s_next = s_first;\n            auto l_next = l_first;\n            while (s_next != s_last && l_next != l_last) {\n                if (*s_next != *l_next) break;\n                ++s_next;\n                ++l_next;\n            }\n            if (s_next == s_last) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    break;\n                }\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        ++l_iter;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (std::equal(s.begin(), s.end(), l.begin() + i)) {\n            return true;\n        }\n    }\n    return false;",
    "  if (s.size() == 0) return true;\n  if (l.size() == 0) return false;\n  if (l.size() < s.size()) return false;\n  for (int i = 0; i < l.size() - s.size() + 1; i++) {\n    if (l[i] == s[0]) {\n      bool is_sub = true;\n      for (int j = 0; j < s.size(); j++) {\n        if (l[i+j] != s[j]) {\n          is_sub = false;\n          break;\n        }\n      }\n      if (is_sub) return true;\n    }\n  }\n  return false;",
    "    int i,j;\n    for(i=0;i<l.size();i++)\n    {\n        for(j=0;j<s.size();j++)\n        {\n            if(l[i+j]!=s[j])\n            {\n                break;\n            }\n        }\n        if(j==s.size())\n        {\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (*i == *first) {\n            if (std::search(i, l.end(), first, last) != l.end()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++l_iter;\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            ++l_iter;\n            s_iter = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool found = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                found = false;\n                break;\n            }\n        }\n        if (found)\n            return true;\n    }\n    return false;",
    "    // your code here\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()){\n        if(l[i]==s[j]){\n            i++;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n    if(j==s.size()){\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        ++l_iter;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    } else {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        return is_sublist(l_new, s);\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size() - s.size() + 1; i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = std::search(l.begin(), l.end(), first, last);\n    return (subrange != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = std::search(l.begin(), l.end(), first, last);\n    return (subrange != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto first = l.begin();\n    auto last = l.begin() + s.size();\n    while (last != l.end()) {\n        if (std::equal(first, last, s.begin())) return true;\n        first++;\n        last++;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        return is_sublist(std::vector<long>(l.begin() + 1, l.end()), std::vector<long>(s.begin() + 1, s.end()));\n    }\n    return is_sublist(std::vector<long>(l.begin() + 1, l.end()), s);",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        int j = 0;\n        for (j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j])\n                break;\n        }\n        if (j == s.size())\n            return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    } else {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        return is_sublist(l1, s);\n    }",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    int i = 0, j = 0;\n    while(i < l.size() && j < s.size()) {\n        if(l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j = 1; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 == *first2) ++first2;\n        else first2 = s.begin();\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++l_it;\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            ++l_it;\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_rest(l.begin() + 1, l.end());\n        std::vector<long> s_rest(s.begin() + 1, s.end());\n        return is_sublist(l_rest, s_rest);\n    }\n    std::vector<long> l_rest(l.begin() + 1, l.end());\n    return is_sublist(l_rest, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n        ++l_it;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n        ++l_it;\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(j = 0; j < s.size(); j++) {\n                if(l[i + j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    } else {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        return is_sublist(l_new, s);\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++l_iter;\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            ++l_iter;\n            s_iter = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long>::iterator it = l.begin();\n        std::vector<long>::iterator it2 = s.begin();\n        while (it2 != s.end()) {\n            if (*it != *it2) return false;\n            it++;\n            it2++;\n        }\n        return true;\n    }\n    std::vector<long>::iterator it = l.begin();\n    it++;\n    std::vector<long> new_l(it, l.end());\n    return is_sublist(new_l, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++s_iter;\n            if (s_iter == s.end()) {\n                return true;\n            }\n        } else {\n            s_iter = s.begin();\n        }\n        ++l_iter;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            auto s_it = s_first;\n            auto l_it = l_first;\n            while (s_it != s.end() && l_it != l.end()) {\n                if (*s_it != *l_it) break;\n                ++s_it;\n                ++l_it;\n            }\n            if (s_it == s.end()) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return it != l.end();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++l_iter;\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            l_iter = ++l.begin();\n            s_iter = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n        ++l_it;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin() + 1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = l.begin();\n    auto last = l.end();\n    auto sub = s.begin();\n    auto sub_last = s.end();\n    while (first != last) {\n        auto it = first;\n        while (it != last && sub != sub_last && *it == *sub) {\n            ++it;\n            ++sub;\n        }\n        if (sub == sub_last) return true;\n        sub = s.begin();\n        ++first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i <= l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++l_iter;\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            ++l_iter;\n            s_iter = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (std::equal(s.begin(), s.end(), l.begin() + i))\n            return true;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) {\n                return true;\n            }\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 == *first2) ++first2;\n        else first2 = s.begin();\n    }",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 == *first2) {\n            ++first2;\n        } else {\n            first2 = s.begin();\n        }\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto first = l.begin();\n    auto last = l.begin() + s.size();\n    while (last <= l.end()) {\n        if (std::equal(s.begin(), s.end(), first)) return true;\n        ++first;\n        ++last;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            s_it++;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n        l_it++;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i <= l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i + j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) j++;\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool flag = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag)\n            return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = l.begin();\n    auto last = l.end();\n    auto sub = s.begin();\n    auto sub_last = s.end();\n    while (first != last) {\n        auto it = first;\n        while (it != last && sub != sub_last && *it == *sub) {\n            ++it;\n            ++sub;\n        }\n        if (sub == sub_last) return true;\n        sub = s.begin();\n        ++first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> sub_l(l.begin() + 1, l.end());\n        std::vector<long> sub_s(s.begin() + 1, s.end());\n        return is_sublist(sub_l, sub_s);\n    }\n    std::vector<long> sub_l(l.begin() + 1, l.end());\n    return is_sublist(sub_l, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            s_it = s.begin();\n        }\n        ++l_it;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) {\n                return true;\n            }\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 == *first2) ++first2;\n        else first2 = s.begin();\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++l_it;\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            ++l_it;\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    if(s.size() > l.size())\n        return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if(s.size()==0) return true;\n    if(l.size()==0) return false;\n    if(l.size()<s.size()) return false;\n    int i=0,j=0;\n    while(i<l.size() && j<s.size()) {\n        if(l[i]==s[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    return j==s.size();",
    "    int n = l.size(), m = s.size();\n    for(int i = 0; i < n; i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < m && l[i + j] == s[j]) {\n                j++;\n            }\n            if(j == m) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) {\n                return true;\n            }\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = l.begin();\n    while (true) {\n        subrange = std::search(subrange, l.end(), first, last);\n        if (subrange == l.end()) return false;\n        else return true;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = std::search(l.begin(), l.end(), first, last);\n    return (subrange != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    } else {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        return is_sublist(l_, s);\n    }",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        bool is_sub = true;\n        for (int j = 0; j < s.size(); j++) {\n            if (l[i + j] != s[j]) {\n                is_sub = false;\n                break;\n            }\n        }\n        if (is_sub) {\n            return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) return true;\n        }\n    }\n    return false;",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            while(j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        std::vector<long> s_new(s.begin() + 1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    else {\n        std::vector<long> l_new(l.begin() + 1, l.end());\n        return is_sublist(l_new, s);\n    }",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            bool flag = true;\n            for(int j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*s_first == *l_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if(s.size() > l.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 1;\n            for(; j < s.size(); j++) {\n                if(l[i+j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++l_first;\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            l_first = ++l_first;\n            s_first = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size())\n        return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (std::equal(s.begin(), s.end(), l.begin() + i))\n            return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            auto s_next = s_first;\n            auto l_next = l_first;\n            while (s_next != s.end() && l_next != l.end() && *s_next == *l_next) {\n                ++s_next;\n                ++l_next;\n            }\n            if (s_next == s.end()) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto first = l.begin();\n    auto last = l.begin() + s.size();\n    while (last <= l.end()) {\n        if (std::equal(s.begin(), s.end(), first)) {\n            return true;\n        }\n        first++;\n        last++;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    } else {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        return is_sublist(l1, s);\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist_found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist_found = false;\n                    break;\n                }\n            }\n            if (is_sublist_found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = std::search(l.begin(), l.end(), first, last);\n    return (subrange != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 1;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) return true;\n    else return false;",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 != *first2) continue;\n        ++first2;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            auto s_it = s_first;\n            auto l_it = l_first;\n            while (s_it != s.end() && l_it != l.end() && *s_it == *l_it) {\n                ++s_it;\n                ++l_it;\n            }\n            if (s_it == s.end()) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    break;\n                }\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++l_first;\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            ++l_first;\n            s_first = s.begin();\n        }\n    }\n    return false;",
    "    auto sub_list_iter = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return sub_list_iter != l.end();",
    "    if(s.size() == 0) {\n        return true;\n    }\n    if(l.size() == 0) {\n        return false;\n    }\n    if(l.size() < s.size()) {\n        return false;\n    }\n    if(l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto first = l.begin();\n    auto last = l.end();\n    while (first != last) {\n        auto it = std::search(first, last, s.begin(), s.end());\n        if (it != last) return true;\n        ++first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i <= l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = s.begin();\n    auto last = s.end();\n    auto subrange = std::search(l.begin(), l.end(), first, last);\n    return (subrange != l.end());",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 == *first2) ++first2;\n        else first2 = s.begin();\n    }",
    "    if(s.size() == 0)\n        return true;\n    if(l.size() == 0)\n        return false;\n    if(l.size() < s.size())\n        return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 1;\n            for(; j < s.size(); j++) {\n                if(l[i+j] != s[j])\n                    break;\n            }\n            if(j == s.size())\n                return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_it = l.begin();\n    auto s_it = s.begin();\n    while (l_it != l.end()) {\n        if (*l_it == *s_it) {\n            ++l_it;\n            ++s_it;\n            if (s_it == s.end()) return true;\n        } else {\n            ++l_it;\n            s_it = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == s.size();",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (l.size() < s.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sublist = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sublist = false;\n                    break;\n                }\n            }\n            if (is_sublist) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    auto s_first = s.begin();\n    auto s_last = s.end();\n    auto l_first = l.begin();\n    auto l_last = l.end();\n    while (l_first != l_last) {\n        auto it = std::search(l_first, l_last, s_first, s_last);\n        if (it != l_last) return true;\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if(s.size() == 0) return true;\n    if(l.size() == 0) return false;\n    if(l.size() < s.size()) return false;\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(j = 0; j < s.size(); j++) {\n                if(l[i + j] != s[j]) break;\n            }\n            if(j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            s_iter++;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        l_iter++;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = l.begin();\n    auto last = l.end();\n    auto sub_first = s.begin();\n    auto sub_last = s.end();\n    while (first != last) {\n        if (*first == *sub_first) {\n            auto m1 = first;\n            auto m2 = sub_first;\n            while (m1 != last && m2 != sub_last && *m1 == *m2) {\n                ++m1;\n                ++m2;\n            }\n            if (m2 == sub_last) return true;\n        }\n        ++first;\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), s_last = s.end();\n    auto l_first = l.begin(), l_last = l.end();\n    while (l_first != l_last) {\n        if (*l_first == *s_first) {\n            auto m1 = l_first, m2 = s_first;\n            while (m1 != l_last && m2 != s_last && *m1 == *m2) {\n                ++m1; ++m2;\n            }\n            if (m2 == s_last) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (j = 0; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++l_first;\n            ++s_first;\n            if (s_first == s.end()) return true;\n        }\n        else {\n            l_first = ++l_first;\n            s_first = s.begin();\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    }\n    std::vector<long> l1(l.begin() + 1, l.end());\n    return is_sublist(l1, s);",
    "    if (s.size() == 0) return true;\n    auto s_first = s.begin();\n    auto s_last = s.end();\n    auto l_first = l.begin();\n    auto l_last = l.end();\n    while (l_first != l_last) {\n        auto it = std::search(l_first, l_last, s_first, s_last);\n        if (it != l_last) return true;\n        ++l_first;\n    }\n    return false;",
    "    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size(); i++) {\n        if (l[i] == s[0]) {\n            bool found = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            auto s_iter = s_first;\n            auto l_iter = l_first;\n            while (s_iter != s.end() && l_iter != l.end()) {\n                if (*s_iter != *l_iter) break;\n                ++s_iter;\n                ++l_iter;\n            }\n            if (s_iter == s.end()) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.empty()) return true;\n    if (l.empty()) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    auto first = s.begin();\n    auto last = s.end();\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (*i == *first) {\n            if (std::search(i, l.end(), first, last) != l.end()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool is_sub = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    is_sub = false;\n                    break;\n                }\n            }\n            if (is_sub) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 0; j < s.size(); j++) {\n                if (l[i + j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        ++l_iter;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto first = l.begin();\n    auto last = l.end();\n    auto sub = s.begin();\n    auto sub_last = s.end();\n    while (first != last) {\n        if (*first == *sub) {\n            auto i = first;\n            auto j = sub;\n            while (i != last && j != sub_last && *i == *j) {\n                ++i;\n                ++j;\n            }\n            if (j == sub_last) return true;\n        }\n        ++first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        std::vector<long> s1(s.begin() + 1, s.end());\n        return is_sublist(l1, s1);\n    } else {\n        std::vector<long> l1(l.begin() + 1, l.end());\n        return is_sublist(l1, s);\n    }",
    "    int i = 0;\n    int j = 0;\n    while (i < l.size() && j < s.size()) {\n        if (l[i] == s[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == s.size()) {\n        return true;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i+j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;"
  ]
}