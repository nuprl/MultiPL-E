{
  "name": "mbpp_69_is_sublist",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a vector contains the given subvector or not.\nbool is_sublist(std::vector<long> l, std::vector<long> s) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_sublist;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)4, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)5, (long)7})), (std::vector<long>({(long)1, (long)6}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            for (; j < s.size(); j++) {\n                if (l[i+j] != s[j]) break;\n            }\n            if (j == s.size()) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_new(l.begin()+1, l.end());\n        std::vector<long> s_new(s.begin()+1, s.end());\n        return is_sublist(l_new, s_new);\n    }\n    std::vector<long> l_new(l.begin()+1, l.end());\n    return is_sublist(l_new, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l[0] == s[0]) {\n        std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n        std::vector<long> s_ = std::vector<long>(s.begin() + 1, s.end());\n        return is_sublist(l_, s_);\n    }\n    std::vector<long> l_ = std::vector<long>(l.begin() + 1, l.end());\n    return is_sublist(l_, s);",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    return (it != l.end());",
    "    auto first1 = l.begin(), last1 = l.end();\n    auto first2 = s.begin(), last2 = s.end();\n    for (; ; ++first1) {\n        if (first2 == last2) return true;\n        if (first1 == last1) return false;\n        if (*first1 != *first2) continue;\n        ++first2;\n    }",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n\n    std::vector<long>::iterator it = std::search(l.begin(), l.end(), s.begin(), s.end());\n    if (it != l.end()) return true;\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto s_last = s.end();\n    auto l_first = l.begin();\n    auto l_last = l.end();\n    while (l_first != l_last) {\n        if (*l_first == *s_first) {\n            auto s_next = s_first;\n            auto l_next = l_first;\n            while (s_next != s_last && l_next != l_last) {\n                if (*s_next != *l_next) break;\n                ++s_next;\n                ++l_next;\n            }\n            if (s_next == s_last) return true;\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if(s.size() > l.size()) {\n        return false;\n    }\n    for(int i = 0; i < l.size(); i++) {\n        if(l[i] == s[0]) {\n            int j = 0;\n            for(j = 0; j < s.size(); j++) {\n                if(l[i+j] != s[j]) {\n                    break;\n                }\n            }\n            if(j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto l_iter = l.begin();\n    auto s_iter = s.begin();\n    while (l_iter != l.end()) {\n        if (*l_iter == *s_iter) {\n            ++s_iter;\n            if (s_iter == s.end()) return true;\n        } else {\n            s_iter = s.begin();\n        }\n        ++l_iter;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            bool flag = true;\n            for (int j = 1; j < s.size(); j++) {\n                if (l[i+j] != s[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) return true;\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    auto s_first = s.begin(), l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size()) {\n        return false;\n    }\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] == s[0]) {\n            int j = 0;\n            while (j < s.size() && l[i + j] == s[j]) {\n                j++;\n            }\n            if (j == s.size()) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (s.size() == 0) return true;\n    if (l.size() == 0) return false;\n    if (l.size() < s.size()) return false;\n    auto s_first = s.begin();\n    auto l_first = l.begin();\n    while (l_first != l.end()) {\n        if (*l_first == *s_first) {\n            ++s_first;\n            if (s_first == s.end()) return true;\n        } else {\n            s_first = s.begin();\n        }\n        ++l_first;\n    }\n    return false;",
    "    if (s.size() > l.size()) return false;\n    for (int i = 0; i < l.size() - s.size() + 1; i++) {\n        if (std::equal(s.begin(), s.end(), l.begin() + i)) {\n            return true;\n        }\n    }\n    return false;",
    "  if (s.size() == 0) return true;\n  if (l.size() == 0) return false;\n  if (l.size() < s.size()) return false;\n  for (int i = 0; i < l.size() - s.size() + 1; i++) {\n    if (l[i] == s[0]) {\n      bool is_sub = true;\n      for (int j = 0; j < s.size(); j++) {\n        if (l[i+j] != s[j]) {\n          is_sub = false;\n          break;\n        }\n      }\n      if (is_sub) return true;\n    }\n  }\n  return false;"
  ]
}