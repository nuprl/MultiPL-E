{
  "name": "mbpp_168_frequency",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < a.size(); i++)\n    {\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor(long i = 0; i < a.size(); i++) {\n\t\tif(a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i=0;i<a.size();i++)\n    {\n        if(a[i]==x)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n  long count = 0;\n  for (long i = 0; i < a.size(); i++) {\n    if (a[i] == x) {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i=0;i<a.size();i++){\n        if(a[i]==x)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor (long i = 0; i < a.size(); i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i=0;i<a.size();i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == x)\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i=0;i<a.size();i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++){\n        if(a[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor (long i = 0; i < a.size(); i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++){\n        if(a[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor (long i = 0; i < a.size(); i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i=0; i<a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (auto i : a) {\n        if (i == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i=0;i<a.size();i++){\n        if(a[i]==x){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n\tlong count = 0;\n\tfor (long i = 0; i < a.size(); i++) {\n\t\tif (a[i] == x) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i=0;i<a.size();i++)\n    {\n        if(a[i]==x)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (auto i : a) {\n        if (i == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (auto i : a) {\n        if (i == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i=0;i<a.size();i++)\n    {\n        if(a[i] == x)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i=0; i<a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(long i = 0; i < a.size(); i++){\n        if(a[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the number of occurrences of a number in a given vector.\nlong frequency(std::vector<long> a, long x) {\n    long count = 0;\n    for (long i = 0; i < a.size(); i++) {\n        if (a[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = frequency;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (4)) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4})), (3)) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)1, (long)2})), (1)) == (2));\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}