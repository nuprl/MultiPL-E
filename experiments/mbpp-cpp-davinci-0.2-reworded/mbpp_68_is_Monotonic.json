{
  "name": "mbpp_68_is_Monotonic",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector is monotonic or not.\nbool is_Monotonic(std::vector<long> A) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_Monotonic;\n    assert(candidate((std::vector<long>({(long)6, (long)5, (long)4, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;",
    "    int n = A.size();\n    if(n==1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i<n-1 && A[i]<=A[i+1])\n        i++;\n    while(j>0 && A[j]>=A[j-1])\n        j--;\n    if(i==n-1 || j==0)\n        return true;\n    return false;",
    "    if(A.size() <= 2) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] > A[i+1]) {\n            increasing = false;\n        }\n        if(A[i] < A[i+1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;",
    "    int n = A.size();\n    if(n == 1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] > A[i + 1])\n            is_increasing = false;\n        if(A[i] < A[i + 1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;",
    "    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] > A[i + 1])\n            increasing = false;\n        if (A[i] < A[i + 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;",
    "    int n = A.size();\n    if(n == 1)\n        return true;\n    int i = 0;\n    int j = n-1;\n    while(i < j) {\n        if(A[i] <= A[i+1])\n            i++;\n        else\n            break;\n    }\n    while(j > i) {\n        if(A[j] >= A[j-1])\n            j--;\n        else\n            break;\n    }\n    if(i == j)\n        return true;\n    else\n        return false;",
    "    int n = A.size();\n    if(n==1)\n        return true;\n    bool is_increasing = true;\n    bool is_decreasing = true;\n    for(int i=1;i<n;i++) {\n        if(A[i]<A[i-1])\n            is_increasing = false;\n        if(A[i]>A[i-1])\n            is_decreasing = false;\n    }\n    return is_increasing || is_decreasing;",
    "    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;",
    "    int n = A.size();\n    if(n == 1)\n        return true;\n    bool isIncreasing = true;\n    bool isDecreasing = true;\n    for(int i = 1; i < n; i++) {\n        if(A[i] < A[i-1])\n            isIncreasing = false;\n        if(A[i] > A[i-1])\n            isDecreasing = false;\n    }\n    return isIncreasing || isDecreasing;",
    "    int flag = 0;\n    for(int i = 0; i < A.size()-1; i++) {\n        if(A[i] > A[i+1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if(flag == 1) {\n        for(int i = 0; i < A.size()-1; i++) {\n            if(A[i] < A[i+1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    else {\n        return true;\n    }",
    "    int n = A.size();\n    int i = 0;\n    int j = n - 1;\n    while(i < n - 1 && A[i] <= A[i + 1]) {\n        i++;\n    }\n    while(j > 0 && A[j] >= A[j - 1]) {\n        j--;\n    }\n    if(i == n - 1 || j == 0) {\n        return true;\n    }\n    return false;",
    "    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;",
    "    bool is_non_increasing = true;\n    bool is_non_decreasing = true;\n    for (int i = 0; i < A.size() - 1; i++) {\n        if (A[i] < A[i + 1])\n            is_non_decreasing = false;\n        if (A[i] > A[i + 1])\n            is_non_increasing = false;\n    }\n    return is_non_decreasing || is_non_increasing;",
    "    int n = A.size();\n    if (n == 1) {\n        return true;\n    }\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (A[i] > A[i + 1]) {\n            increasing = false;\n        }\n        if (A[i] < A[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;",
    "    int n = A.size();\n    int flag = 0;\n    for(int i=0;i<n-1;i++){\n        if(A[i]<=A[i+1]){\n            flag = 1;\n        }\n        else{\n            flag = 0;\n            break;\n        }\n    }\n    if(flag == 1){\n        return true;\n    }\n    else{\n        flag = 0;\n        for(int i=0;i<n-1;i++){\n            if(A[i]>=A[i+1]){\n                flag = 1;\n            }\n            else{\n                flag = 0;\n                break;\n            }\n        }\n        if(flag == 1){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }",
    "    if(A.size() <= 2) {\n        return true;\n    }\n    int store = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i+1]) {\n            if(store == 0) {\n                store = 1;\n            }\n            else if(store == -1) {\n                return false;\n            }\n        }\n        else if(A[i] > A[i+1]) {\n            if(store == 0) {\n                store = -1;\n            }\n            else if(store == 1) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i+1])\n            increasing = false;\n        if (A[i] < A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;",
    "    int flag = 0;\n    for(int i = 0; i < A.size() - 1; i++) {\n        if(A[i] < A[i+1]) {\n            flag = 1;\n        }\n        else if(A[i] > A[i+1]) {\n            flag = 2;\n        }\n        if(flag == 1 && A[i] > A[i+1]) {\n            return false;\n        }\n        if(flag == 2 && A[i] < A[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = A.size();\n    if(n == 1)\n        return true;\n    int flag = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(A[i] < A[i + 1]) {\n            flag = 1;\n            break;\n        }\n        else if(A[i] > A[i + 1]) {\n            flag = 2;\n            break;\n        }\n    }\n    if(flag == 0)\n        return true;\n    else if(flag == 1) {\n        for(int i = 0; i < n - 1; i++) {\n            if(A[i] > A[i + 1])\n                return false;\n        }\n        return true;\n    }\n    else {\n        for(int i = 0; i < n - 1; i++) {\n            if(A[i] < A[i + 1])\n                return false;\n        }\n        return true;\n    }",
    "    if(A.size()<=2)\n        return true;\n    bool increasing = true;\n    bool decreasing = true;\n    for(int i=0;i<A.size()-1;i++) {\n        if(A[i]>A[i+1])\n            increasing = false;\n        if(A[i]<A[i+1])\n            decreasing = false;\n    }\n    return increasing || decreasing;"
  ]
}