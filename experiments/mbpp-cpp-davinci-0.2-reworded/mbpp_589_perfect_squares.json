{
  "name": "mbpp_589_perfect_squares",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find perfect squares between two given numbers.\nstd::vector<long> perfect_squares(long a, long b) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = perfect_squares;\n    assert(candidate((1), (30)) == (std::vector<long>({(long)1, (long)4, (long)9, (long)16, (long)25})));\n    assert(candidate((50), (100)) == (std::vector<long>({(long)64, (long)81, (long)100})));\n    assert(candidate((100), (200)) == (std::vector<long>({(long)100, (long)121, (long)144, (long)169, (long)196})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> squares;\n    long i = 1;\n    while (i*i <= b) {\n        if (i*i >= a) {\n            squares.push_back(i*i);\n        }\n        i++;\n    }\n    return squares;",
    "  std::vector<long> squares;\n  long i = 1;\n  while (i * i <= b) {\n    if (i * i >= a) {\n      squares.push_back(i * i);\n    }\n    i++;\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "    std::vector<long> result;\n    for(long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if(sqrt_i * sqrt_i == i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "  std::vector<long> squares;\n  long i = a;\n  while (i <= b) {\n    long j = 1;\n    while (j * j <= i) {\n      if (j * j == i) {\n        squares.push_back(i);\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "\tstd::vector<long> result;\n\tfor (long i = a; i <= b; i++) {\n\t\tlong sq = sqrt(i);\n\t\tif (sq * sq == i) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "  std::vector<long> squares;\n  for (long i = a; i <= b; i++) {\n    long sq = sqrt(i);\n    if (sq * sq == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sqrt_i = std::sqrt(i);\n        if (sqrt_i * sqrt_i == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;",
    "  std::vector<long> squares;\n  long i = 1;\n  while (i*i <= b) {\n    if (i*i >= a) {\n      squares.push_back(i*i);\n    }\n    i++;\n  }\n  return squares;",
    "  std::vector<long> squares;\n  for (long i = a; i <= b; ++i) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      squares.push_back(i);\n    }\n  }\n  return squares;",
    "    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  for (long i = a; i <= b; i++) {\n    long sqrt_i = std::sqrt(i);\n    if (sqrt_i * sqrt_i == i) {\n      result.push_back(i);\n    }\n  }\n  return result;",
    "    std::vector<long> squares;\n    for (long i = a; i <= b; i++) {\n        long sq = sqrt(i);\n        if (sq * sq == i) {\n            squares.push_back(i);\n        }\n    }\n    return squares;"
  ]
}