{
  "name": "mbpp_475_sort_counter",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to sort a map by value.\nstd::vector<Union_std_string_long> sort_counter(std::map<std::string,long> dict1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = sort_counter;\n    assert(candidate((std::map<std::string,long>({{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 87), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 83), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 81)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Math\", 400), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 300), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 250)})));\n    assert(candidate((std::map<std::string,long>({{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 1250), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 1000), (std::tuple<std::string, long>)std::make_tuple(\"Math\", 900)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> v;\n    std::map<std::string,long>::iterator it;\n    for (it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    std::vector<std::string> v1;\n    std::vector<long> v2;\n    std::map<std::string,long>::iterator itr;\n    for (itr = dict1.begin(); itr != dict1.end(); ++itr) {\n        v1.push_back(itr->first);\n        v2.push_back(itr->second);\n    }\n    std::sort(v2.begin(), v2.end());\n    for (int i = 0; i < v2.size(); i++) {\n        for (int j = 0; j < v2.size(); j++) {\n            if (v2[i] == dict1[v1[j]]) {\n                v.push_back(Union_std_string_long(v1[j]));\n                v.push_back(Union_std_string_long(v2[i]));\n            }\n        }\n    }\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for(auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if(a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<std::pair<std::string, long>> vec;\n    std::copy(dict1.begin(), dict1.end(), std::back_inserter<std::vector<std::pair<std::string, long>>>(vec));\n    std::sort(vec.begin(), vec.end(), [](const std::pair<std::string, long> &a, const std::pair<std::string, long> &b) {\n        return a.second > b.second;\n    });\n    std::vector<Union_std_string_long> vec2;\n    for (auto &pair : vec) {\n        vec2.push_back(Union_std_string_long(pair.first));\n        vec2.push_back(Union_std_string_long(pair.second));\n    }\n    return vec2;",
    "    std::vector<std::pair<std::string,long>> dict(dict1.begin(), dict1.end());\n    std::sort(dict.begin(), dict.end(), [](auto &left, auto &right) {\n        return left.second < right.second;\n    });\n    std::vector<Union_std_string_long> dict_sorted;\n    for (auto &pair: dict) {\n        dict_sorted.push_back(pair.first);\n        dict_sorted.push_back(pair.second);\n    }\n    return dict_sorted;",
    "    std::vector<Union_std_string_long> v;\n    std::map<std::string,long>::iterator it;\n    for (it = dict1.begin(); it != dict1.end(); it++) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(),\n              [](Union_std_string_long a, Union_std_string_long b) {\n                  return a.f1 > b.f1;\n              });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<std::pair<std::string,long>> items;\n    for(auto const& pair: dict1) {\n        items.push_back(pair);\n    }\n    std::sort(items.begin(), items.end(), [](const std::pair<std::string,long> &left, const std::pair<std::string,long> &right) {\n        return left.second < right.second;\n    });\n    std::vector<Union_std_string_long> result;\n    for (auto const& pair: items) {\n        result.push_back(Union_std_string_long(pair.first));\n        result.push_back(Union_std_string_long(pair.second));\n    }\n    return result;",
    "    std::vector<Union_std_string_long> v;\n    std::map<std::string,long>::iterator itr;\n    for (itr = dict1.begin(); itr != dict1.end(); ++itr) {\n        v.push_back(itr->second);\n    }\n    std::sort(v.begin(), v.end());\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto const& pair: dict1) {\n        v.push_back(Union_std_string_long(pair.first));\n        v.push_back(Union_std_string_long(pair.second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> v;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        v.push_back(Union_std_string_long(it->first));\n        v.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(v.begin(), v.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return v;",
    "    std::vector<Union_std_string_long> sorted_dict1;\n    for (auto it = dict1.begin(); it != dict1.end(); ++it) {\n        sorted_dict1.push_back(Union_std_string_long(it->first));\n        sorted_dict1.push_back(Union_std_string_long(it->second));\n    }\n    std::sort(sorted_dict1.begin(), sorted_dict1.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        if (a.f1 == b.f1) {\n            return a.f0 < b.f0;\n        }\n        return a.f1 > b.f1;\n    });\n    return sorted_dict1;"
  ]
}