{
  "name": "mbpp_261_division_elements",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nlong division_elements(long test_tup1, long test_tup2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = division_elements;\n    assert(candidate(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(2, 2, 2, 3));\n    assert(candidate(std::make_tuple(12, 6, 8, 16), std::make_tuple(6, 3, 4, 4)) == std::make_tuple(2, 2, 2, 4));\n    assert(candidate(std::make_tuple(20, 14, 36, 18), std::make_tuple(5, 7, 6, 9)) == std::make_tuple(4, 2, 6, 2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "  return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1/test_tup2;",
    "    return test_tup1/test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "  return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;",
    "    return test_tup1 / test_tup2;"
  ]
}