{
  "name": "mbpp_444_trim_tuple",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to trim each tuple by k in the given tuple vector.\nstd::string trim_tuple(std::vector<long> test_list, long K) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = trim_tuple;\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long, long>)std::make_tuple(5, 3, 2, 1, 4), (std::tuple<long, long, long, long, long>)std::make_tuple(3, 4, 9, 2, 1), (std::tuple<long, long, long, long, long>)std::make_tuple(9, 1, 2, 3, 5), (std::tuple<long, long, long, long, long>)std::make_tuple(4, 8, 2, 1, 7)})), (2)) == (\"[(2,), (9,), (2,), (2,)]\"));\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long, long>)std::make_tuple(5, 3, 2, 1, 4), (std::tuple<long, long, long, long, long>)std::make_tuple(3, 4, 9, 2, 1), (std::tuple<long, long, long, long, long>)std::make_tuple(9, 1, 2, 3, 5), (std::tuple<long, long, long, long, long>)std::make_tuple(4, 8, 2, 1, 7)})), (1)) == (\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"));\n    assert(candidate((std::vector<long>({(std::tuple<long, long, long, long>)std::make_tuple(7, 8, 4, 9), (std::tuple<long, long, long, long>)std::make_tuple(11, 8, 12, 4), (std::tuple<long, long, long, long>)std::make_tuple(4, 1, 7, 8), (std::tuple<long, long, long, long>)std::make_tuple(3, 6, 9, 7)})), (1)) == (\"[(8, 4), (8, 12), (1, 7), (6, 9)]\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it < K) {\n            result += std::to_string(*it) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i < K) {\n            result.append(std::to_string(*i));\n            result.append(\",\");\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] < K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<long>::iterator it;\n    for(it=test_list.begin();it!=test_list.end();it++) {\n        if(*it>K) {\n            result.append(std::to_string(*it));\n            result.append(\",\");\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        if (*it > K) {\n            result.append(std::to_string(*it - K));\n            result.append(\",\");\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i : test_list) {\n        if (i > K) {\n            result += std::to_string(i - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] < K) {\n            result += std::to_string(test_list[i]);\n            result += \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        if (*i > K) {\n            result += std::to_string(*i) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (auto i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            result += std::to_string(test_list[i]) + \" \";\n        }\n    }\n    return result;",
    "    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > K) {\n            test_list[i] = K;\n        }\n    }\n    std::stringstream ss;\n    for (int i = 0; i < test_list.size(); i++) {\n        ss << test_list[i] << \" \";\n    }\n    std::string result = ss.str();\n    return result;",
    "    // Write your code here\n    std::string result = \"\";\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_list[i] > K) {\n            result += std::to_string(test_list[i] - K) + \" \";\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<test_list.size();i++){\n        if(test_list[i]>K){\n            result.append(std::to_string(test_list[i]-K));\n            result.append(\",\");\n        }\n    }\n    return result;"
  ]
}