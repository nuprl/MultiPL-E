{
  "name": "mbpp_468_max_product",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that vector.\nlong max_product(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_product;\n    assert(candidate((std::vector<long>({(long)3, (long)100, (long)4, (long)5, (long)150, (long)6}))) == (3000));\n    assert(candidate((std::vector<long>({(long)4, (long)42, (long)55, (long)68, (long)80}))) == (50265600));\n    assert(candidate((std::vector<long>({(long)10, (long)22, (long)9, (long)33, (long)21, (long)50, (long)41, (long)60}))) == (2460));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if (curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if (curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    // Write your code here\n    long max = 0;\n    long product = 1;\n    for(int i = 0; i < arr.size(); i++){\n        product = 1;\n        for(int j = i; j < arr.size(); j++){\n            if(arr[j] > arr[j-1]){\n                product *= arr[j];\n                if(product > max){\n                    max = product;\n                }\n            }\n        }\n    }\n    return max;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0;i<arr.size();i++){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    max_so_far = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        max_so_far = max_so_far*arr[i];\n        if(max_so_far == 0){\n            max_so_far = 1;\n        }\n        max_product = std::max(max_product,max_so_far);\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        max_product = std::max(max_product, curr_product);\n        if(curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long curr_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_product *= arr[i];\n        if (curr_product > max_product) {\n            max_product = curr_product;\n        }\n        if (curr_product == 0) {\n            curr_product = 1;\n        }\n    }\n    return max_product;",
    "    std::vector<long> max_prod(arr.size(), 0);\n    max_prod[0] = arr[0];\n    for(int i = 1; i < arr.size(); i++) {\n        long max_val = arr[i];\n        for(int j = 0; j < i; j++) {\n            if(arr[i] > arr[j]) {\n                max_val = std::max(max_val, max_prod[j] * arr[i]);\n            }\n        }\n        max_prod[i] = max_val;\n    }\n    return *std::max_element(max_prod.begin(), max_prod.end());",
    "    long max_product = 1;\n    long curr_product = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_product *= arr[i];\n        } else {\n            max_product = std::max(max_product, curr_product);\n            curr_product = 1;\n        }\n    }\n    return std::max(max_product, curr_product);",
    "    // Write your code here\n    long max_product = 1;\n    long max_product_so_far = 1;\n    for(int i = 0; i < arr.size(); i++){\n        max_product_so_far = max_product_so_far * arr[i];\n        if(max_product_so_far > max_product){\n            max_product = max_product_so_far;\n        }\n        if(max_product_so_far == 0){\n            max_product_so_far = 1;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        curr_prod *= arr[i];\n        if (curr_prod > max_prod) {\n            max_prod = curr_prod;\n        }\n        if (curr_prod == 0) {\n            curr_prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        long product = 1;\n        for (int j = i; j < arr.size(); j++) {\n            product *= arr[j];\n            if (product > max_product) {\n                max_product = product;\n            }\n        }\n    }\n    return max_product;",
    "    int n = arr.size();\n    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        }\n        else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        }\n        else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            curr_prod *= arr[i];\n            max_prod = std::max(max_prod, curr_prod);\n        } else if(arr[i] == 0) {\n            curr_prod = 1;\n        } else {\n            curr_prod = std::max(curr_prod * arr[i], 1l);\n            max_prod = std::max(max_prod, curr_prod);\n        }\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long curr_prod = 1;\n    for(int i=0;i<arr.size();i++){\n        curr_prod *= arr[i];\n        max_prod = std::max(max_prod,curr_prod);\n        if(curr_prod == 0)\n            curr_prod = 1;\n    }\n    curr_prod = 1;\n    for(int i=arr.size()-1;i>=0;i--){\n        curr_prod *= arr[i];\n        max_prod = std::max(max_prod,curr_prod);\n        if(curr_prod == 0)\n            curr_prod = 1;\n    }\n    return max_prod;",
    "    long max_prod = 1;\n    long prod = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        prod *= arr[i];\n        if (prod > max_prod) {\n            max_prod = prod;\n        }\n        if (prod == 0) {\n            prod = 1;\n        }\n    }\n    return max_prod;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if (arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if (max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    long min_so_far = 1;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > 0) {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = std::min(min_so_far * arr[i], 1L);\n        } else if(arr[i] == 0) {\n            max_so_far = 1;\n            min_so_far = 1;\n        } else {\n            long temp = max_so_far;\n            max_so_far = std::max(min_so_far * arr[i], 1L);\n            min_so_far = temp * arr[i];\n        }\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n    }\n    return max_product;",
    "    long max_product = 1;\n    long max_so_far = 1;\n    for(int i=0; i<arr.size(); i++) {\n        max_so_far = max_so_far * arr[i];\n        if(max_so_far > max_product) {\n            max_product = max_so_far;\n        }\n        if(max_so_far == 0) {\n            max_so_far = 1;\n        }\n    }\n    return max_product;"
  ]
}