{
  "name": "mbpp_771_check_expression",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nbool check_expression(std::string exp) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_expression;\n    assert(candidate((\"{()}[{}]\")) == (true));\n    assert(candidate((\"{()}[{]\")) == (false));\n    assert(candidate((\"{()}[{}][]({})\")) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> st;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (st.empty()) {\n                return false;\n            }\n            else if (exp[i] == ')' && st.top() == '(') {\n                st.pop();\n            }\n            else if (exp[i] == '}' && st.top() == '{') {\n                st.pop();\n            }\n            else if (exp[i] == ']' && st.top() == '[') {\n                st.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (st.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if((top == '(' && exp[i] == ')') || (top == '{' && exp[i] == '}') || (top == '[' && exp[i] == ']')) {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if(c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if(c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            else {\n                char ch = st.top();\n                st.pop();\n                if(ch == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if(ch == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if(ch == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if (c == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (c == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (c == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    return false;",
    "\tstd::stack<char> s;\n\tfor(int i=0; i<exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!s.empty() && ((exp[i] == ')' && s.top() == '(') || (exp[i] == '}' && s.top() == '{') || (exp[i] == ']' && s.top() == '['))) {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty() ? true : false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for (auto i : exp) {\n        if (i == '(' || i == '{' || i == '[') {\n            st.push(i);\n        } else if (i == ')' || i == '}' || i == ']') {\n            if (st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if (i == ')' && ch != '(') {\n                return false;\n            }\n            if (i == '}' && ch != '{') {\n                return false;\n            }\n            if (i == ']' && ch != '[') {\n                return false;\n            }\n        }\n    }\n    if (st.empty()) {\n        return true;\n    }\n    return false;",
    "  std::stack<char> s;\n  for (int i = 0; i < exp.size(); i++) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      s.push(exp[i]);\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (s.empty()) {\n        return false;\n      }\n      char c = s.top();\n      s.pop();\n      if (c == '(' && exp[i] != ')') {\n        return false;\n      }\n      if (c == '{' && exp[i] != '}') {\n        return false;\n      }\n      if (c == '[' && exp[i] != ']') {\n        return false;\n      }\n    }\n  }\n  if (s.empty()) {\n    return true;\n  }\n  return false;",
    "    std::stack<char> st;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char c = st.top();\n            st.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(exp[i] == ')' && top == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && top == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && top == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> st;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char top = st.top();\n            st.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            else if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            else if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if(!st.empty()) {\n        return false;\n    }\n    return true;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(!s.empty() && (exp[i]==')' && s.top()=='(' || exp[i]=='}' && s.top()=='{' || exp[i]==']' && s.top()=='[')) {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.length(); i++) {\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ')' && s.top() == '(') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && s.top() == '{') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && s.top() == '[') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\treturn false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            } else if (exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if (exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if (exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> st;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[')\n            st.push(exp[i]);\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty())\n                return false;\n            char ch = st.top();\n            st.pop();\n            if(exp[i] == ')' && ch != '(')\n                return false;\n            if(exp[i] == '}' && ch != '{')\n                return false;\n            if(exp[i] == ']' && ch != '[')\n                return false;\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')') {\n                if(s.top() != '(') {\n                    return false;\n                }\n            } else if(exp[i] == '}') {\n                if(s.top() != '{') {\n                    return false;\n                }\n            } else if(exp[i] == ']') {\n                if(s.top() != '[') {\n                    return false;\n                }\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            } else if(exp[i] == '}' && top != '{') {\n                return false;\n            } else if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> st;\n    for(int i=0; i<exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if(!((ch == '(' && exp[i] == ')') || (ch == '{' && exp[i] == '}') || (ch == '[' && exp[i] == ']'))) {\n                return false;\n            }\n        }\n    }\n    if(!st.empty()) {\n        return false;\n    }\n    return true;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                s.pop();\n                if(exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(c == '(' && exp[i] != ')') {\n                return false;\n            }\n            if(c == '{' && exp[i] != '}') {\n                return false;\n            }\n            if(c == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            if(exp[i] == ')' && top == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && top == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && top == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> stk;\n    for(auto ch : exp) {\n        if(ch == '(' || ch == '{' || ch == '[') {\n            stk.push(ch);\n        } else if(ch == ')' || ch == '}' || ch == ']') {\n            if(stk.empty()) {\n                return false;\n            }\n            char top = stk.top();\n            stk.pop();\n            if(ch == ')' && top != '(') {\n                return false;\n            }\n            if(ch == '}' && top != '{') {\n                return false;\n            }\n            if(ch == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return stk.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            } else if(exp[i] == '}' && top != '{') {\n                return false;\n            } else if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(s.top() == '(' && exp[i] == ')') {\n                s.pop();\n            }\n            else if(s.top() == '{' && exp[i] == '}') {\n                s.pop();\n            }\n            else if(s.top() == '[' && exp[i] == ']') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        } else {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')' && s.top()!='(') {\n                return false;\n            }\n            if(exp[i]=='}' && s.top()!='{') {\n                return false;\n            }\n            if(exp[i]==']' && s.top()!='[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            else if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            else if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            } else if(exp[i] == '}' && c != '{') {\n                return false;\n            } else if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (auto c : exp) {\n        if (c == '(' || c == '{' || c == '[') {\n            s.push(c);\n        }\n        else if (c == ')' || c == '}' || c == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                s.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                else if (c == '}' && top != '{') {\n                    return false;\n                }\n                else if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.size(); i++) {\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = s.top();\n\t\t\ts.pop();\n\t\t\tif (exp[i] == ')' && top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "  std::stack<char> s;\n  for(int i = 0; i < exp.length(); i++) {\n    if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      s.push(exp[i]);\n    }\n    else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if(s.empty()) {\n        return false;\n      }\n      char c = s.top();\n      s.pop();\n      if(c == '(' && exp[i] != ')') {\n        return false;\n      }\n      if(c == '{' && exp[i] != '}') {\n        return false;\n      }\n      if(c == '[' && exp[i] != ']') {\n        return false;\n      }\n    }\n  }\n  return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            if (exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> stk;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stk.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(stk.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && stk.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && stk.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && stk.top() != '[') {\n                return false;\n            }\n            stk.pop();\n        }\n    }\n    if(stk.empty()) {\n        return true;\n    }\n    return false;",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.size(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar top = s.top();\n\t\t\ts.pop();\n\t\t\tif(exp[i] == ')' && top != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && top != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && top != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            if (exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(c == '(' && exp[i] != ')') {\n                return false;\n            }\n            if(c == '{' && exp[i] != '}') {\n                return false;\n            }\n            if(c == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')') {\n            if(s.empty() || s.top() != '(') {\n                return false;\n            }\n            s.pop();\n        }\n        else if(exp[i] == '}') {\n            if(s.empty() || s.top() != '{') {\n                return false;\n            }\n            s.pop();\n        }\n        else if(exp[i] == ']') {\n            if(s.empty() || s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(c == '(' && exp[i] == ')') {\n                    continue;\n                }\n                else if(c == '{' && exp[i] == '}') {\n                    continue;\n                }\n                else if(c == '[' && exp[i] == ']') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); ++i) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            else if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            else if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if(st.empty()) {\n                return false;\n            }\n            char top = st.top();\n            if(exp[i] == ')' && top == '(') {\n                st.pop();\n            } else if(exp[i] == ']' && top == '[') {\n                st.pop();\n            } else if(exp[i] == '}' && top == '{') {\n                st.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()!='(') {\n                return false;\n            }\n            else if(exp[i]=='}' && s.top()!='{') {\n                return false;\n            }\n            else if(exp[i]==']' && s.top()!='[') {\n                return false;\n            }\n            else {\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(c=='(' && exp[i]!=')') {\n                    return false;\n                }\n                else if(c=='{' && exp[i]!='}') {\n                    return false;\n                }\n                else if(c=='[' && exp[i]!=']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); ++i) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                if((c == '(' && exp[i] == ')') || (c == '{' && exp[i] == '}') || (c == '[' && exp[i] == ']')) {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                s.pop();\n                if(exp[i]==')' && top!='(') {\n                    return false;\n                }\n                else if(exp[i]=='}' && top!='{') {\n                    return false;\n                }\n                else if(exp[i]==']' && top!='[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')') {\n                if(s.top()=='(') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n            else if(exp[i]=='}') {\n                if(s.top()=='{') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n            else if(exp[i]==']') {\n                if(s.top()=='[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchar top = s.top();\n\t\t\t\ts.pop();\n\t\t\t\tif(exp[i] == ')' && top != '(') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(exp[i] == '}' && top != '{') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(exp[i] == ']' && top != '[') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i]==')' && c!='(') {\n                    return false;\n                }\n                else if(exp[i]=='}' && c!='{') {\n                    return false;\n                }\n                else if(exp[i]==']' && c!='[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            st.push(exp[i]);\n        } else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(st.empty()) {\n                return false;\n            }\n            char ch = st.top();\n            st.pop();\n            if(exp[i]==')' && ch!='(') {\n                return false;\n            }\n            if(exp[i]=='}' && ch!='{') {\n                return false;\n            }\n            if(exp[i]==']' && ch!='[') {\n                return false;\n            }\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(!((c=='(' && exp[i]==')') || (c=='{' && exp[i]=='}') || (c=='[' && exp[i]==']'))) {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            else if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            else if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            if (exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if (exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if (exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    } else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            if (exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char ch = s.top();\n                s.pop();\n                if(exp[i] == ')' && ch != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && ch != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && ch != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(exp[i]==')' && top=='(') {\n                    s.pop();\n                }\n                else if(exp[i]=='}' && top=='{') {\n                    s.pop();\n                }\n                else if(exp[i]==']' && top=='[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char ch = s.top();\n            s.pop();\n            if(!((ch == '(' && exp[i] == ')') || (ch == '{' && exp[i] == '}') || (ch == '[' && exp[i] == ']'))) {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.length(); i++) {\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == ')' && s.top() == '(') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && s.top() == '{') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && s.top() == '[') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(!s.empty() && (exp[i] == ')' && s.top() == '(' || exp[i] == '}' && s.top() == '{' || exp[i] == ']' && s.top() == '[')) {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> stk;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stk.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(stk.empty()) {\n                return false;\n            }\n            char top = stk.top();\n            stk.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            else if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            else if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if(stk.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && st.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && st.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && st.top() != '[') {\n                return false;\n            }\n            st.pop();\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char top = st.top();\n            st.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.length(); i++) {\n\t\tif (exp[i] == '(') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\treturn false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if(c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if(c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(!s.empty()) {\n        return false;\n    }\n    return true;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor (int i = 0; i < exp.size(); i++) {\n\t\tif (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (exp[i] == ')' && s.top() == '(') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == '}' && s.top() == '{') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if (exp[i] == ']' && s.top() == '[') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::stack<char> s;\n    for(int i=0; i<exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                s.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(exp[i] == ')' && top == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && top == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && top == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i]==')' && s.top()=='(') {\n                    s.pop();\n                }\n                else if(exp[i]=='}' && s.top()=='{') {\n                    s.pop();\n                }\n                else if(exp[i]==']' && s.top()=='[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor(int i=0;i<exp.size();i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t} else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ')' && s.top() != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && s.top() != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && s.top() != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else if (exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if (exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if (exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(top == '(' && exp[i] == ')') {\n                    s.pop();\n                }\n                else if(top == '{' && exp[i] == '}') {\n                    s.pop();\n                }\n                else if(top == '[' && exp[i] == ']') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor(int i=0;i<exp.length();i++) {\n\t\tif(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(s.top()=='(' && exp[i]==')') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if(s.top()=='{' && exp[i]=='}') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse if(s.top()=='[' && exp[i]==']') {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.size(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            } else {\n                char c = s.top();\n                s.pop();\n                if (c == '(' && exp[i] != ')') {\n                    return false;\n                } else if (c == '{' && exp[i] != '}') {\n                    return false;\n                } else if (c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            else if(st.top() == '(' && exp[i] == ')') {\n                st.pop();\n            }\n            else if(st.top() == '{' && exp[i] == '}') {\n                st.pop();\n            }\n            else if(st.top() == '[' && exp[i] == ']') {\n                st.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()!='(') {\n                return false;\n            }\n            else if(exp[i]=='}' && s.top()!='{') {\n                return false;\n            }\n            else if(exp[i]==']' && s.top()!='[') {\n                return false;\n            }\n            else {\n                s.pop();\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            else {\n                char c = st.top();\n                st.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if (exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(c == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if(c == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if(c == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char top = s.top();\n                if(exp[i] == ')' && top == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && top == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && top == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char temp = s.top();\n                s.pop();\n                if(exp[i] == ')' && temp != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && temp != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && temp != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            if(exp[i] == ')' && top == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && top == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && top == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.size(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t} else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar c = s.top();\n\t\t\ts.pop();\n\t\t\tif(c == '(' && exp[i] != ')') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '{' && exp[i] != '}') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(c == '[' && exp[i] != ']') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && st.top() == '(') {\n                st.pop();\n            }\n            else if(exp[i] == '}' && st.top() == '{') {\n                st.pop();\n            }\n            else if(exp[i] == ']' && st.top() == '[') {\n                st.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(!((c == '(' && exp[i] == ')') || (c == '{' && exp[i] == '}') || (c == '[' && exp[i] == ']'))) {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(auto i: exp) {\n        if(i == '(' || i == '{' || i == '[') {\n            s.push(i);\n        } else if(i == ')' || i == '}' || i == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(c == '(' && i != ')') {\n                return false;\n            }\n            if(c == '{' && i != '}') {\n                return false;\n            }\n            if(c == '[' && i != ']') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char ch = s.top();\n                if(exp[i] == ')' && ch == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && ch == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && ch == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if (exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.length(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t}\n\t\telse if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ')' && s.top() != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == '}' && s.top() != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(exp[i] == ']' && s.top() != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && s.top() != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && s.top() != '[') {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for (int i = 0; i < exp.length(); i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (s.empty()) {\n                return false;\n            }\n            else if (exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if (exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if (exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "  std::stack<char> s;\n  for (int i = 0; i < exp.length(); i++) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      s.push(exp[i]);\n    }\n    else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (s.empty()) {\n        return false;\n      }\n      else {\n        char top = s.top();\n        s.pop();\n        if (exp[i] == ')' && top != '(') {\n          return false;\n        }\n        else if (exp[i] == '}' && top != '{') {\n          return false;\n        }\n        else if (exp[i] == ']' && top != '[') {\n          return false;\n        }\n      }\n    }\n  }\n  if (s.empty()) {\n    return true;\n  }\n  else {\n    return false;\n  }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i]==')' && s.top()=='(') {\n                s.pop();\n            }\n            else if(exp[i]=='}' && s.top()=='{') {\n                s.pop();\n            }\n            else if(exp[i]==']' && s.top()=='[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            char c = s.top();\n            s.pop();\n            if(exp[i] == ')' && c != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && c != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && c != '[') {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                if(exp[i] == ')' && s.top() == '(') {\n                    s.pop();\n                }\n                else if(exp[i] == '}' && s.top() == '{') {\n                    s.pop();\n                }\n                else if(exp[i] == ']' && s.top() == '[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i]==')' && c=='(') {\n                    continue;\n                }\n                else if(exp[i]=='}' && c=='{') {\n                    continue;\n                }\n                else if(exp[i]==']' && c=='[') {\n                    continue;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i]==')') {\n                if(s.top()=='(') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n            else if(exp[i]=='}') {\n                if(s.top()=='{') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n            else if(exp[i]==']') {\n                if(s.top()=='[') {\n                    s.pop();\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0; i<exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char c = s.top();\n                s.pop();\n                if(exp[i] == ')' && c != '(') {\n                    return false;\n                }\n                else if(exp[i] == '}' && c != '{') {\n                    return false;\n                }\n                else if(exp[i] == ']' && c != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            } else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            } else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.length();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        } else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            char top = s.top();\n            s.pop();\n            if(exp[i]==')' && top!='(') {\n                return false;\n            }\n            if(exp[i]=='}' && top!='{') {\n                return false;\n            }\n            if(exp[i]==']' && top!='[') {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        } else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            if(exp[i] == ')' && st.top() == '(') {\n                st.pop();\n            } else if(exp[i] == '}' && st.top() == '{') {\n                st.pop();\n            } else if(exp[i] == ']' && st.top() == '[') {\n                st.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return st.empty();",
    "    std::stack<char> s;\n    for(int i=0;i<exp.size();i++) {\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']') {\n            if(s.empty()) {\n                return false;\n            }\n            else {\n                char ch = s.top();\n                s.pop();\n                if(exp[i]==')' && ch!='(') {\n                    return false;\n                }\n                else if(exp[i]=='}' && ch!='{') {\n                    return false;\n                }\n                else if(exp[i]==']' && ch!='[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> st;\n    for(int i = 0; i < exp.size(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            st.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(st.empty()) {\n                return false;\n            }\n            char top = st.top();\n            st.pop();\n            if(exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if(exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if(exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if(st.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    return false;",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(s.top() == '(' && exp[i] == ')') {\n                s.pop();\n            }\n            else if(s.top() == '{' && exp[i] == '}') {\n                s.pop();\n            }\n            else if(s.top() == '[' && exp[i] == ']') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::stack<char> s;\n    for(int i = 0; i < exp.length(); i++) {\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            s.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if(s.empty()) {\n                return false;\n            }\n            else if(exp[i] == ')' && s.top() == '(') {\n                s.pop();\n            }\n            else if(exp[i] == '}' && s.top() == '{') {\n                s.pop();\n            }\n            else if(exp[i] == ']' && s.top() == '[') {\n                s.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return s.empty();",
    "\tstd::stack<char> s;\n\tfor(int i = 0; i < exp.size(); i++) {\n\t\tif(exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n\t\t\ts.push(exp[i]);\n\t\t} else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n\t\t\tif(s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar c = s.top();\n\t\t\ts.pop();\n\t\t\tif(exp[i] == ')' && c != '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == '}' && c != '{') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(exp[i] == ']' && c != '[') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn s.empty();",
    "  std::stack<char> s;\n  for (int i = 0; i < exp.size(); i++) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      s.push(exp[i]);\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (s.empty()) {\n        return false;\n      }\n      if (exp[i] == ')' && s.top() == '(') {\n        s.pop();\n      } else if (exp[i] == '}' && s.top() == '{') {\n        s.pop();\n      } else if (exp[i] == ']' && s.top() == '[') {\n        s.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return s.empty();"
  ]
}