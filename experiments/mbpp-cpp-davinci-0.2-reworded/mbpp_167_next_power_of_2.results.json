{
  "name": "mbpp_167_next_power_of_2",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    if (n==0) return 1;\n    if (n&(n-1)==0) return n;\n    while (n&(n-1)>0) {\n        n &= (n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n  long p = 1;\n  if (n && !(n & (n - 1)))\n    return n;\n\n  while (p < n) {\n    p <<= 1;\n  }\n  return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    long p = ceil(log2(n));\n    return (long)pow(2, p);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n >= 0);\n    if (n == 0)\n        return 1;\n    long p = 1;\n    while (p < n)\n        p <<= 1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n>=0);\n    if(n==0)\n        return 1;\n    long p=1;\n    while(p<n)\n        p=p<<1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n  long count = 0;\n  if (n && !(n & (n - 1)))\n    return n;\n  while (n != 0) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code goes here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n |= n >> 32;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long p = 1;\n    while(p<n)\n    {\n        p = p<<1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code goes here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n > 0);\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "tmpon811dpb: /tmp/tmpon811dpb.cpp:5: long int next_power_of_2(long int): Assertion `n > 0' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)>0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=0;\n    while(pow(2,i)<n)\n    {\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1) == 0) {\n        return n;\n    }\n    while (n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n |= n >> 32;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    if(n==0)\n    return 1;\n    if(n==1)\n    return 2;\n    if(n&(n-1)==0)\n    return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0) {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "tmp34k3cz53: /tmp/tmp34k3cz53.cpp:16: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    assert(n >= 0);\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n |= n >> 32;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n){\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1))\n        n=n&(n-1);\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while(i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long next_power = 1;\n    while(next_power < n) {\n        next_power = next_power << 1;\n    }\n    return next_power;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n&(n-1)))\n        return n;\n    while( n != 0) {\n        n  >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)>0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code goes here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n==2)\n        return 2;\n    long i=0;\n    while(n!=1)\n    {\n        n=n/2;\n        i++;\n    }\n    return pow(2,i);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "tmpi95sg7h7: /tmp/tmpi95sg7h7.cpp:23: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    n--;\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    n++;\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "tmp34k3cz53: /tmp/tmp34k3cz53.cpp:16: int main(): Assertion `candidate((0)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    if(n==0)\n        return 1;\n    if(n==1)\n        return 2;\n    if(n%2==0)\n        return n;\n    else\n        return next_power_of_2(n/2)*2;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "tmp7536osdg: /tmp/tmp7536osdg.cpp:18: int main(): Assertion `candidate((5)) == (8)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n |= n >> 1;\n        n |= n >> 2;\n        n |= n >> 4;\n        n |= n >> 8;\n        n |= n >> 16;\n        n++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n == 0) {\n        return 1;\n    }\n    if(n & (n - 1) == 0) {\n        return n;\n    }\n    while(n & (n - 1) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0) {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n &= (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)!=0)\n        n=n&(n-1);\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=0;\n    long j=1;\n    while(j<n)\n    {\n        i++;\n        j=j*2;\n    }\n    return j;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n == 0)\n        return 1;\n    if(n & (n-1) == 0)\n        return n;\n    while(n & (n-1) > 0) {\n        n = n & (n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    int count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n)\n        p <<= 1;\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n\t// Write your code here\n\tlong i = 1;\n\twhile (i < n) {\n\t\ti = i * 2;\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if(n==0)\n        return 1;\n    if(n&(n-1)==0)\n        return n;\n    while(n&(n-1)>0)\n    {\n        n=n&(n-1);\n    }\n    return n<<1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    long p = ceil(log2(n));\n    return (1L << p);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123618,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    long p = ceil(log2(n));\n    return (long)pow(2, p);\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1665510328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n    if (n == 0)\n        return 1;\n    if (n & (n - 1) == 0)\n        return n;\n    while ((n & (n - 1)) > 0) {\n        n = n & (n - 1);\n    }\n    return n << 1;\n}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
      "timestamp": 1666123616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}