{
  "name": "mbpp_57_find_Max_Num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the largest number that can be formed with the given vector of digits.\nlong find_Max_Num(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_Max_Num;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (321));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)1}))) == (6541));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)9}))) == (9321));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string str = \"\";\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    for (long i = 0; i < arr.size(); i++) {\n        str += std::to_string(arr[i]);\n    }\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        num = num*10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        std::string s1 = std::to_string(a);\n        std::string s2 = std::to_string(b);\n        return s1+s2 > s2+s1;\n    });\n    std::string result;\n    for(auto i : arr) {\n        result += std::to_string(i);\n    }\n    return std::stol(result);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::string str = \"\";\n    for(auto i : arr) {\n        str += std::to_string(i);\n    }\n    std::sort(str.begin(), str.end(), std::greater<char>());\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        return std::to_string(a) + std::to_string(b) > std::to_string(b) + std::to_string(a);\n    });\n    std::string str = \"\";\n    for(auto i : arr) {\n        str += std::to_string(i);\n    }\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    long max_num = 0;\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    for(long i = 0; i < arr.size(); i++) {\n        max_num = max_num * 10 + arr[i];\n    }\n    return max_num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::string str = \"\";\n    for(int i = 0; i < arr.size(); i++) {\n        str += std::to_string(arr[i]);\n    }\n    std::sort(str.begin(), str.end(), std::greater<char>());\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    std::string str = \"\";\n    for(auto i : arr) {\n        str += std::to_string(i);\n    }\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        num = num*10 + arr[i];\n    }\n    return num;",
    "    std::string str = \"\";\n    for (int i = 0; i < arr.size(); i++) {\n        str += std::to_string(arr[i]);\n    }\n    std::sort(str.begin(), str.end(), std::greater<char>());\n    return std::stol(str);",
    "    std::sort(arr.begin(), arr.end(), std::greater<int>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;",
    "    std::sort(arr.begin(), arr.end(), std::greater<long>());\n    long num = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;"
  ]
}