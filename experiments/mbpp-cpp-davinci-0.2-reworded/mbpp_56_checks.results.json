{
  "name": "mbpp_56_checks",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0;\n    long t=n;\n    while(t>0) {\n        r=r*10+t%10;\n        t=t/10;\n    }\n    if(n==r+1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpdcoaka5s: /tmp/tmpdcoaka5s.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp_8db7uo2: /tmp/tmp_8db7uo2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0,t=n;\n    while(t>0) {\n        r=r*10+t%10;\n        t=t/10;\n    }\n    return (n==r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpxziary70: /tmp/tmpxziary70.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpzueyn02c: /tmp/tmpzueyn02c.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpjuvfd8k9: /tmp/tmpjuvfd8k9.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpljqfba14: /tmp/tmpljqfba14.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmprq5keohr: /tmp/tmprq5keohr.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while (num > 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp0g_jus5j: /tmp/tmp0g_jus5j.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num) {\n        rev = rev*10 + num%10;\n        num /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpk9w5ljjq: /tmp/tmpk9w5ljjq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmplsxnz_0j: /tmp/tmplsxnz_0j.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp != 0) {\n        r = r*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpmjduv94h: /tmp/tmpmjduv94h.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp552911j_: /tmp/tmp552911j_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == 2*rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == (rev * 2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmprq5keohr: /tmp/tmprq5keohr.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp) {\n        r = r*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpd51v1ib_: /tmp/tmpd51v1ib_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long x = n;\n    while(x > 0) {\n        r = r * 10 + x % 10;\n        x = x / 10;\n    }\n    return (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp0r67o9eo: /tmp/tmp0r67o9eo.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmposk7m4zq: /tmp/tmposk7m4zq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev+1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3zt0dxjn: /tmp/tmp3zt0dxjn.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(rev == n-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpkd0zk6jt: /tmp/tmpkd0zk6jt.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0, temp = n;\n    while (temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmphs1370_y: /tmp/tmphs1370_y.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpvit7l46b: /tmp/tmpvit7l46b.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpvo_lvwd2: /tmp/tmpvo_lvwd2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp /= 10;\n\t}\n\treturn (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmppr5zewm0: /tmp/tmppr5zewm0.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpjuvfd8k9: /tmp/tmpjuvfd8k9.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    if (n == rev + 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpilp4_kqk: /tmp/tmpilp4_kqk.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmphqe48k4l: /tmp/tmphqe48k4l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1 || n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp2mlk503n: /tmp/tmp2mlk503n.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpgxnr9jff: /tmp/tmpgxnr9jff.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num > 0) {\n        rev = rev*10 + num%10;\n        num = num/10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpsd3ssjq5: /tmp/tmpsd3ssjq5.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong t = n;\n\twhile (t > 0) {\n\t\trev = rev * 10 + t % 10;\n\t\tt = t / 10;\n\t}\n\treturn (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp_wjymddv: /tmp/tmp_wjymddv.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(n) {\n        r = r*10 + n%10;\n        n = n/10;\n    }\n    return (t == r*2-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1) || (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpfgdzqdfc: /tmp/tmpfgdzqdfc.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpzueyn02c: /tmp/tmpzueyn02c.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int a[10];\n    int i = 0;\n    while (n > 0) {\n        a[i] = n % 10;\n        n = n / 10;\n        i++;\n    }\n    int j = 0;\n    int k = i - 1;\n    while (j < k) {\n        if (a[j] != a[k]) {\n            return false;\n        }\n        j++;\n        k--;\n    }\n    return true;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpda2shfx0: /tmp/tmpda2shfx0.cpp:27: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long x = n;\n    while (x != 0) {\n        r = r * 10 + x % 10;\n        x = x / 10;\n    }\n    return (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp0ztrf7d6: /tmp/tmp0ztrf7d6.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n  long rev = 0;\n  long temp = n;\n  while (temp != 0) {\n    rev = rev * 10 + temp % 10;\n    temp = temp / 10;\n  }\n  return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpsl1k57d4: /tmp/tmpsl1k57d4.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp = temp / 10;\n\t}\n\treturn (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpr_dynin0: /tmp/tmpr_dynin0.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp552911j_: /tmp/tmp552911j_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t > 0) {\n        r = r * 10 + t % 10;\n        t = t / 10;\n    }\n    return (n == r - 1) || (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp7k1zzt2_: /tmp/tmp7k1zzt2_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong x = n;\n\twhile (x != 0) {\n\t\trev = rev * 10 + x % 10;\n\t\tx = x / 10;\n\t}\n\treturn (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp341qglv2: /tmp/tmp341qglv2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return n == rev+1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpacenc2te: /tmp/tmpacenc2te.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (rev == n-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpebl7swlg: /tmp/tmpebl7swlg.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n+1 == 2*rev);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n+1 == 2*rev);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp1wut5o6t: /tmp/tmp1wut5o6t.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong t = n;\n\twhile (t > 0) {\n\t\trev = rev * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == rev - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpg0ll39mn: /tmp/tmpg0ll39mn.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp6ej2rlw_: /tmp/tmp6ej2rlw_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while (num) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev + 1) || (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp3neg239n: /tmp/tmp3neg239n.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    int rev = 0;\n    int temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpk6jn4oma: /tmp/tmpk6jn4oma.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0,t=n;\n    while(t) {\n        r=r*10+t%10;\n        t/=10;\n    }\n    return (n+1)==2*r;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long x = n;\n    while(x != 0) {\n        rev = rev * 10 + x % 10;\n        x = x / 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpkayohrzl: /tmp/tmpkayohrzl.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (2 * rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t > 0) {\n        r = r * 10 + t % 10;\n        t = t / 10;\n    }\n    return (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpnhkeo62j: /tmp/tmpnhkeo62j.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpe168_u3t: /tmp/tmpe168_u3t.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpe168_u3t: /tmp/tmpe168_u3t.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong temp = n;\n\twhile (temp != 0) {\n\t\trev = rev * 10 + temp % 10;\n\t\ttemp = temp / 10;\n\t}\n\treturn (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpr_dynin0: /tmp/tmpr_dynin0.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong r = 0;\n\tlong t = n;\n\twhile (t != 0) {\n\t\tr = r * 10 + t % 10;\n\t\tt = t / 10;\n\t}\n\tif (n == r + 1) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpyvij_i80: /tmp/tmpyvij_i80.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r+1 || n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpa38zzs23: /tmp/tmpa38zzs23.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1) || (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp190hp_bb: /tmp/tmp190hp_bb.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpk9w5ljjq: /tmp/tmpk9w5ljjq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long t = n;\n    while(t > 0) {\n        rev = rev * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == rev - 1) || (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp5ryxq8rp: /tmp/tmp5ryxq8rp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp552911j_: /tmp/tmp552911j_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong r = 0;\n\tlong t = n;\n\twhile (t) {\n\t\tr = r * 10 + t % 10;\n\t\tt /= 10;\n\t}\n\treturn n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpmc9izv70: /tmp/tmpmc9izv70.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpdbr67d2l: /tmp/tmpdbr67d2l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "tmptkb834ku: /tmp/tmptkb834ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while (n != 0) {\n        rev = rev * 10 + n % 10;\n        n = n / 10;\n    }\n    return (num == 2 * rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmphqcj_osy: /tmp/tmphqcj_osy.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpcjdd2st7: /tmp/tmpcjdd2st7.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp51k8aep5: /tmp/tmp51k8aep5.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp3mi9sojz: /tmp/tmp3mi9sojz.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpos4p_98p: /tmp/tmpos4p_98p.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpe168_u3t: /tmp/tmpe168_u3t.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp46_dguqi: /tmp/tmp46_dguqi.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp2aievz06: /tmp/tmp2aievz06.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpgxnr9jff: /tmp/tmpgxnr9jff.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev * 2) - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev + 1) || (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpmap2ncru: /tmp/tmpmap2ncru.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "tmptkb834ku: /tmp/tmptkb834ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmphqe48k4l: /tmp/tmphqe48k4l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpljsu24b_: /tmp/tmpljsu24b_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long m = 0;\n    long t = n;\n    while(t) {\n        m = m*10 + t%10;\n        t /= 10;\n    }\n    return (n == 2*m - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return n == rev + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp84glnoaz: /tmp/tmp84glnoaz.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmphqe48k4l: /tmp/tmphqe48k4l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0, m = n;\n    while(m) {\n        r = r * 10 + m % 10;\n        m /= 10;\n    }\n    return n == r + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpksq8uves: /tmp/tmpksq8uves.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmphqe48k4l: /tmp/tmphqe48k4l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpk9w5ljjq: /tmp/tmpk9w5ljjq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return n == r-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpbd_xn0n7: /tmp/tmpbd_xn0n7.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return n == r-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpbd_xn0n7: /tmp/tmpbd_xn0n7.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpljsu24b_: /tmp/tmpljsu24b_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong rev = 0;\n\tlong num = n;\n\twhile (num > 0) {\n\t\trev = rev * 10 + num % 10;\n\t\tnum /= 10;\n\t}\n\treturn n == rev - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp05b_9h25: /tmp/tmp05b_9h25.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpc5mve6y1: /tmp/tmpc5mve6y1.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long m = n;\n    while (m > 0) {\n        r = r * 10 + m % 10;\n        m = m / 10;\n    }\n    return (n == r + 1) || (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp6sst_cgo: /tmp/tmp6sst_cgo.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0,t=n;\n    while(n) {\n        r=r*10+n%10;\n        n/=10;\n    }\n    return (t==r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpluwf9mjh: /tmp/tmpluwf9mjh.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmphqcj_osy: /tmp/tmphqcj_osy.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "tmptkb834ku: /tmp/tmptkb834ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == r + 1 || n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpwgpn8q5k: /tmp/tmpwgpn8q5k.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num != 0) {\n        rev = rev * 10 + num % 10;\n        num /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpjwpn9hjs: /tmp/tmpjwpn9hjs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t > 0) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpffbw8gg7: /tmp/tmpffbw8gg7.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n + 1 == 2 * rev);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r=0;\n    long t=n;\n    while(t>0) {\n        r=r*10+t%10;\n        t=t/10;\n    }\n    return (n==r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpukidw_sz: /tmp/tmpukidw_sz.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmp3mi9sojz: /tmp/tmp3mi9sojz.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp1wut5o6t: /tmp/tmp1wut5o6t.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "tmptkb834ku: /tmp/tmptkb834ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124066,
      "stdout": "",
      "stderr": "tmptkb834ku: /tmp/tmptkb834ku.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1 || n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpykt2_bfu: /tmp/tmpykt2_bfu.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    if (n == rev + 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpilp4_kqk: /tmp/tmpilp4_kqk.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long x = n;\n    while(x != 0) {\n        rev = rev*10 + x%10;\n        x = x/10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpm92_5hdd: /tmp/tmpm92_5hdd.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while(temp) {\n        r = r * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmp00lxpr2x: /tmp/tmp00lxpr2x.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp > 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmp524_q1cs: /tmp/tmp524_q1cs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmprq5keohr: /tmp/tmprq5keohr.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long x = n;\n    while (x) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmp25lqonzo: /tmp/tmp25lqonzo.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == r + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmp1wth2aze: /tmp/tmp1wth2aze.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmposk7m4zq: /tmp/tmposk7m4zq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1 || n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpspytlf1n: /tmp/tmpspytlf1n.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpjuvfd8k9: /tmp/tmpjuvfd8k9.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp!=0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    if(n == rev-1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpkpmypfwy: /tmp/tmpkpmypfwy.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long reverse = 0;\n    long temp = n;\n    while(temp != 0) {\n        reverse = reverse * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == reverse - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpnir6irf4: /tmp/tmpnir6irf4.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmpvo_lvwd2: /tmp/tmpvo_lvwd2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpljsu24b_: /tmp/tmpljsu24b_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpkayohrzl: /tmp/tmpkayohrzl.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev-1)/2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpfruglmg2: /tmp/tmpfruglmg2.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp552911j_: /tmp/tmp552911j_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == r + r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmphqcj_osy: /tmp/tmphqcj_osy.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpk9w5ljjq: /tmp/tmpk9w5ljjq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return n == r-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpbd_xn0n7: /tmp/tmpbd_xn0n7.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmpljsu24b_: /tmp/tmpljsu24b_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    // Your code here\n    int i=0,j=0;\n    long num=n;\n    long rev=0;\n    while(num!=0){\n        i=num%10;\n        rev=rev*10+i;\n        num=num/10;\n    }\n    if((n-rev)==1){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpqi0epz4m: /tmp/tmpqi0epz4m.cpp:25: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t = t/10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpwe5ve7ox: /tmp/tmpwe5ve7ox.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "tmphqcj_osy: /tmp/tmphqcj_osy.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0, temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return n == rev-1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpirr7gr4l: /tmp/tmpirr7gr4l.cpp:16: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (2*rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(n) {\n        r = r*10 + n%10;\n        n /= 10;\n    }\n    return (2*r == t+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long t = n;\n    while(t) {\n        rev = rev*10 + t%10;\n        t /= 10;\n    }\n    return n == rev*2 - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp = temp/10;\n    }\n    return (n == rev+1 || n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpih39aef_: /tmp/tmpih39aef_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (rev*2 - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp3g0s6kjp: /tmp/tmp3g0s6kjp.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmp57lujc96: /tmp/tmp57lujc96.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev*2 - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r - 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmp6ej2rlw_: /tmp/tmp6ej2rlw_.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tlong r = 0;\n\tlong x = n;\n\twhile (x > 0) {\n\t\tr = r * 10 + x % 10;\n\t\tx = x / 10;\n\t}\n\treturn (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmp1gp7pxcs: /tmp/tmp1gp7pxcs.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long t = n;\n    while(t > 0) {\n        rev = rev * 10 + t % 10;\n        t /= 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpymut64ay: /tmp/tmpymut64ay.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long num = n;\n    while(num > 0) {\n        rev = rev*10 + num%10;\n        num = num/10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmpt2w0lh50: /tmp/tmpt2w0lh50.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long m = n;\n    while(m > 0) {\n        r = r * 10 + m % 10;\n        m = m / 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmp4gcbpnb3: /tmp/tmp4gcbpnb3.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while (t) {\n        r = r * 10 + t % 10;\n        t /= 10;\n    }\n    return n == r + 1;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmp3hb1nczf: /tmp/tmp3hb1nczf.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n  long rev = 0;\n  long temp = n;\n  while (temp != 0) {\n    rev = rev * 10 + temp % 10;\n    temp /= 10;\n  }\n  return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmp9cjgditj: /tmp/tmp9cjgditj.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long num = n;\n    long rev = 0;\n    while(num > 0) {\n        rev = rev * 10 + num % 10;\n        num = num / 10;\n    }\n    return (n == rev - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmpwk5hvm4k: /tmp/tmpwk5hvm4k.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n\tint i, j, k, l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n\tlong a, b, c, d, e, f, g, h, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy, zz;\n\tlong aa, bb, cc, dd, ee, ff, gg, hh, ii2, jj2, kk2, ll2, mm2, nn2, oo2, pp2, qq2, rr2, ss2, tt2, uu2, vv2, ww2, xx2, yy2, zz2;\n\tlong aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm, nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n\tlong aaaa, bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn, oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n\tlong aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj, kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu, vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n\tlong aaaaaa, bbbbbb, cccccc, dddddd, eeeeee, ffffff, gggggg, hhhhhh, iiiiii, j\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "/tmp/tmpdviqv5kx.cpp: In function \u2018bool checks(long int)\u2019:\n/tmp/tmpdviqv5kx.cpp:12:1: error: expected initializer before \u2018}\u2019 token\n   12 | }\n      | ^\n/tmp/tmpdviqv5kx.cpp:12:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev+1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmprq5keohr: /tmp/tmprq5keohr.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long temp = n;\n    long rev = 0;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    if (n == rev + 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmpeub5l79_: /tmp/tmpeub5l79_.cpp:20: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t = t/10;\n    }\n    return (n == 2*r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmpflrggih4: /tmp/tmpflrggih4.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpzueyn02c: /tmp/tmpzueyn02c.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == (rev - 1) / 2);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124065,
      "stdout": "",
      "stderr": "tmpdbr67d2l: /tmp/tmpdbr67d2l.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while(temp) {\n        rev = rev*10 + temp%10;\n        temp /= 10;\n    }\n    return (n == (2*rev - 1));\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmposk7m4zq: /tmp/tmposk7m4zq.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t = t/10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "tmpwe5ve7ox: /tmp/tmpwe5ve7ox.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long rev = 0;\n    long temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return (n == rev + 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124063,
      "stdout": "",
      "stderr": "tmp5srzgoad: /tmp/tmp5srzgoad.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long temp = n;\n    while (temp != 0) {\n        r = r * 10 + temp % 10;\n        temp = temp / 10;\n    }\n    return (n == r - 1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "tmpyltq6xqe: /tmp/tmpyltq6xqe.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if a given number is one less than twice its reverse.\nbool checks(long n) {\n    long r = 0;\n    long t = n;\n    while(t) {\n        r = r*10 + t%10;\n        t /= 10;\n    }\n    return (n == r-1);\n}\nint main() {\n    auto candidate = checks;\n    assert(candidate((70)) == (false));\n    assert(candidate((23)) == (false));\n    assert(candidate((73)) == (true));\n}\n",
      "timestamp": 1665517626,
      "stdout": "",
      "stderr": "tmpzueyn02c: /tmp/tmpzueyn02c.cpp:17: int main(): Assertion `candidate((73)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}