{
  "name": "mbpp_565_split",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to split a string into characters.\nstd::vector<std::string> split(std::string word) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = split;\n    assert(candidate((\"python\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"y\", (std::string)\"t\", (std::string)\"h\", (std::string)\"o\", (std::string)\"n\"})));\n    assert(candidate((\"Name\")) == (std::vector<std::string>({(std::string)\"N\", (std::string)\"a\", (std::string)\"m\", (std::string)\"e\"})));\n    assert(candidate((\"program\")) == (std::vector<std::string>({(std::string)\"p\", (std::string)\"r\", (std::string)\"o\", (std::string)\"g\", (std::string)\"r\", (std::string)\"a\", (std::string)\"m\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> v;\n    for (int i = 0; i < word.length(); i++) {\n        v.push_back(word.substr(i, 1));\n    }\n    return v;",
    "    std::vector<std::string> splitted;\n    for (int i = 0; i < word.length(); i++) {\n        splitted.push_back(word.substr(i, 1));\n    }\n    return splitted;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.size(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "\tstd::vector<std::string> result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tresult.push_back(word.substr(i, 1));\n\t}\n\treturn result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(word);\n    std::string temp;\n    while(ss >> temp) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.size(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> v;\n    for(int i=0;i<word.length();i++) {\n        v.push_back(word.substr(i,1));\n    }\n    return v;",
    "    std::vector<std::string> result;\n    std::stringstream ss(word);\n    std::string temp;\n    while(ss >> temp) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    std::stringstream ss(word);\n    std::string temp;\n    while(ss >> temp) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.size(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> split_word;\n    for (int i = 0; i < word.length(); i++) {\n        split_word.push_back(word.substr(i, 1));\n    }\n    return split_word;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for (int i = 0; i < word.length(); i++) {\n        result.push_back(word.substr(i, 1));\n    }\n    return result;"
  ]
}