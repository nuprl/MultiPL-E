{
  "name": "mbpp_442_positive_count",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the ration of positive numbers in a vector of integers.\nfloat positive_count(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = positive_count;\n    assert(candidate((std::vector<long>({(long)0, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)0, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.54));\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)2, (long)-1, (long)-5, (long)6, (long)4, (long)-3, (long)-2, (long)3, (long)4, (long)6, (long)8}))) == (0.69));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-6, (long)-9, (long)11, (long)-12, (long)14, (long)-5, (long)17}))) == (0.56));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    float count = 0;\n    for (auto num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count / nums.size();",
    "    float count = 0;\n    for (auto num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count / nums.size();",
    "    float count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return count / nums.size();",
    "    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count/nums.size();",
    "    int count = 0;\n    for(auto i : nums) {\n        if(i > 0) {\n            count++;\n        }\n    }\n    return (float)count/nums.size();",
    "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    float count = 0;\n    for (long num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return count / nums.size();",
    "    float count = 0;\n    for (auto i = nums.begin(); i != nums.end(); i++) {\n        if (*i > 0) {\n            count++;\n        }\n    }\n    return count/nums.size();",
    "    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    int count = 0;\n    for (auto i : nums) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count / nums.size();",
    "  float positive_count = 0;\n  for (auto num : nums) {\n    if (num > 0) {\n      positive_count++;\n    }\n  }\n  return positive_count / nums.size();",
    "    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "  float count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count / nums.size();",
    "    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count/nums.size();",
    "    int count = 0;\n    for (auto num : nums) {\n        if (num > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();",
    "    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return (float)count/nums.size();",
    "    int count = 0;\n    for (auto i : nums) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return (float)count / nums.size();"
  ]
}