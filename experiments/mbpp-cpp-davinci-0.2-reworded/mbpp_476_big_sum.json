{
  "name": "mbpp_476_big_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of the largest and smallest value in a given vector.\nlong big_sum(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = big_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (4));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6}))) == (8));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long min = nums[0];\n    long max = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return min + max;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long min = nums[0];\n    long max = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n    }\n    return min + max;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long sum = 0;\n    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    sum = max + min;\n    return sum;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    assert(nums.size() > 0);\n    long max = nums[0];\n    long min = nums[0];\n    for (auto num : nums) {\n        if (num > max) {\n            max = num;\n        }\n        if (num < min) {\n            min = num;\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long min = nums[0];\n    long max = nums[0];\n    for (auto i : nums) {\n        if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n    }\n    return min + max;",
    "    long max = nums[0];\n    long min = nums[0];\n    for(int i = 0; i < nums.size(); i++) {\n        if(nums[i] > max) {\n            max = nums[i];\n        }\n        if(nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;",
    "    long max = nums[0];\n    long min = nums[0];\n    for (long i = 0; i < nums.size(); i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max + min;"
  ]
}