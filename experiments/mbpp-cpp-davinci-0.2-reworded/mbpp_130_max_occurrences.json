{
  "name": "mbpp_130_max_occurrences",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the item with maximum frequency in a given vector.\nlong max_occurrences(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_occurrences;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)2, (long)6, (long)5, (long)1, (long)6, (long)1, (long)2, (long)3, (long)2, (long)4, (long)6, (long)9, (long)1, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)8, (long)4, (long)7, (long)9, (long)8, (long)7, (long)9, (long)15, (long)14, (long)10, (long)12, (long)13, (long)16, (long)18}))) == (8));\n    assert(candidate((std::vector<long>({(long)10, (long)20, (long)20, (long)30, (long)40, (long)90, (long)80, (long)50, (long)30, (long)20, (long)50, (long)10}))) == (20));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> freq;\n    for(long i=0;i<nums.size();i++)\n    {\n        freq[nums[i]]++;\n    }\n    long max=0;\n    long max_num;\n    for(auto it=freq.begin();it!=freq.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "  std::unordered_map<long,long> m;\n  for(auto i:nums)\n    m[i]++;\n  long max_occurrences = 0;\n  long max_occurrences_item = 0;\n  for(auto i:m){\n    if(i.second>max_occurrences){\n      max_occurrences = i.second;\n      max_occurrences_item = i.first;\n    }\n  }\n  return max_occurrences_item;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_num;\n    for(auto it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> freq;\n    for (auto num : nums) {\n        freq[num]++;\n    }\n    long max_freq = 0;\n    long max_num = 0;\n    for (auto f : freq) {\n        if (f.second > max_freq) {\n            max_freq = f.second;\n            max_num = f.first;\n        }\n    }\n    return max_num;",
    "    long max = 0;\n    long max_count = 0;\n    std::map<long, long> map;\n    for (long i = 0; i < nums.size(); i++) {\n        if (map.find(nums[i]) == map.end()) {\n            map[nums[i]] = 1;\n        } else {\n            map[nums[i]]++;\n        }\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > max_count) {\n            max_count = it->second;\n            max = it->first;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    for(auto i : m) {\n        if(i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;",
    "    std::map<long,long> m;\n    for(int i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    std::map<long,long>::iterator it;\n    long max=0;\n    long max_num=0;\n    for(it=m.begin();it!=m.end();it++)\n    {\n        if(it->second>max)\n        {\n            max=it->second;\n            max_num=it->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(int i=0; i<nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for(auto it=m.begin(); it!=m.end(); it++) {\n        if(it->second > max_count) {\n            max_count = it->second;\n            max_item = it->first;\n        }\n    }\n    return max_item;",
    "    long max = 0;\n    long max_count = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < nums.size(); i++) {\n        m[nums[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second > max_count) {\n            max_count = it->second;\n            max = it->first;\n        }\n    }\n    return max;",
    "    std::map<long,long> m;\n    for(long i=0;i<nums.size();i++)\n    {\n        m[nums[i]]++;\n    }\n    long max=0;\n    long max_num=0;\n    for(auto i=m.begin();i!=m.end();i++)\n    {\n        if(i->second>max)\n        {\n            max=i->second;\n            max_num=i->first;\n        }\n    }\n    return max_num;",
    "    std::map<long, long> m;\n    for(auto i : nums) {\n        m[i]++;\n    }\n    long max = 0;\n    long max_num = 0;\n    for(auto i : m) {\n        if(i.second > max) {\n            max = i.second;\n            max_num = i.first;\n        }\n    }\n    return max_num;",
    "    std::map<long,long> m;\n    for(auto i:nums){\n        m[i]++;\n    }\n    long max_val=0;\n    long max_key=0;\n    for(auto i:m){\n        if(i.second>max_val){\n            max_val=i.second;\n            max_key=i.first;\n        }\n    }\n    return max_key;",
    "    std::map<long, long> map;\n    for (auto i : nums) {\n        map[i]++;\n    }\n    long max_count = 0;\n    long max_item = 0;\n    for (auto i : map) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "\tstd::map<long, long> m;\n\tfor (auto i : nums) {\n\t\tm[i]++;\n\t}\n\tlong max = 0;\n\tfor (auto i : m) {\n\t\tif (i.second > max) {\n\t\t\tmax = i.second;\n\t\t}\n\t}\n\treturn max;",
    "    std::map<long, long> count;\n    for (long i = 0; i < nums.size(); i++) {\n        count[nums[i]]++;\n    }\n    long max = 0;\n    long max_key = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        if (it->second > max) {\n            max = it->second;\n            max_key = it->first;\n        }\n    }\n    return max_key;",
    "    long max_count = 0;\n    long max_item = 0;\n    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second > max_count) {\n            max_count = i.second;\n            max_item = i.first;\n        }\n    }\n    return max_item;",
    "    std::map<long, long> m;\n    for (auto i : nums) {\n        m[i]++;\n    }\n    long max_val = 0;\n    long max_key = 0;\n    for (auto i : m) {\n        if (i.second > max_val) {\n            max_val = i.second;\n            max_key = i.first;\n        }\n    }\n    return max_key;"
  ]
}