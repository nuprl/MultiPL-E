{
  "name": "mbpp_780_find_combinations",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/cppthon-combinations-of-sum-with-tuples-in-tuple-vector/\nstd::vector<long> find_combinations(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            for (int k = 0; k < temp_result.size(); k++) {\n                result.push_back(temp_result[k]);\n            }\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 1; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n        }\n        for (int j = 0; j < test_list.size(); j++) {\n            for (int k = 0; k < temp.size(); k++) {\n                if (temp[k] == test_list[j]) {\n                    temp.erase(temp.begin() + k);\n                    break;\n                }\n            }\n            if (std::accumulate(temp.begin(), temp.end(), 0) == sum - test_list[j]) {\n                result.push_back(test_list[j]);\n                for (int k = 0; k < temp.size(); k++) {\n                    result.push_back(temp[k]);\n                }\n            }\n            temp.clear();\n            for (int k = 0; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int size = test_list.size();\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            for (int k = j + 1; k < size; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    long half_sum_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > half_sum) {\n            half_sum_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < half_sum_index; i++) {\n        for (int j = i + 1; j < half_sum_index; j++) {\n            if (test_list[i] + test_list[j] == half_sum) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n                return result;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < (1 << n); i++) {\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                temp.push_back(test_list[j]);\n            }\n        }\n        combinations.push_back(temp);\n        temp.clear();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < combinations[i].size(); j++) {\n            sum += combinations[i][j];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            result.insert(result.end(), temp_result.begin(), temp_result.end());\n            result.push_back(test_list[i] + test_list[j]);\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = test_list.size();\n    for (int i = 0; i < (1 << n); i++) {\n        long sum = 0;\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                sum += test_list[j];\n            }\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        std::vector<long>::iterator itr2;\n        for(itr2 = test_list.begin(); itr2 != test_list.end(); itr2++) {\n            if(itr != itr2) {\n                result.push_back(*itr + *itr2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        std::vector<long>::iterator itr2;\n        for(itr2 = itr + 1; itr2 != test_list.end(); itr2++) {\n            long sum = *itr + *itr2;\n            if(std::binary_search(itr2 + 1, test_list.end(), sum)) {\n                result.push_back(*itr);\n                result.push_back(*itr2);\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            sum += test_list[i];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(long i = 0; i < *it; i++) {\n            sum += i;\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] + test_list[j] == sum) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> combination;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == sum) {\n                    combination.push_back(test_list[i]);\n                    combination.push_back(test_list[j]);\n                    combination.push_back(test_list[k]);\n                    combinations.push_back(combination);\n                    combination.clear();\n                }\n            }\n        }\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        for (int j = 0; j < combinations[i].size(); j++) {\n            result.push_back(combinations[i][j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    for (int i = 0; i < temp.size(); i += 2) {\n        for (int j = i + 2; j < temp.size(); j += 2) {\n            if (temp[i] != temp[j] && temp[i + 1] != temp[j + 1]) {\n                result.push_back(temp_result[i / 2] + temp_result[j / 2]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    int n = test_list.size();\n    for (int i = 0; i < (1 << n); i++) {\n        long sum = 0;\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                sum += test_list[j];\n                temp.push_back(test_list[j]);\n            }\n        }\n        if (sum == 0) {\n            result.push_back(temp.size());\n        }\n        temp.clear();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for (int l = k + 1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for (int m = l + 1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for (int n = m + 1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for (int o = n + 1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for (int p = o + 1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for (int q = p + 1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for (int r = q + 1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for (int s = r + 1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for (int t = s + 1; t < test_list.size(); t++) {\n                                                    temp.push_back(test_list[t]);\n                                                    for (int u = t + 1; u < test_list.size(); u++) {\n                                                        temp.push_",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor(int i = 0; i < test_list.size(); i++) {\n\t\tfor(int j = i + 1; j < test_list.size(); j++) {\n\t\t\tresult.push_back(test_list[i] + test_list[j]);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = test_list.begin();\n    while(itr != test_list.end()) {\n        long sum = 0;\n        std::vector<long>::iterator itr2 = itr;\n        while(itr2 != test_list.end()) {\n            sum += *itr2;\n            result.push_back(sum);\n            itr2++;\n        }\n        itr++;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    long sum = 0;\n    for (auto itr = test_list.begin(); itr != test_list.end(); itr++) {\n        sum += *itr;\n    }\n    for (auto itr = test_list.begin(); itr != test_list.end(); itr++) {\n        combinations.push_back(sum - *itr);\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            for(int k=j+1; k<test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int size = test_list.size();\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            for (int k = j + 1; k < size; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        long sum = 0;\n        for(auto itr1 = itr; itr1 != test_list.end(); itr1++) {\n            sum += *itr1;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                long sum = test_list[i] + test_list[j] + test_list[k];\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (auto it1 = it; it1 != test_list.end(); it1++) {\n            sum += *it1;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    long half_sum = sum / 2;\n    long sum_so_far = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum_so_far += test_list[i];\n        if (sum_so_far == half_sum) {\n            combinations.push_back(test_list[i]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (auto it1 = it; it1 != test_list.end(); it1++) {\n            sum += *it1;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    do {\n        long sum = 0;\n        for (auto i : test_list) {\n            sum += i;\n        }\n        result.push_back(sum);\n    } while (std::next_permutation(test_list.begin(), test_list.end()));\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = test_list.begin();\n    for (; it != test_list.end(); it++) {\n        std::vector<long>::iterator it2 = it + 1;\n        for (; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::sort(test_list.begin(), test_list.end());\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      for (int k = j + 1; k < test_list.size(); k++) {\n        if (test_list[i] + test_list[j] + test_list[k] == 0) {\n          result.push_back(test_list[i]);\n          result.push_back(test_list[j]);\n          result.push_back(test_list[k]);\n        }\n      }\n    }\n  }\n  return result;",
    "    std::vector<long> combinations;\n    std::vector<std::vector<long>> all_combinations;\n    std::vector<long> temp_list;\n    for (long i = 0; i < test_list.size(); i++) {\n        temp_list.push_back(test_list[i]);\n        for (long j = i + 1; j < test_list.size(); j++) {\n            temp_list.push_back(test_list[j]);\n            for (long k = j + 1; k < test_list.size(); k++) {\n                temp_list.push_back(test_list[k]);\n                all_combinations.push_back(temp_list);\n                temp_list.pop_back();\n            }\n            temp_list.pop_back();\n        }\n        temp_list.pop_back();\n    }\n    for (long i = 0; i < all_combinations.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j < all_combinations[i].size(); j++) {\n            sum += all_combinations[i][j];\n        }\n        combinations.push_back(sum);\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for(int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for(int l = k + 1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for(int m = l + 1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for(int n = m + 1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for(int o = n + 1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for(int p = o + 1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for(int q = p + 1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for(int r = q + 1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for(int s = r + 1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for(int t = s + 1; t < test_list.size(); t++) {\n                                                    temp.push_back(test_list[t]);\n                                                    for(int u = t + 1; u < test_list.size(); u++) {\n                                                        temp.push_",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    for (int i = 0; i < temp.size(); i++) {\n        for (int j = i + 1; j < temp.size(); j++) {\n            if (temp[i] + temp[j] == sum) {\n                result.push_back(temp[i]);\n                result.push_back(temp[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (auto i = it; i != test_list.end(); i++) {\n            sum += *i;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for (auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int i = 0;\n    int j = test_list.size() - 1;\n    while (i < j) {\n        if (test_list[i] + test_list[j] == 0) {\n            result.push_back(test_list[i]);\n            result.push_back(test_list[j]);\n            i++;\n            j--;\n        } else if (test_list[i] + test_list[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    std::vector<long> temp_list;\n    std::vector<long> temp_list2;\n    std::vector<long> temp_list3;\n    std::vector<long> temp_list4;\n    std::vector<long> temp_list5;\n    std::vector<long> temp_list6;\n    std::vector<long> temp_list7;\n    std::vector<long> temp_list8;\n    std::vector<long> temp_list9;\n    std::vector<long> temp_list10;\n    std::vector<long> temp_list11;\n    std::vector<long> temp_list12;\n    std::vector<long> temp_list13;\n    std::vector<long> temp_list14;\n    std::vector<long> temp_list15;\n    std::vector<long> temp_list16;\n    std::vector<long> temp_list17;\n    std::vector<long> temp_list18;\n    std::vector<long> temp_list19;\n    std::vector<long> temp_list20;\n    std::vector<long> temp_list21;\n    std::vector<long> temp_list22;\n    std::vector<long> temp_list23;\n    std::vector<long> temp_list24;\n    std::vector<long> temp_list25;\n    std::vector<long> temp_list26;\n    std::vector<long> temp_list27;\n    std::vector<long> temp_list28;\n    std::vector<long> temp_list29;\n    std::vector<long> temp_list30;\n    std::vector<long> temp_list31;\n    std::vector<long> temp_list32;\n    std::vector<long> temp_list33;\n    std::vector<long> temp_list34;\n    std::vector<long> temp_list35;\n    std::vector<long> temp_list36;\n    std::vector<long> temp_list37;\n    std::vector<long> temp_list38;\n    std::vector<long",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                temp.push_back(test_list[k]);\n                std::sort(temp.begin(), temp.end());\n                if(std::find(result.begin(), result.end(), temp[0] + temp[1] + temp[2]) == result.end()) {\n                    result.push_back(temp[0] + temp[1] + temp[2]);\n                }\n                temp.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > 0) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    for (int i = 0; i < temp.size(); i++) {\n        for (int j = i + 1; j < temp.size(); j++) {\n            if (temp[i] + temp[j] == sum) {\n                result.push_back(temp[i]);\n                result.push_back(temp[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                temp.push_back(test_list[k]);\n                combinations.push_back(temp);\n                temp.clear();\n            }\n        }\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < combinations[i].size(); j++) {\n            sum += combinations[i][j];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_final;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i]+test_list[j]);\n        }\n    }\n    for(int i=0;i<temp_result.size();i++) {\n        for(int j=i+1;j<temp_result.size();j++) {\n            temp_result_final.push_back(temp_result[i]+temp_result[j]);\n        }\n    }\n    return temp_result_final;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            long sum = *it + *it2;\n            if (std::binary_search(test_list.begin(), test_list.end(), sum)) {\n                result.push_back(*it);\n                result.push_back(*it2);\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (test_list[i] + test_list[j] == 0) {\n            result.push_back(test_list[i]);\n            result.push_back(test_list[j]);\n            i++;\n            j--;\n        } else if (test_list[i] + test_list[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    result.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_list;\n    std::vector<long> temp_list_2;\n    std::vector<long> temp_list_3;\n    std::vector<long> temp_list_4;\n    std::vector<long> temp_list_5;\n    std::vector<long> temp_list_6;\n    std::vector<long> temp_list_7;\n    std::vector<long> temp_list_8;\n    std::vector<long> temp_list_9;\n    std::vector<long> temp_list_10;\n    std::vector<long> temp_list_11;\n    std::vector<long> temp_list_12;\n    std::vector<long> temp_list_13;\n    std::vector<long> temp_list_14;\n    std::vector<long> temp_list_15;\n    std::vector<long> temp_list_16;\n    std::vector<long> temp_list_17;\n    std::vector<long> temp_list_18;\n    std::vector<long> temp_list_19;\n    std::vector<long> temp_list_20;\n    std::vector<long> temp_list_21;\n    std::vector<long> temp_list_22;\n    std::vector<long> temp_list_23;\n    std::vector<long> temp_list_24;\n    std::vector<long> temp_list_25;\n    std::vector<long> temp_list_26;\n    std::vector<long> temp_list_27;\n    std::vector<long> temp_list_28;\n    std::vector<long> temp_list_29;\n    std::vector<long> temp_list_30;\n    std::vector<long> temp_list_31;\n    std::vector<long> temp_list_32;\n    std::vector<long> temp_list_33;\n    std::vector<long> temp_list_34;\n    std::vector<long> temp_list_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            result.push_back(test_list[i]+test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == sum) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    combinations.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        for (int j = 0; j < combinations[i].size(); j++) {\n            result.push_back(combinations[i][j]);\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i = test_list.begin(); i != test_list.end(); ++i) {\n        sum += *i;\n    }\n    for(auto i = test_list.begin(); i != test_list.end(); ++i) {\n        for(auto j = i + 1; j != test_list.end(); ++j) {\n            for(auto k = j + 1; k != test_list.end(); ++k) {\n                if(*i + *j + *k == sum) {\n                    result.push_back(*i);\n                    result.push_back(*j);\n                    result.push_back(*k);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        std::vector<long> temp_list;\n        for (auto itr2 = itr; itr2 != test_list.end(); itr2++) {\n            temp_list.push_back(*itr2);\n        }\n        for (auto itr3 = temp_list.begin(); itr3 != temp_list.end(); itr3++) {\n            result.push_back(*itr3);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    for (auto i : test_list) {\n        if (i == sum - i) {\n            combinations.push_back(i);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr = test_list.begin();\n    while(itr != test_list.end()) {\n        long sum = 0;\n        for(auto i = itr; i != test_list.end(); i++) {\n            sum += *i;\n            result.push_back(sum);\n        }\n        itr++;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            for(int k=j+1; k<test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result_list.push_back(test_list[i]);\n                    result_list.push_back(test_list[j]);\n                    result_list.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            long sum = 0;\n            for(it=temp.begin();it!=temp.end();it++) {\n                sum += *it;\n            }\n            result.push_back(sum);\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result_list;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result_list.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    int i = 0;\n    while (i < n) {\n        int j = i + 1;\n        while (j < n) {\n            int k = j + 1;\n            while (k < n) {\n                combinations.push_back(test_list[i] + test_list[j] + test_list[k]);\n                k++;\n            }\n            j++;\n        }\n        i++;\n    }\n    return combinations;",
    "    std::vector<long> result_list;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result_list.push_back(test_list[i]);\n                    result_list.push_back(test_list[j]);\n                    result_list.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result_list;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            for (int k = 0; k < temp_result.size(); k++) {\n                result.push_back(temp_result[k]);\n            }\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            long sum = test_list[i] + test_list[j];\n            if (std::binary_search(test_list.begin(), test_list.end(), sum)) {\n                result.push_back(sum);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            combinations.push_back(test_list[i]+test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for(it2 = test_list.begin(); it2 != test_list.end(); it2++) {\n            if(it != it2) {\n                result.push_back(*it + *it2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    std::sort(temp.begin(), temp.end());\n                    if (std::find(result.begin(), result.end(), temp) == result.end()) {\n                        result.push_back(temp);\n                    }\n                    temp.clear();\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for(auto i: test_list) {\n        sum += i;\n    }\n    for(long i = 0; i < test_list.size(); i++) {\n        for(long j = i+1; j < test_list.size(); j++) {\n            for(long k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == sum) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for (itr = test_list.begin(); itr != test_list.end(); itr++) {\n        long sum = 0;\n        std::vector<long>::iterator itr2;\n        for (itr2 = itr; itr2 != test_list.end(); itr2++) {\n            sum += *itr2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(*it > 0) {\n            break;\n        }\n    }\n    long sum = 0;\n    for(; it != test_list.end(); it++) {\n        sum += *it;\n    }\n    result.push_back(sum);\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for(int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        for(int j = i+1; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n            for(int k = j+1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                for(int l = k+1; l < test_list.size(); l++) {\n                    temp.push_back(test_list[l]);\n                    for(int m = l+1; m < test_list.size(); m++) {\n                        temp.push_back(test_list[m]);\n                        for(int n = m+1; n < test_list.size(); n++) {\n                            temp.push_back(test_list[n]);\n                            for(int o = n+1; o < test_list.size(); o++) {\n                                temp.push_back(test_list[o]);\n                                for(int p = o+1; p < test_list.size(); p++) {\n                                    temp.push_back(test_list[p]);\n                                    for(int q = p+1; q < test_list.size(); q++) {\n                                        temp.push_back(test_list[q]);\n                                        for(int r = q+1; r < test_list.size(); r++) {\n                                            temp.push_back(test_list[r]);\n                                            for(int s = r+1; s < test_list.size(); s++) {\n                                                temp.push_back(test_list[s]);\n                                                for(int t = s+1; t < test_list.size(); t++) {\n                                                    temp.push_back(test_list[t]);\n                                                    for(int u = t+1; u",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    do {\n        long sum = 0;\n        for (auto i : test_list) {\n            sum += i;\n        }\n        result.push_back(sum);\n    } while (std::next_permutation(test_list.begin(), test_list.end()));\n    return result;",
    "    std::vector<long> combinations;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "  std::vector<long> result;\n  std::sort(test_list.begin(), test_list.end());\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      for (int k = j + 1; k < test_list.size(); k++) {\n        if (test_list[i] + test_list[j] + test_list[k] == 0) {\n          result.push_back(test_list[i]);\n          result.push_back(test_list[j]);\n          result.push_back(test_list[k]);\n        }\n      }\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i] + test_list[j]);\n            result.push_back(test_list[i] + test_list[j]);\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                temp_result.push_back(test_list[i] + test_list[j] + test_list[k]);\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n            temp.clear();\n        }\n    }\n    std::sort(result.begin(), result.end());\n    result.erase(std::unique(result.begin(), result.end()), result.end());\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        long sum = 0;\n        for(auto itr2 = test_list.begin(); itr2 != itr; itr2++) {\n            sum += *itr2;\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int size = test_list.size();\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            for (int k = j + 1; k < size; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            combinations.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size() - 1; i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> combination;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        combination.push_back(test_list[i]);\n        combinations.push_back(combination);\n        combination.clear();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        for (int j = 0; j < combinations[i].size(); j++) {\n            std::cout << combinations[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            for(int k=j+1; k<test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = 0; j < test_list.size(); j++) {\n            if(i != j) {\n                temp.push_back(test_list[i] + test_list[j]);\n            }\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    it = std::unique(temp.begin(), temp.end());\n    temp.resize(std::distance(temp.begin(), it));\n    return temp;",
    "    std::vector<long> combinations;\n    std::vector<long> temp;\n    int sum = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    for(int i = 0; i < temp.size(); i++) {\n        for(int j = i + 1; j < temp.size(); j++) {\n            combinations.push_back(temp[i] + temp[j]);\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            result.push_back(std::accumulate(temp.begin(), temp.end(), 0));\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> combinations;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    combinations.push_back(test_list[i]);\n                    combinations.push_back(test_list[j]);\n                    combinations.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return combinations;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] + test_list[j] == 0) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result.push_back(test_list[i] + test_list[j]);\n            result.push_back(test_list[i] + test_list[j]);\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n                temp_result.push_back(test_list[i] + test_list[j] + test_list[k]);\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n            temp.clear();\n            temp_result.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp2;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            result.push_back(std::accumulate(temp.begin(), temp.end(), 0));\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> output;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    for (int i = 0; i < test_list.size(); i++) {\n        temp.push_back(test_list[i]);\n        combinations.push_back(temp);\n        temp.clear();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        for (int j = 0; j < combinations[i].size(); j++) {\n            std::cout << combinations[i][j] << \" \";\n        }\n        std::cout << std::endl;\n    }\n    return output;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    for(int i=0;i<test_list.size();i++) {\n        for(int j=i+1;j<test_list.size();j++) {\n            for(int k=j+1;k<test_list.size();k++) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                temp.push_back(test_list[k]);\n                std::sort(temp.begin(),temp.end());\n                it = std::find(result.begin(),result.end(),temp[0]+temp[1]+temp[2]);\n                if(it == result.end()) {\n                    result.push_back(temp[0]+temp[1]+temp[2]);\n                }\n                temp.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        long sum = 0;\n        for(auto it2 = it; it2 != test_list.end(); it2++) {\n            sum += *it2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    std::set<long> s;\n    for (int i = 0; i < test_list.size(); i++) {\n        s.insert(test_list[i]);\n    }\n    test_list.assign(s.begin(), s.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                temp.push_back(test_list[k]);\n                result.push_back(std::accumulate(temp.begin(), temp.end(), 0));\n                temp.clear();\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        long sum = 0;\n        for(auto itr2 = itr; itr2 != test_list.end(); itr2++) {\n            sum += *itr2;\n            result.push_back(sum);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator it;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        std::vector<long>::iterator it2;\n        for (it2 = it + 1; it2 != test_list.end(); it2++) {\n            result.push_back(*it + *it2);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        if(it == test_list.begin()) {\n            result.push_back(*it);\n        } else {\n            result.push_back(result.back() + *it);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = test_list.begin();\n    for (; it != test_list.end(); it++) {\n        std::vector<long>::iterator it1 = it + 1;\n        for (; it1 != test_list.end(); it1++) {\n            std::vector<long>::iterator it2 = it1 + 1;\n            for (; it2 != test_list.end(); it2++) {\n                if (*it + *it1 + *it2 == 0) {\n                    result.push_back(*it);\n                    result.push_back(*it1);\n                    result.push_back(*it2);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int size = test_list.size();\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            for (int k = j + 1; k < size; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    // Write your code here\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                    return result;\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> combination;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        combination.push_back(test_list[i]);\n        combinations.push_back(combination);\n        for (int j = i + 1; j < test_list.size(); j++) {\n            combination.push_back(test_list[j]);\n            combinations.push_back(combination);\n            for (int k = j + 1; k < test_list.size(); k++) {\n                combination.push_back(test_list[k]);\n                combinations.push_back(combination);\n                for (int l = k + 1; l < test_list.size(); l++) {\n                    combination.push_back(test_list[l]);\n                    combinations.push_back(combination);\n                    combination.pop_back();\n                }\n                combination.pop_back();\n            }\n            combination.pop_back();\n        }\n        combination.pop_back();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < combinations[i].size(); j++) {\n            sum += combinations[i][j];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it;\n    it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            for(int k = j+1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    long half_sum = sum / 2;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_list[i] == half_sum) {\n            result.push_back(test_list[i]);\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] + test_list[j] == half_sum) {\n                temp.push_back(test_list[i]);\n                temp.push_back(test_list[j]);\n                combinations.push_back(temp);\n                temp.clear();\n            }\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == half_sum) {\n                    temp.push_back(test_list[i]);\n                    temp.push_back(test_list[j]);\n                    temp.push_back(test_list[k]);\n                    combinations.push_back(temp);\n                    temp.clear();\n                }\n            }\n        }\n    }\n    for (long i = 0; i < test_list.size(); i++) {\n        for (long j = i + 1; j < test_list.size(); j++) {\n            for (long k = j + 1; k < test_list.size(); k++) {\n                for (long l = k + 1; l < test_list.size(); l++) {\n                    if",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it1;\n    long sum = 0;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        sum += *it;\n    }\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        for(it1 = it+1; it1 != test_list.end(); it1++) {\n            if(sum - *it - *it1 == *it + *it1) {\n                temp.push_back(*it);\n                temp.push_back(*it1);\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n    }\n    return result;"
  ]
}