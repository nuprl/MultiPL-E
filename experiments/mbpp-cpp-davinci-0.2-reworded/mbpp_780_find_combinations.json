{
  "name": "mbpp_780_find_combinations",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the combinations of sums with tuples in the given tuple vector. https://www.geeksforgeeks.org/cppthon-combinations-of-sum-with-tuples-in-tuple-vector/\nstd::vector<long> find_combinations(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_combinations;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(2, 4), (std::tuple<long, long>)std::make_tuple(6, 7), (std::tuple<long, long>)std::make_tuple(5, 1), (std::tuple<long, long>)std::make_tuple(6, 10)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(8, 11), (std::tuple<long, long>)std::make_tuple(7, 5), (std::tuple<long, long>)std::make_tuple(8, 14), (std::tuple<long, long>)std::make_tuple(11, 8), (std::tuple<long, long>)std::make_tuple(12, 17), (std::tuple<long, long>)std::make_tuple(11, 11)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 5), (std::tuple<long, long>)std::make_tuple(7, 8), (std::tuple<long, long>)std::make_tuple(6, 2), (std::tuple<long, long>)std::make_tuple(7, 11)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(10, 13), (std::tuple<long, long>)std::make_tuple(9, 7), (std::tuple<long, long>)std::make_tuple(10, 16), (std::tuple<long, long>)std::make_tuple(13, 10), (std::tuple<long, long>)std::make_tuple(14, 19), (std::tuple<long, long>)std::make_tuple(13, 13)})));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 6), (std::tuple<long, long>)std::make_tuple(8, 9), (std::tuple<long, long>)std::make_tuple(7, 3), (std::tuple<long, long>)std::make_tuple(8, 12)}))) == (std::vector<long>({(std::tuple<long, long>)std::make_tuple(12, 15), (std::tuple<long, long>)std::make_tuple(11, 9), (std::tuple<long, long>)std::make_tuple(12, 18), (std::tuple<long, long>)std::make_tuple(15, 12), (std::tuple<long, long>)std::make_tuple(16, 21), (std::tuple<long, long>)std::make_tuple(15, 15)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            for (int k = 0; k < temp_result.size(); k++) {\n                result.push_back(temp_result[k]);\n            }\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long>::iterator it;\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    for (int i = 1; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            temp.push_back(test_list[j]);\n        }\n        for (int j = 0; j < test_list.size(); j++) {\n            for (int k = 0; k < temp.size(); k++) {\n                if (temp[k] == test_list[j]) {\n                    temp.erase(temp.begin() + k);\n                    break;\n                }\n            }\n            if (std::accumulate(temp.begin(), temp.end(), 0) == sum - test_list[j]) {\n                result.push_back(test_list[j]);\n                for (int k = 0; k < temp.size(); k++) {\n                    result.push_back(temp[k]);\n                }\n            }\n            temp.clear();\n            for (int k = 0; k < test_list.size(); k++) {\n                temp.push_back(test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    int size = test_list.size();\n    for (int i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n            for (int k = j + 1; k < size; k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    long half_sum = sum / 2;\n    long half_sum_index = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_list[i] > half_sum) {\n            half_sum_index = i;\n            break;\n        }\n    }\n    for (int i = 0; i < half_sum_index; i++) {\n        for (int j = i + 1; j < half_sum_index; j++) {\n            if (test_list[i] + test_list[j] == half_sum) {\n                result.push_back(test_list[i]);\n                result.push_back(test_list[j]);\n                return result;\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<std::vector<long>> combinations;\n    std::vector<long> temp;\n    std::sort(test_list.begin(), test_list.end());\n    int n = test_list.size();\n    for (int i = 0; i < (1 << n); i++) {\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                temp.push_back(test_list[j]);\n            }\n        }\n        combinations.push_back(temp);\n        temp.clear();\n    }\n    for (int i = 0; i < combinations.size(); i++) {\n        long sum = 0;\n        for (int j = 0; j < combinations[i].size(); j++) {\n            sum += combinations[i][j];\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                if (test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            temp.push_back(test_list[i]);\n            temp.push_back(test_list[j]);\n            temp_result = find_combinations(temp);\n            result.insert(result.end(), temp_result.begin(), temp_result.end());\n            result.push_back(test_list[i] + test_list[j]);\n            temp.clear();\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(test_list.begin(), test_list.end());\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                if(test_list[i] + test_list[j] + test_list[k] == 0) {\n                    result.push_back(test_list[i]);\n                    result.push_back(test_list[j]);\n                    result.push_back(test_list[k]);\n                }\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long> temp;\n    std::vector<long> temp_result;\n    std::vector<long> temp_result_2;\n    std::vector<long> temp_result_3;\n    std::vector<long> temp_result_4;\n    std::vector<long> temp_result_5;\n    std::vector<long> temp_result_6;\n    std::vector<long> temp_result_7;\n    std::vector<long> temp_result_8;\n    std::vector<long> temp_result_9;\n    std::vector<long> temp_result_10;\n    std::vector<long> temp_result_11;\n    std::vector<long> temp_result_12;\n    std::vector<long> temp_result_13;\n    std::vector<long> temp_result_14;\n    std::vector<long> temp_result_15;\n    std::vector<long> temp_result_16;\n    std::vector<long> temp_result_17;\n    std::vector<long> temp_result_18;\n    std::vector<long> temp_result_19;\n    std::vector<long> temp_result_20;\n    std::vector<long> temp_result_21;\n    std::vector<long> temp_result_22;\n    std::vector<long> temp_result_23;\n    std::vector<long> temp_result_24;\n    std::vector<long> temp_result_25;\n    std::vector<long> temp_result_26;\n    std::vector<long> temp_result_27;\n    std::vector<long> temp_result_28;\n    std::vector<long> temp_result_29;\n    std::vector<long> temp_result_30;\n    std::vector<long> temp_result_31;\n    std::vector<long> temp_result_32;\n    std::vector<long> temp_result_33;\n    std::vector<long> temp_result_34;\n    std::vector<long> temp_result_35;\n    std::",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            for (int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = test_list.size();\n    for (int i = 0; i < (1 << n); i++) {\n        long sum = 0;\n        for (int j = 0; j < n; j++) {\n            if (i & (1 << j)) {\n                sum += test_list[j];\n            }\n        }\n        result.push_back(sum);\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            result.push_back(test_list[i] + test_list[j]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::vector<long>::iterator itr;\n    for(itr = test_list.begin(); itr != test_list.end(); itr++) {\n        std::vector<long>::iterator itr2;\n        for(itr2 = test_list.begin(); itr2 != test_list.end(); itr2++) {\n            if(itr != itr2) {\n                result.push_back(*itr + *itr2);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            for(int k = j + 1; k < test_list.size(); k++) {\n                result.push_back(test_list[i] + test_list[j] + test_list[k]);\n            }\n        }\n    }\n    return result;"
  ]
}