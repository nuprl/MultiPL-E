{
  "name": "mbpp_141_pancake_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort a vector of elements.\nstd::vector<long> pancake_sort(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = pancake_sort;\n    assert(candidate((std::vector<long>({(long)15, (long)79, (long)25, (long)38, (long)69}))) == (std::vector<long>({(long)15, (long)25, (long)38, (long)69, (long)79})));\n    assert(candidate((std::vector<long>({(long)98, (long)12, (long)54, (long)36, (long)85}))) == (std::vector<long>({(long)12, (long)36, (long)54, (long)85, (long)98})));\n    assert(candidate((std::vector<long>({(long)41, (long)42, (long)32, (long)12, (long)23}))) == (std::vector<long>({(long)12, (long)23, (long)32, (long)41, (long)42})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> res;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                res.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            res.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return res;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if(max_index == n - i - 1) {\n            continue;\n        }\n        if(max_index != 0) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        result.push_back(n - i);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return result;",
    "    std::vector<long> sorted_nums;\n    for (int i = 0; i < nums.size(); i++) {\n        sorted_nums.push_back(i + 1);\n    }\n    std::vector<long> result;\n    while (nums != sorted_nums) {\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] == sorted_nums[i]) {\n                continue;\n            }\n            else {\n                int j = 0;\n                while (nums[j] != sorted_nums[i]) {\n                    j++;\n                }\n                if (j != 0) {\n                    result.push_back(j + 1);\n                    reverse(nums.begin(), nums.begin() + j + 1);\n                }\n                result.push_back(i + 1);\n                reverse(nums.begin(), nums.begin() + i + 1);\n            }\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    std::vector<long> res;\n    int n = nums.size();\n    for(int i = n; i > 0; i--){\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        res.push_back(max_index + 1);\n        res.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return res;",
    "    std::vector<long> res;\n    int n = nums.size();\n    for (int i = n; i > 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i) - nums.begin();\n        if (max_index == i - 1) continue;\n        if (max_index != 0) {\n            res.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        }\n        res.push_back(i);\n        std::reverse(nums.begin(), nums.begin() + i);\n    }\n    return res;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = i;\n        for (int j = 0; j <= i; j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            result.push_back(i + 1);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_idx = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_idx + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    std::vector<long> sorted_nums;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator max_it;\n    long max_val;\n    long max_pos;\n    long i;\n    long j;\n    long temp;\n    for (i = nums.size() - 1; i >= 0; i--) {\n        max_val = nums[0];\n        max_pos = 0;\n        for (j = 0; j <= i; j++) {\n            if (nums[j] > max_val) {\n                max_val = nums[j];\n                max_pos = j;\n            }\n        }\n        if (max_pos == i) {\n            sorted_nums.push_back(max_val);\n            nums.erase(nums.begin() + i);\n        } else {\n            if (max_pos != 0) {\n                std::reverse(nums.begin(), nums.begin() + max_pos + 1);\n                sorted_nums.push_back(max_val);\n                nums.erase(nums.begin() + max_pos);\n            }\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n            sorted_nums.push_back(nums[i]);\n            nums.erase(nums.begin() + i);\n        }\n    }\n    return sorted_nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        if (max_index != n - 1 - i) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(n - i);\n            std::reverse(nums.begin(), nums.begin() + n - i);\n        }\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    int n = nums.size();\n    for(int i = n-1; i >= 0; i--){\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if(max_index != i){\n            if(max_index != 0){\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> sorted;\n    for(int i=0;i<nums.size();i++){\n        sorted.push_back(i+1);\n    }\n    int n=nums.size();\n    while(n>0){\n        int index=0;\n        for(int i=0;i<n;i++){\n            if(nums[i]==sorted[n-1]){\n                index=i;\n                break;\n            }\n        }\n        if(index!=0){\n            std::reverse(nums.begin(),nums.begin()+index+1);\n        }\n        std::reverse(nums.begin(),nums.begin()+n);\n        n--;\n    }\n    return nums;",
    "    std::vector<long> result;\n    int n = nums.size();\n    for (int i = n; i > 1; i--) {\n        int max_index = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + i));\n        if (max_index != i - 1) {\n            if (max_index != 0) {\n                result.push_back(max_index + 1);\n                std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            }\n            result.push_back(i);\n            std::reverse(nums.begin(), nums.begin() + i);\n        }\n    }\n    return result;",
    "    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + i + 1);\n    }\n    return nums;",
    "    for (int i = 0; i < nums.size(); i++) {\n        int max_index = i;\n        for (int j = i; j < nums.size(); j++) {\n            if (nums[j] > nums[max_index]) {\n                max_index = j;\n            }\n        }\n        if (max_index != i) {\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return nums;",
    "    std::vector<long> result;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        int max_index = std::max_element(nums.begin(), nums.begin() + i + 1) - nums.begin();\n        if (max_index != i) {\n            result.push_back(max_index + 1);\n            std::reverse(nums.begin(), nums.begin() + max_index + 1);\n            result.push_back(i + 1);\n            std::reverse(nums.begin(), nums.begin() + i + 1);\n        }\n    }\n    return result;",
    "    int n = nums.size();\n    for(int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;",
    "    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        int max_index = std::max_element(nums.begin(), nums.end()) - nums.begin();\n        std::reverse(nums.begin(), nums.begin() + max_index + 1);\n        std::reverse(nums.begin(), nums.begin() + n - i);\n    }\n    return nums;"
  ]
}