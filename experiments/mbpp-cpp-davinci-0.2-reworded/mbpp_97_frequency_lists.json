{
  "name": "mbpp_97_frequency_lists",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find frequency of each element in a flattened vector of vectors, returned in a map.\nstd::map<long,long> frequency_lists(std::vector<std::vector<long>> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = frequency_lists;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)2}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6, (long)2}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9, (long)5})}))) == (std::map<long,long>({{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12})}))) == (std::map<long,long>({{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)20, (long)30, (long)40, (long)17}), (std::vector<long>)std::vector<long>({(long)18, (long)16, (long)14, (long)13}), (std::vector<long>)std::vector<long>({(long)10, (long)20, (long)30, (long)40})}))) == (std::map<long,long>({{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> freq_map;\n    for(auto i: list1) {\n        for(auto j: i) {\n            freq_map[j]++;\n        }\n    }\n    return freq_map;",
    "    std::map<long,long> freq_map;\n    for(auto list:list1) {\n        for(auto element:list) {\n            freq_map[element]++;\n        }\n    }\n    return freq_map;",
    "  std::map<long,long> freq_map;\n  for(auto i:list1) {\n    for(auto j:i) {\n      freq_map[j]++;\n    }\n  }\n  return freq_map;",
    "    std::map<long,long> freq_map;\n    for(auto list:list1) {\n        for(auto num:list) {\n            freq_map[num]++;\n        }\n    }\n    return freq_map;",
    "  std::map<long,long> freq_map;\n  for(auto i:list1) {\n    for(auto j:i) {\n      freq_map[j]++;\n    }\n  }\n  return freq_map;",
    "    std::map<long,long> frequency;\n    for(auto i:list1) {\n        for(auto j:i) {\n            frequency[j]++;\n        }\n    }\n    return frequency;",
    "  std::map<long,long> freq_map;\n  for(auto list:list1) {\n    for(auto elem:list) {\n      freq_map[elem]++;\n    }\n  }\n  return freq_map;",
    "    std::map<long,long> frequency_map;\n    for (auto list : list1) {\n        for (auto element : list) {\n            frequency_map[element]++;\n        }\n    }\n    return frequency_map;",
    "    std::map<long,long> frequency_map;\n    for(auto list: list1) {\n        for(auto element: list) {\n            if(frequency_map.find(element) == frequency_map.end()) {\n                frequency_map[element] = 1;\n            } else {\n                frequency_map[element] += 1;\n            }\n        }\n    }\n    return frequency_map;",
    "    std::map<long,long> freq;\n    for(auto i:list1) {\n        for(auto j:i) {\n            freq[j]++;\n        }\n    }\n    return freq;",
    "    std::map<long,long> freq_map;\n    for(int i=0;i<list1.size();i++) {\n        for(int j=0;j<list1[i].size();j++) {\n            if(freq_map.find(list1[i][j])==freq_map.end()) {\n                freq_map[list1[i][j]]=1;\n            }\n            else {\n                freq_map[list1[i][j]]++;\n            }\n        }\n    }\n    return freq_map;",
    "    std::map<long,long> frequency;\n    for(auto i:list1) {\n        for(auto j:i) {\n            frequency[j]++;\n        }\n    }\n    return frequency;",
    "    std::map<long,long> result;\n    for (auto i : list1) {\n        for (auto j : i) {\n            result[j]++;\n        }\n    }\n    return result;",
    "    std::map<long,long> result;\n    for(auto i: list1) {\n        for(auto j: i) {\n            result[j]++;\n        }\n    }\n    return result;",
    "    std::map<long,long> freq_map;\n    for(auto list:list1) {\n        for(auto ele:list) {\n            freq_map[ele]++;\n        }\n    }\n    return freq_map;",
    "    std::map<long,long> freq_map;\n    for(auto i:list1) {\n        for(auto j:i) {\n            freq_map[j]++;\n        }\n    }\n    return freq_map;",
    "    std::map<long,long> freq;\n    for(auto i:list1) {\n        for(auto j:i) {\n            freq[j]++;\n        }\n    }\n    return freq;",
    "    std::map<long,long> frequency_map;\n    for (auto list : list1) {\n        for (auto element : list) {\n            frequency_map[element]++;\n        }\n    }\n    return frequency_map;",
    "  std::map<long,long> frequency;\n  for(auto itr=list1.begin();itr!=list1.end();itr++) {\n    for(auto itr2=itr->begin();itr2!=itr->end();itr2++) {\n      frequency[*itr2]++;\n    }\n  }\n  return frequency;",
    "    std::map<long,long> freq_map;\n    for(auto i:list1) {\n        for(auto j:i) {\n            freq_map[j]++;\n        }\n    }\n    return freq_map;"
  ]
}