{
  "name": "mbpp_116_tuple_to_int",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a given tuple of positive integers into a single integer.\nlong tuple_to_int(long nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_to_int;\n    assert(candidate(std::make_tuple(1, 2, 3)) == (123));\n    assert(candidate(std::make_tuple(4, 5, 6)) == (456));\n    assert(candidate(std::make_tuple(5, 6, 7)) == (567));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long result = 0;\n    long multiplier = 1;\n    while (nums > 0) {\n        result += (nums % 10) * multiplier;\n        multiplier *= 10;\n        nums /= 10;\n    }\n    return result;",
    "    long res = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        res = res * 10 + nums[i];\n    }\n    return res;",
    "    long result = 0;\n    while (nums) {\n        result = result * 10 + nums % 10;\n        nums /= 10;\n    }\n    return result;",
    "    long res = 0;\n    while (nums) {\n        res = res * 10 + nums % 10;\n        nums /= 10;\n    }\n    return res;",
    "    int i = 0;\n    long result = 0;\n    while (nums) {\n        result += (nums % 10) * pow(10, i);\n        nums /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] * pow(10, i);\n    }\n    return result;",
    "    long res = 0;\n    long i = 0;\n    while (nums) {\n        res += (nums % 10) * pow(10, i);\n        i++;\n        nums /= 10;\n    }\n    return res;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    int i = 0;\n    while (nums) {\n        result += (nums % 10) * pow(10, i);\n        nums /= 10;\n        i++;\n    }\n    return result;",
    "    long result = 0;\n    long temp = 0;\n    while (nums > 0) {\n        temp = nums % 10;\n        result = result * 10 + temp;\n        nums /= 10;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result += nums[i] * pow(10, i);\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    long result = 0;\n    while(nums) {\n        result = result * 10 + nums % 10;\n        nums /= 10;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        result = result * 10 + nums[i];\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << nums;\n    std::string str = ss.str();\n    long result = 0;\n    for (int i = 0; i < str.length(); i++) {\n        result = result * 10 + (str[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    long multiplier = 1;\n    while (nums > 0) {\n        result += (nums % 10) * multiplier;\n        multiplier *= 10;\n        nums /= 10;\n    }\n    return result;"
  ]
}