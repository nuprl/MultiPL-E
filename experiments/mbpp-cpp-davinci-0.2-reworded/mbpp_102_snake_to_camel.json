{
  "name": "mbpp_102_snake_to_camel",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert a snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"python_program\")) == (\"PythonProgram\"));\n    assert(candidate((\"python_language\")) == (\"PythonLanguage\"));\n    assert(candidate((\"programming_language\")) == (\"ProgrammingLanguage\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            i++;\n            result += toupper(word[i]);\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tword[i + 1] = toupper(word[i + 1]);\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;",
    "\tstd::string result;\n\tfor (int i = 0; i < word.length(); i++) {\n\t\tif (word[i] == '_') {\n\t\t\tresult += toupper(word[i + 1]);\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tresult += word[i];\n\t\t}\n\t}\n\treturn result;",
    "    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;"
  ]
}