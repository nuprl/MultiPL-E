{
  "name": "mbpp_597_find_kth",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find kth element from the given two sorted vectors.\nlong find_kth(std::vector<long> arr1, std::vector<long> arr2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_kth;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)6, (long)7, (long)9})), (std::vector<long>({(long)1, (long)4, (long)8, (long)10})), (5)) == (6));\n    assert(candidate((std::vector<long>({(long)100, (long)112, (long)256, (long)349, (long)770})), (std::vector<long>({(long)72, (long)86, (long)113, (long)119, (long)265, (long)445, (long)892})), (7)) == (256));\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)7, (long)8, (long)10})), (std::vector<long>({(long)2, (long)5, (long)9, (long)11})), (6)) == (8));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()){\n        if(arr1[i] < arr2[j]){\n            count++;\n            if(count == k){\n                return arr1[i];\n            }\n            i++;\n        }\n        else{\n            count++;\n            if(count == k){\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.size()){\n        count++;\n        if(count == k){\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.size()){\n        count++;\n        if(count == k){\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k-1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k/2);\n    long j = std::min(arr2.size(), k/2);\n    if (arr1[i-1] > arr2[j-1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin()+j, arr2.end()), k-j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin()+i, arr1.end()), arr2, k-i);\n    }",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        std::vector<long> new_arr(arr2.begin() + j, arr2.end());\n        return find_kth(arr1, new_arr, k - j);\n    } else {\n        std::vector<long> new_arr(arr1.begin() + i, arr1.end());\n        return find_kth(new_arr, arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size(), n2 = arr2.size();\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) return arr1[i];\n            i++;\n        } else {\n            if(i + j == k) return arr2[j];\n            j++;\n        }\n    }\n    if(i == n1) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n1) {\n        return arr1[k - j - 1];\n    }\n    if (j < n2) {\n        return arr2[k - i - 1];\n    }\n    return -1;",
    "    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    while (k > 1 && i < arr1.size()) {\n        i++;\n        k--;\n    }\n    while (k > 1 && j < arr2.size()) {\n        j++;\n        k--;\n    }\n    if (i < arr1.size()) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (n1 + n2 < k) {\n        return -1;\n    }\n    if (n1 > n2) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (n1 == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(n1, k/2);\n    long j = std::min(n2, k/2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin() + j, arr2.end()), k - j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin() + i, arr1.end()), arr2, k - i);\n    }",
    "    assert(k <= arr1.size() + arr2.size());\n    int i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j - 1];\n    }\n    if (j < m) {\n        return arr2[k - i - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size() && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if(k == 0) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if(i == arr1.size()) {\n        return arr2[j + k - 1];\n    }\n    return arr1[i + k - 1];",
    "    // Write your code here\n    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1)\n                return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j == k - 1)\n                return arr2[j];\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i - 1];\n    }\n    else {\n        return arr1[k - j - 1];\n    }",
    "    // Write your code here\n    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == n) {\n        return arr2[j + k];\n    }\n    if (j == m) {\n        return arr1[i + k];\n    }\n    if (arr1[i] < arr2[j]) {\n        return arr1[i];\n    }\n    return arr2[j];",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - m];\n    } else {\n        return arr2[k - n];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == n) {\n        return arr2[k - n];\n    } else {\n        return arr1[k - m];\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size(), n2 = arr2.size();\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n1) {\n        return arr1[k - j - 1];\n    }\n    return arr2[k - i - 1];",
    "    assert(arr1.size() + arr2.size() >= k);\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size() && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 0) {\n        return std::min(arr1[i], arr2[j]);\n    } else if (i == arr1.size()) {\n        return arr2[j + k - 1];\n    } else {\n        return arr1[i + k - 1];\n    }",
    "    // Write your code here\n    long i=0,j=0;\n    long n1=arr1.size();\n    long n2=arr2.size();\n    long count=0;\n    long ans;\n    while(i<n1&&j<n2){\n        if(arr1[i]<arr2[j]){\n            ans=arr1[i];\n            i++;\n        }\n        else{\n            ans=arr2[j];\n            j++;\n        }\n        count++;\n        if(count==k){\n            break;\n        }\n    }\n    while(i<n1){\n        ans=arr1[i];\n        i++;\n        count++;\n        if(count==k){\n            break;\n        }\n    }\n    while(j<n2){\n        ans=arr2[j];\n        j++;\n        count++;\n        if(count==k){\n            break;\n        }\n    }\n    return ans;",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    if (arr1.size() == 0) {\n        return arr2[k];\n    }\n    if (arr2.size() == 0) {\n        return arr1[k];\n    }\n    if (k == 0) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(k/2, (long)arr1.size()-1);\n    long j = std::min(k/2, (long)arr2.size()-1);\n    if (arr1[i] < arr2[j]) {\n        std::vector<long> new_arr1(arr1.begin()+i+1, arr1.end());\n        return find_kth(new_arr1, arr2, k-i-1);\n    } else {\n        std::vector<long> new_arr2(arr2.begin()+j+1, arr2.end());\n        return find_kth(arr1, new_arr2, k-j-1);\n    }",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (n1 > n2) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (n1 == 0) {\n        return arr2[k-1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(n1, k/2);\n    long j = std::min(n2, k/2);\n    if (arr1[i-1] > arr2[j-1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin()+j, arr2.end()), k-j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin()+i, arr1.end()), arr2, k-i);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 0) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if (i == n) {\n        return arr2[j + k - 1];\n    }\n    if (j == m) {\n        return arr1[i + k - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    // Write your code here\n    long i=0,j=0;\n    long n1=arr1.size();\n    long n2=arr2.size();\n    long count=0;\n    while(i<n1 && j<n2)\n    {\n        if(arr1[i]<arr2[j])\n        {\n            count++;\n            if(count==k)\n            {\n                return arr1[i];\n            }\n            i++;\n        }\n        else\n        {\n            count++;\n            if(count==k)\n            {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i<n1)\n    {\n        count++;\n        if(count==k)\n        {\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j<n2)\n    {\n        count++;\n        if(count==k)\n        {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < n) {\n        if(i + j + 1 == k) {\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < m) {\n        if(i + j + 1 == k) {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j - 1];\n    } else {\n        return arr2[k - i - 1];\n    }",
    "    // Write your code here\n    long i=0,j=0;\n    long n=arr1.size();\n    long m=arr2.size();\n    long count=0;\n    long ans;\n    while(i<n && j<m && count<k){\n        if(arr1[i]<arr2[j]){\n            ans=arr1[i];\n            i++;\n        }\n        else{\n            ans=arr2[j];\n            j++;\n        }\n        count++;\n    }\n    while(i<n && count<k){\n        ans=arr1[i];\n        i++;\n        count++;\n    }\n    while(j<m && count<k){\n        ans=arr2[j];\n        j++;\n        count++;\n    }\n    return ans;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k - m - 1];\n    }\n    if(j < m) {\n        return arr2[k - n - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2 && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == n1) {\n        return arr2[j + k];\n    } else if (j == n2) {\n        return arr1[i + k];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j];\n    } else {\n        return arr2[k - i];\n    }",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long m = arr1.size();\n    long n = arr2.size();\n    while (i < m && j < n) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < m) {\n        if (count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < n) {\n        if (count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin() + j, arr2.end()), k - j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin() + i, arr1.end()), arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    assert(k <= n1 + n2);\n    long i = 0, j = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n1) {\n        return arr1[k - j - 1];\n    }\n    return arr2[k - i - 1];",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i+j == k-1) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i+j == k-1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k-i-1];\n    }\n    else {\n        return arr1[k-j-1];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.size()) {\n        return arr1[i + k - j];\n    } else {\n        return arr2[j + k - i];\n    }",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    long ans = 0;\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            ans = arr1[i];\n            i++;\n        } else {\n            ans = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k) {\n            return ans;\n        }\n    }\n    while(i < n) {\n        ans = arr1[i];\n        i++;\n        count++;\n        if(count == k) {\n            return ans;\n        }\n    }\n    while(j < m) {\n        ans = arr2[j];\n        j++;\n        count++;\n        if(count == k) {\n            return ans;\n        }\n    }\n    return ans;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i+j == k-1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i+j == k-1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k-j-1];\n    }\n    if(j < m) {\n        return arr2[k-i-1];\n    }\n    return -1;",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    assert(n1 + n2 >= k);\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n1) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < n2) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    long count = 0;\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < m) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - m];\n    } else {\n        return arr2[k - n];\n    }",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n1) {\n        return arr1[k - j - 1];\n    }\n    return arr2[k - i - 1];",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j + k - 1];\n    }\n    if (j == arr2.size()) {\n        return arr1[i + k - 1];\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (k > n1 + n2) {\n        return -1;\n    }\n    long i = 0, j = 0;\n    long count = 0;\n    while (count < k) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    if (arr1[i] < arr2[j]) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    // Write your code here\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    assert(k <= arr1.size() + arr2.size());\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k-1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k/2);\n    long j = std::min(arr2.size(), k/2);\n    if (arr1[i-1] > arr2[j-1]) {\n        std::vector<long> new_arr(arr2.begin()+j, arr2.end());\n        return find_kth(arr1, new_arr, k-j);\n    } else {\n        std::vector<long> new_arr(arr1.begin()+i, arr1.end());\n        return find_kth(new_arr, arr2, k-i);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) return arr1[i];\n            i++;\n        } else {\n            if (i + j == k) return arr2[j];\n            j++;\n        }\n    }\n    if (i == n) return arr2[k - n];\n    else return arr1[k - m];",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i - 1];\n    } else {\n        return arr1[k - j - 1];\n    }",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (n1 == 0) {\n        return arr2[k];\n    }\n    if (n2 == 0) {\n        return arr1[k];\n    }\n    if (k == 0) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    if (arr1[n1/2] >= arr2[n2/2]) {\n        if (n1/2 + n2/2 + 1 >= k) {\n            return find_kth(std::vector<long>(arr1.begin(), arr1.begin() + n1/2), arr2, k);\n        } else {\n            return find_kth(arr1, std::vector<long>(arr2.begin() + n2/2 + 1, arr2.end()), k - n2/2 - 1);\n        }\n    } else {\n        if (n1/2 + n2/2 + 1 >= k) {\n            return find_kth(arr1, std::vector<long>(arr2.begin(), arr2.begin() + n2/2), k);\n        } else {\n            return find_kth(std::vector<long>(arr1.begin() + n1/2 + 1, arr1.end()), arr2, k - n1/2 - 1);\n        }\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k)\n                return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j + 1 == k)\n                return arr2[j];\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    }\n    else {\n        return arr1[k - m];\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while (i < n1) {\n        if (i + j == k - 1) {\n            return arr1[i];\n        }\n        i++;\n    }\n    while (j < n2) {\n        if (i + j == k - 1) {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long n = arr1.size();\n    long m = arr2.size();\n    assert(k <= n + m);\n    long i = 0, j = 0;\n    while (k > 1 && i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 1) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if (i == n) {\n        return arr2[j + k - 1];\n    }\n    return arr1[i + k - 1];",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    }\n    else {\n        return arr1[k - m];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j == k) return arr2[j];\n            j++;\n        }\n    }\n    if(i == n) return arr2[k - i];\n    else return arr1[k - j];",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j + 1 == k) return arr2[j];\n            j++;\n        }\n    }\n    if(i == n) return arr2[k - n];\n    else return arr1[k - m];",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    }\n    return arr1[k - j];",
    "    long i = 0, j = 0, count = 0;\n    while(count < k) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    if(arr1[i] < arr2[j]) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j - 1];\n    }\n    if (j < m) {\n        return arr2[k - i - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (k > (n1 + n2)) {\n        return -1;\n    }\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n1) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < n2) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(k == 1) {\n                return arr1[i];\n            }\n            i++;\n            k--;\n        } else {\n            if(k == 1) {\n                return arr2[j];\n            }\n            j++;\n            k--;\n        }\n    }\n    while(i < arr1.size()) {\n        if(k == 1) {\n            return arr1[i];\n        }\n        i++;\n        k--;\n    }\n    while(j < arr2.size()) {\n        if(k == 1) {\n            return arr2[j];\n        }\n        j++;\n        k--;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n1 = arr1.size(), n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n1) {\n        return arr1[k - j - 1];\n    } else {\n        return arr2[k - i - 1];\n    }",
    "    long i = 0;\n    long j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    }\n    return arr1[k - m];",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    }\n    return arr1[k - m];",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (k > 0) {\n        if (i < n && j < m) {\n            if (arr1[i] < arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        } else if (i < n) {\n            i++;\n        } else if (j < m) {\n            j++;\n        }\n        k--;\n    }\n    if (i < n && j < m) {\n        return std::min(arr1[i], arr2[j]);\n    } else if (i < n) {\n        return arr1[i];\n    } else if (j < m) {\n        return arr2[j];\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < m) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    }\n    return arr1[k - j];",
    "    // Write your code here\n    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    // Write your code here\n    long i=0,j=0;\n    long n1=arr1.size();\n    long n2=arr2.size();\n    long count=0;\n    long ans=0;\n    while(i<n1 && j<n2)\n    {\n        if(arr1[i]<arr2[j])\n        {\n            ans=arr1[i];\n            i++;\n        }\n        else\n        {\n            ans=arr2[j];\n            j++;\n        }\n        count++;\n        if(count==k)\n        {\n            return ans;\n        }\n    }\n    while(i<n1)\n    {\n        ans=arr1[i];\n        i++;\n        count++;\n        if(count==k)\n        {\n            return ans;\n        }\n    }\n    while(j<n2)\n    {\n        ans=arr2[j];\n        j++;\n        count++;\n        if(count==k)\n        {\n            return ans;\n        }\n    }\n    return ans;",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i - 1];\n    } else {\n        return arr1[k - j - 1];\n    }",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k-1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k/2);\n    long j = std::min(arr2.size(), k/2);\n    if (arr1[i-1] > arr2[j-1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin()+j, arr2.end()), k-j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin()+i, arr1.end()), arr2, k-i);\n    }",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j];\n    } else {\n        return arr2[k - i];\n    }",
    "    long i=0, j=0;\n    while(k>0) {\n        if(arr1[i]<arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n1) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < n2) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long count = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(count < k) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n            count++;\n        }\n        else {\n            j++;\n            count++;\n        }\n    }\n    if(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            return arr1[i];\n        }\n        else {\n            return arr2[j];\n        }\n    }\n    else if(i < n) {\n        return arr1[i];\n    }\n    else {\n        return arr2[j];\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size(), n2 = arr2.size();\n    long count = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n1) {\n        if (count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < n2) {\n        if (count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < arr1.size()) {\n        return arr1[k - j];\n    }\n    return arr2[k - i];",
    "    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j+k-1];\n    } else if (j == arr2.size()) {\n        return arr1[i+k-1];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k - j - 1];\n    }\n    else {\n        return arr2[k - i - 1];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - i];\n    }\n    else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(count < k) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    if(arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if(arr1.size() == 0) {\n        return arr2[k-1];\n    }\n    if(k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k/2);\n    long j = std::min(arr2.size(), k/2);\n    if(arr1[i-1] > arr2[j-1]) {\n        std::vector<long> new_arr(arr2.begin()+j, arr2.end());\n        return find_kth(arr1, new_arr, k-j);\n    } else {\n        std::vector<long> new_arr(arr1.begin()+i, arr1.end());\n        return find_kth(new_arr, arr2, k-i);\n    }",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long arr1_size = arr1.size();\n    long arr2_size = arr2.size();\n    while (i < arr1_size && j < arr2_size) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < arr1_size) {\n        if (count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < arr2_size) {\n        if (count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long result = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            result = arr1[i];\n            i++;\n        } else {\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if (count == k) {\n            break;\n        }\n    }\n    if (i == arr1.size()) {\n        while (j < arr2.size()) {\n            result = arr2[j];\n            j++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n    }\n    if (j == arr2.size()) {\n        while (i < arr1.size()) {\n            result = arr1[i];\n            i++;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n    }\n    return result;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long result = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            result = arr1[i];\n            i++;\n        } else {\n            result = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k) {\n            break;\n        }\n    }\n    while(i < arr1.size()) {\n        result = arr1[i];\n        i++;\n        count++;\n        if(count == k) {\n            break;\n        }\n    }\n    while(j < arr2.size()) {\n        result = arr2[j];\n        j++;\n        count++;\n        if(count == k) {\n            break;\n        }\n    }\n    return result;",
    "    assert(k > 0);\n    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0, count = 0;\n    while (count < k) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    // Write your code here\n    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    long count = 0;\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < m) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (n1 == 0) {\n        return arr2[k];\n    }\n    if (n2 == 0) {\n        return arr1[k];\n    }\n    if (k == 0) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(k/2, n1-1);\n    long j = std::min(k/2, n2-1);\n    if (arr1[i] > arr2[j]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin()+j+1, arr2.end()), k-j-1);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin()+i+1, arr1.end()), arr2, k-i-1);\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while(i < n1 && j < n2) {\n        if(arr1[i] <= arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n1) {\n        return arr2[k - i - 1];\n    }\n    else {\n        return arr1[k - j - 1];\n    }",
    "    assert(k > 0);\n    assert(k <= arr1.size() + arr2.size());\n    int i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j + k - 1];\n    }\n    if (j == arr2.size()) {\n        return arr1[i + k - 1];\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    if (i < n) {\n        return arr1[i + k - count - 1];\n    }\n    return arr2[j + k - count - 1];",
    "    // Write your code here\n    int i = 0, j = 0;\n    int n = arr1.size();\n    int m = arr2.size();\n    while(i < n && j < m && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if(i == n) {\n        return arr2[j + k];\n    } else if(j == m) {\n        return arr1[i + k];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size(), n2 = arr2.size();\n    long count = 0;\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n1) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < n2) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k - j];\n    } else {\n        return arr2[k - i];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i+j == k-1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i+j == k-1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k-i-1];\n    } else {\n        return arr1[k-j-1];\n    }",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "\tlong i = 0, j = 0;\n\tlong n = arr1.size(), m = arr2.size();\n\twhile (i < n && j < m) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tif (i + j == k) {\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tif (i + j == k) {\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i < n) {\n\t\treturn arr1[k - j];\n\t}\n\telse {\n\t\treturn arr2[k - i];\n\t}",
    "    long i = 0, j = 0;\n    long count = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < m) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1)\n                return arr1[i];\n            i++;\n        } else {\n            if (i + j == k - 1)\n                return arr2[j];\n            j++;\n        }\n    }\n    if (i < n) {\n        if (i + j == k - 1)\n            return arr1[i];\n        i++;\n    }\n    if (j < m) {\n        if (i + j == k - 1)\n            return arr2[j];\n        j++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    } else {\n        return arr1[k - m];\n    }",
    "    assert(k >= 1);\n    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    long count = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < arr1.size()) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < arr2.size()) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    int i = 0, j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    assert(k > 0);\n    assert(k <= arr1.size() + arr2.size());\n    long i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 1) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if (i == arr1.size()) {\n        return arr2[j + k - 1];\n    }\n    return arr1[i + k - 1];",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < arr1.size()) {\n        if (count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < arr2.size()) {\n        if (count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin() + j, arr2.end()), k - j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin() + i, arr1.end()), arr2, k - i);\n    }",
    "    // Write your code here\n    int i = 0;\n    int j = 0;\n    int n1 = arr1.size();\n    int n2 = arr2.size();\n    while(i < n1 && j < n2)\n    {\n        if(arr1[i] < arr2[j])\n        {\n            if(i + j + 1 == k)\n            {\n                return arr1[i];\n            }\n            i++;\n        }\n        else\n        {\n            if(i + j + 1 == k)\n            {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < n1)\n    {\n        if(i + j + 1 == k)\n        {\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < n2)\n    {\n        if(i + j + 1 == k)\n        {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            count++;\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            count++;\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while(i < arr1.size()) {\n        count++;\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n    }\n    while(j < arr2.size()) {\n        count++;\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long n = arr1.size();\n    long m = arr2.size();\n    if (k > n + m) {\n        return -1;\n    }\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while (k > 1) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (arr1[i] < arr2[j]) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    long n = arr1.size();\n    long m = arr2.size();\n    if (k > (n + m)) {\n        return -1;\n    }\n    long i = 0, j = 0;\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j];\n    } else {\n        return arr2[k - i];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size() && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if(k == 0) {\n        if(i < arr1.size() && j < arr2.size()) {\n            return std::min(arr1[i], arr2[j]);\n        } else if(i < arr1.size()) {\n            return arr1[i];\n        } else {\n            return arr2[j];\n        }\n    } else {\n        if(i < arr1.size()) {\n            return arr1[i + k - 1];\n        } else {\n            return arr2[j + k - 1];\n        }\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - j - 1];\n    } else {\n        return arr2[k - i - 1];\n    }",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (k > (n1 + n2)) {\n        return -1;\n    }\n    long i = 0, j = 0;\n    long count = 0;\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n1) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < n2) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    } else {\n        return arr1[k - m];\n    }",
    "    assert(k > 0);\n    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    while(k--) {\n        if(i < arr1.size() && j < arr2.size()) {\n            if(arr1[i] < arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        } else if(i < arr1.size()) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    if(i < arr1.size() && j < arr2.size()) {\n        return std::min(arr1[i], arr2[j]);\n    } else if(i < arr1.size()) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        std::vector<long> new_arr(arr2.begin() + j, arr2.end());\n        return find_kth(arr1, new_arr, k - j);\n    } else {\n        std::vector<long> new_arr(arr1.begin() + i, arr1.end());\n        return find_kth(new_arr, arr2, k - i);\n    }",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if(i == n) {\n        return arr2[j + k];\n    } else if(j == m) {\n        return arr1[i + k];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    if (n1 == 0) {\n        return arr2[k];\n    }\n    if (n2 == 0) {\n        return arr1[k];\n    }\n    if (k == 0) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(n1-1, k/2);\n    long j = std::min(n2-1, k/2);\n    if (arr1[i] > arr2[j]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin()+j+1, arr2.end()), k-j-1);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin()+i+1, arr1.end()), arr2, k-i-1);\n    }",
    "  if (arr1.size() == 0) {\n    return arr2[k];\n  }\n  if (arr2.size() == 0) {\n    return arr1[k];\n  }\n  if (k == 0) {\n    return std::min(arr1[0], arr2[0]);\n  }\n  long mid1 = arr1.size() / 2;\n  long mid2 = arr2.size() / 2;\n  if (mid1 + mid2 < k) {\n    if (arr1[mid1] > arr2[mid2]) {\n      std::vector<long> new_arr(arr2.begin() + mid2 + 1, arr2.end());\n      return find_kth(arr1, new_arr, k - mid2 - 1);\n    } else {\n      std::vector<long> new_arr(arr1.begin() + mid1 + 1, arr1.end());\n      return find_kth(new_arr, arr2, k - mid1 - 1);\n    }\n  } else {\n    if (arr1[mid1] > arr2[mid2]) {\n      std::vector<long> new_arr(arr1.begin(), arr1.begin() + mid1);\n      return find_kth(new_arr, arr2, k);\n    } else {\n      std::vector<long> new_arr(arr2.begin(), arr2.begin() + mid2);\n      return find_kth(arr1, new_arr, k);\n    }\n  }",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin() + j, arr2.end()), k - j);\n    } else {\n        return find_kth(std::vector<long>(arr1.begin() + i, arr1.end()), arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long n1 = arr1.size();\n    long n2 = arr2.size();\n    long i = 0, j = 0;\n    while(i < n1 && j < n2 && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if(k == 0) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if(i < n1) {\n        return arr1[i + k - 1];\n    }\n    if(j < n2) {\n        return arr2[j + k - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size() && k > 0) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    while(i < arr1.size() && k > 0) {\n        i++;\n        k--;\n    }\n    while(j < arr2.size() && k > 0) {\n        j++;\n        k--;\n    }\n    if(i < arr1.size()) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(k / 2, (long)arr1.size());\n    long j = std::min(k / 2, (long)arr2.size());\n    if (arr1[i - 1] > arr2[j - 1]) {\n        return find_kth(arr1, std::vector<long>(arr2.begin() + j, arr2.end()), k - j);\n    }\n    else {\n        return find_kth(std::vector<long>(arr1.begin() + i, arr1.end()), arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k - j - 1];\n    }\n    else {\n        return arr2[k - i - 1];\n    }",
    "    int i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) return arr1[i];\n            i++;\n        } else {\n            if (i + j == k) return arr2[j];\n            j++;\n        }\n    }\n    if (i == arr1.size()) return arr2[k - i];\n    return arr1[k - j];",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < arr1.size()) {\n        if (count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < arr2.size()) {\n        if (count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    while (i < n1) {\n        if (i + j == k - 1) {\n            return arr1[i];\n        }\n        i++;\n    }\n    while (j < n2) {\n        if (i + j == k - 1) {\n            return arr2[j];\n        }\n        j++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n1) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < n2) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (k > 0 && i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 0) {\n        if (i < n && j < m) {\n            return std::min(arr1[i], arr2[j]);\n        } else if (i < n) {\n            return arr1[i];\n        } else {\n            return arr2[j];\n        }\n    }\n    if (i < n) {\n        return arr1[i + k - 1];\n    } else {\n        return arr2[j + k - 1];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k)\n                return arr1[i];\n            i++;\n        } else {\n            if (i + j == k)\n                return arr2[j];\n            j++;\n        }\n    }\n    if (i == n) {\n        return arr2[k - n];\n    } else {\n        return arr1[k - m];\n    }",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        std::vector<long> new_arr(arr2.begin() + j, arr2.end());\n        return find_kth(arr1, new_arr, k - j);\n    } else {\n        std::vector<long> new_arr(arr1.begin() + i, arr1.end());\n        return find_kth(new_arr, arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    while (k > 0) {\n        if (i == arr1.size()) {\n            return arr2[j + k - 1];\n        }\n        if (j == arr2.size()) {\n            return arr1[i + k - 1];\n        }\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0, count = 0;\n    while (count < k) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == n) {\n        return arr2[k - n];\n    }\n    if (j == m) {\n        return arr1[k - m];\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j + 1 == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i < n) {\n        return arr1[k - m - 1];\n    } else {\n        return arr2[k - n - 1];\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (k == 0) {\n        return std::min(arr1[i], arr2[j]);\n    }\n    if (i == n) {\n        return arr2[j + k - 1];\n    }\n    if (j == m) {\n        return arr1[i + k - 1];\n    }\n    return -1;",
    "    assert(arr1.size() + arr2.size() >= k);\n    long i = 0, j = 0;\n    while (k > 1 && i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j + k - 1];\n    } else if (j == arr2.size()) {\n        return arr1[i + k - 1];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == n) {\n        return arr2[j + k];\n    }\n    if (j == m) {\n        return arr1[i + k];\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i == arr1.size()) {\n        return arr2[k - i - 1];\n    } else {\n        return arr1[k - j - 1];\n    }",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    while (i < n1 && j < n2) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n1) {\n        if (i + j == k - 1) {\n            return arr1[i];\n        }\n        return arr1[k - j - 1];\n    }\n    if (j < n2) {\n        if (i + j == k - 1) {\n            return arr2[j];\n        }\n        return arr2[k - i - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    while(k--) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long n = arr1.size();\n    long m = arr2.size();\n    if (k > (n + m)) {\n        return -1;\n    }\n    long i = 0, j = 0;\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "\tlong i = 0, j = 0;\n\twhile (i < arr1.size() && j < arr2.size()) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tif (i + j + 1 == k) {\n\t\t\t\treturn arr1[i];\n\t\t\t}\n\t\t\ti++;\n\t\t} else {\n\t\t\tif (i + j + 1 == k) {\n\t\t\t\treturn arr2[j];\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\tif (i == arr1.size()) {\n\t\treturn arr2[k - i - 1];\n\t} else {\n\t\treturn arr1[k - j - 1];\n\t}",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (k > 0 && i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == n) {\n        return arr2[j + k];\n    }\n    if (j == m) {\n        return arr1[i + k];\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k) return arr1[i];\n            i++;\n        } else {\n            if (i + j == k) return arr2[j];\n            j++;\n        }\n    }\n    while (i < n) {\n        if (i + j == k) return arr1[i];\n        i++;\n    }\n    while (j < m) {\n        if (i + j == k) return arr2[j];\n        j++;\n    }\n    return -1;",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    long prev;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            prev = arr1[i];\n            i++;\n        } else {\n            prev = arr2[j];\n            j++;\n        }\n        count++;\n        if(count == k) {\n            return prev;\n        }\n    }\n    while(i < arr1.size()) {\n        prev = arr1[i];\n        i++;\n        count++;\n        if(count == k) {\n            return prev;\n        }\n    }\n    while(j < arr2.size()) {\n        prev = arr2[j];\n        j++;\n        count++;\n        if(count == k) {\n            return prev;\n        }\n    }\n    return -1;",
    "    assert(k <= arr1.size() + arr2.size());\n    long i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(k--) {\n        if(i == n) {\n            return arr2[j + k];\n        }\n        if(j == m) {\n            return arr1[i + k];\n        }\n        if(arr1[i] < arr2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return -1;",
    "    long n = arr1.size();\n    long m = arr2.size();\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if (count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while (i < n) {\n        if (count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while (j < m) {\n        if (count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    // Write your code here\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        }\n        else {\n            if(count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < arr1.size()) {\n        if(count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < arr2.size()) {\n        if(count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - m - 1];\n    }\n    if (j < m) {\n        return arr2[k - n - 1];\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while (i < n && j < m) {\n        if (arr1[i] < arr2[j]) {\n            if (i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if (i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if (i < n) {\n        return arr1[k - m - 1];\n    }\n    return arr2[k - n - 1];",
    "    long i = 0, j = 0;\n    while (i < arr1.size() && j < arr2.size() && k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j + k];\n    } else if (j == arr2.size()) {\n        return arr1[i + k];\n    } else {\n        return std::min(arr1[i], arr2[j]);\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size();\n    long m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k - 1) {\n                return arr1[i];\n            }\n            i++;\n        }\n        else {\n            if(i + j == k - 1) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n - 1];\n    }\n    else {\n        return arr1[k - m - 1];\n    }",
    "    if (arr1.size() == 0) {\n        return arr2[k];\n    }\n    if (arr2.size() == 0) {\n        return arr1[k];\n    }\n    if (k == 0) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long mid1 = arr1.size() / 2;\n    long mid2 = arr2.size() / 2;\n    if (mid1 + mid2 < k) {\n        if (arr1[mid1] > arr2[mid2]) {\n            std::vector<long> new_arr2(arr2.begin() + mid2 + 1, arr2.end());\n            return find_kth(arr1, new_arr2, k - mid2 - 1);\n        } else {\n            std::vector<long> new_arr1(arr1.begin() + mid1 + 1, arr1.end());\n            return find_kth(new_arr1, arr2, k - mid1 - 1);\n        }\n    } else {\n        if (arr1[mid1] > arr2[mid2]) {\n            std::vector<long> new_arr1(arr1.begin(), arr1.begin() + mid1);\n            return find_kth(new_arr1, arr2, k);\n        } else {\n            std::vector<long> new_arr2(arr2.begin(), arr2.begin() + mid2);\n            return find_kth(arr1, new_arr2, k);\n        }\n    }",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k)\n                return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j + 1 == k)\n                return arr2[j];\n            j++;\n        }\n    }\n    if(i == n) {\n        return arr2[k - n];\n    }\n    else {\n        return arr1[k - m];\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j == k) {\n                return arr1[i];\n            }\n            i++;\n        } else {\n            if(i + j == k) {\n                return arr2[j];\n            }\n            j++;\n        }\n    }\n    if(i == arr1.size()) {\n        return arr2[k - i];\n    } else {\n        return arr1[k - j];\n    }",
    "    long i = 0;\n    long j = 0;\n    long count = 0;\n    while(count < k) {\n        if(arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        count++;\n    }\n    if(arr1[i] < arr2[j]) {\n        return arr1[i];\n    } else {\n        return arr2[j];\n    }",
    "    if (arr1.size() > arr2.size()) {\n        return find_kth(arr2, arr1, k);\n    }\n    if (arr1.size() == 0) {\n        return arr2[k - 1];\n    }\n    if (k == 1) {\n        return std::min(arr1[0], arr2[0]);\n    }\n    long i = std::min(arr1.size(), k / 2);\n    long j = std::min(arr2.size(), k / 2);\n    if (arr1[i - 1] > arr2[j - 1]) {\n        std::vector<long> new_arr(arr2.begin() + j, arr2.end());\n        return find_kth(arr1, new_arr, k - j);\n    } else {\n        std::vector<long> new_arr(arr1.begin() + i, arr1.end());\n        return find_kth(new_arr, arr2, k - i);\n    }",
    "    long i = 0, j = 0;\n    while(i < arr1.size() && j < arr2.size()) {\n        if(arr1[i] < arr2[j]) {\n            if(k == 1) {\n                return arr1[i];\n            }\n            i++;\n            k--;\n        }\n        else {\n            if(k == 1) {\n                return arr2[j];\n            }\n            j++;\n            k--;\n        }\n    }\n    while(i < arr1.size()) {\n        if(k == 1) {\n            return arr1[i];\n        }\n        i++;\n        k--;\n    }\n    while(j < arr2.size()) {\n        if(k == 1) {\n            return arr2[j];\n        }\n        j++;\n        k--;\n    }\n    return -1;",
    "    long i = 0, j = 0;\n    long n = arr1.size(), m = arr2.size();\n    while(i < n && j < m) {\n        if(arr1[i] < arr2[j]) {\n            if(i + j + 1 == k) return arr1[i];\n            i++;\n        }\n        else {\n            if(i + j + 1 == k) return arr2[j];\n            j++;\n        }\n    }\n    if(i == n) return arr2[k - n];\n    else return arr1[k - m];",
    "    assert(k <= arr1.size() + arr2.size());\n    long i = 0, j = 0;\n    while (k > 1) {\n        if (i == arr1.size()) {\n            j += k - 1;\n            break;\n        }\n        if (j == arr2.size()) {\n            i += k - 1;\n            break;\n        }\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    if (i == arr1.size()) {\n        return arr2[j];\n    }\n    if (j == arr2.size()) {\n        return arr1[i];\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    assert(k <= arr1.size() + arr2.size());\n    int i = 0, j = 0;\n    while (k > 0) {\n        if (arr1[i] < arr2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n        k--;\n    }\n    return std::min(arr1[i], arr2[j]);",
    "    long i = 0, j = 0;\n    long n1 = arr1.size();\n    long n2 = arr2.size();\n    long count = 0;\n    while(i < n1 && j < n2) {\n        if(arr1[i] < arr2[j]) {\n            if(count == k - 1) {\n                return arr1[i];\n            }\n            i++;\n            count++;\n        } else {\n            if(count == k - 1) {\n                return arr2[j];\n            }\n            j++;\n            count++;\n        }\n    }\n    while(i < n1) {\n        if(count == k - 1) {\n            return arr1[i];\n        }\n        i++;\n        count++;\n    }\n    while(j < n2) {\n        if(count == k - 1) {\n            return arr2[j];\n        }\n        j++;\n        count++;\n    }\n    return -1;"
  ]
}