{
  "name": "mbpp_431_common_element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two vectors and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::any list1, std::any list2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::any({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        for(auto i : list1_) {\n            for(auto j : list2_) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : list1_) {\n            for(auto j : list2_) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0, j = 0;\n    while (i < v1.size() && j < v2.size()) {\n        if (v1[i] == v2[j]) {\n            return true;\n        }\n        if (v1[i] < v2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if (v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<std::string> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if (v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (int i = 0; i < list1_vector.size(); i++) {\n        set.insert(list1_vector[i]);\n    }\n    for (int i = 0; i < list2_vector.size(); i++) {\n        if (set.find(list2_vector[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> l1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> l2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string",
    "    std::unordered_set<int> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: implement this function\n    return std::nullopt;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for(auto i : v1) {\n        s.insert(i);\n    }\n    for(auto i : v2) {\n        if(s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> vec1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> vec2 = std::any_cast<std::vector<double>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto v1 = std::any_cast<std::vector<std::string>>(list1);\n        auto v2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        std::unordered_set<int> set2(list2_.begin(), list2_.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return {};",
    "    std::set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::set<int> set1(list1_vector.begin(), list1_vector.end());\n        std::set<int> set2(list2_vector.begin(), list2_vector.end());\n        std::vector<int> intersection;\n        std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::back_inserter(intersection));\n        if(intersection.size() > 0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set(list1_vector.begin(), list1_vector.end());\n    for (auto i : list2_vector) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // check if the lists are empty\n    if (list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    // check if the lists have at least one common element\n    for (auto i : list1) {\n        for (auto j : list2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_.begin(), list1_.end());\n    std::unordered_set<int> set2(list2_.begin(), list2_.end());\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : v1) {\n        s.insert(i);\n    }\n    for (auto i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1;\n    for (int i = 0; i < list1_.size(); i++) {\n        set1.insert(list1_[i]);\n    }\n    for (int i = 0; i < list2_.size(); i++) {\n        if (set1.find(list2_[i]) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>)) {\n        if (list2.type() == typeid(std::vector<int>)) {\n            auto v1 = std::any_cast<std::vector<int>>(list1);\n            auto v2 = std::any_cast<std::vector<int>>(list2);\n            for (auto x : v1) {\n                for (auto y : v2) {\n                    if (x == y) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return std::nullopt;\n        }\n    }\n    else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vector1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vector2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (int i = 0; i < vector1.size(); i++) {\n        set.insert(vector1[i]);\n    }\n    for (int i = 0; i < vector2.size(); i++) {\n        if (set.find(vector2[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n        for (auto element : list2_vector) {\n            if (list1_set.find(element) != list1_set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> list1_set(list1_vector.begin(), list1_vector.end());\n        for (auto element : list2_vector) {\n            if (list1_set.find(element) != list1_set.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for(int i = 0; i < vec1.size(); i++) {\n        set.insert(vec1[i]);\n    }\n    for(int i = 0; i < vec2.size(); i++) {\n        if(set.find(vec2[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> list1_ = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> list2_ = std::any_cast<std::vector<char>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_ = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s(v1.begin(), v1.end());\n        for(auto i : v2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::unordered_set<double> s(v1.begin(), v1.end());\n        for(auto i : v2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s(v1.begin(), v1.end());\n        for(auto i : v2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : v1) {\n        s.insert(i);\n    }\n    for (auto i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n       ",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            } else if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    auto v1 = std::any_cast<std::vector<int>>(list1);\n    auto v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : v1) {\n        s.insert(i);\n    }\n    for (auto i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: implement this function\n    return std::nullopt;",
    "    if(list1.type() != list2.type()){\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)){\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++){\n            for(int j = 0; j < vec2.size(); j++){\n                if(vec1[i] == vec2[j]){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)){\n        std::vector<double> vec1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> vec2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++){\n            for(int j = 0; j < vec2.size(); j++){\n                if(vec1[i] == vec2[j]){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)){\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n       ",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        auto it1 = l1.begin();\n        auto it2 = l2.begin();\n        while (it1 != l1.end() && it2 != l2.end()) {\n            if (*it1 == *it2) {\n                return true;\n            }\n            if (*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        auto it1 = l1.begin();\n        auto it2 = l2.begin();\n        while (it1 != l1.end() && it2 != l2.end()) {\n            if (*it1 == *it2) {\n                return true;\n            }\n            if (*it1 < *it2) {\n                it1++;\n            } else {\n                it2++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0, j = 0;\n    while (i < v1.size() && j < v2.size()) {\n        if (v1[i] == v2[j]) {\n            return true;\n        }\n        if (v1[i] < v2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set1;\n    std::unordered_set<std::any> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<std::any> set1;\n    std::unordered_set<std::any> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for (auto i : v1) {\n            s.insert(i);\n        }\n        for (auto i : v2) {\n            if (s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return {};\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : list1_) {\n        set.insert(i);\n    }\n    for (auto i : list2_) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>))\n        return std::nullopt;\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end())\n            return true;\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::sort(list1_vector.begin(), list1_vector.end());\n    std::sort(list2_vector.begin(), list2_vector.end());\n    int i = 0, j = 0;\n    while (i < list1_vector.size() && j < list2_vector.size()) {\n        if (list1_vector[i] == list2_vector[j]) {\n            return true;\n        }\n        if (list1_vector[i] < list2_vector[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    std::vector<int>::iterator it1 = v1.begin();\n    std::vector<int>::iterator it2 = v2.begin();\n    while (it1 != v1.end() && it2 != v2.end()) {\n        if (*it1 == *it2) {\n            return true;\n        }\n        else if (*it1 < *it2) {\n            it1++;\n        }\n        else {\n            it2++;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<float>)) {\n        auto l1 = std::any_cast<std::vector<float>>(list1);\n        auto l2 = std::any_cast<std::vector<float>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        auto l1 = std::any_cast<std::vector<char>>(list1);\n        auto l2 = std::any_cast<std::vector<char>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0;\n    int j = 0;\n    while (i < v1.size() && j < v2.size()) {\n        if (v1[i] == v2[j]) {\n            return true;\n        }\n        else if (v1[i] < v2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0;\n        int j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0;\n        int j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<std::any> set1;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0, j = 0;\n        while (i < vec1.size() && j < vec2.size()) {\n            if (vec1[i] == vec2[j]) {\n                return true;\n            }\n            if (vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0, j = 0;\n        while (i < vec1.size() && j < vec2.size()) {\n            if (vec1[i] == vec2[j]) {\n                return true;\n            }\n            if (vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0;\n    int j = 0;\n    while(i < v1.size() && j < v2.size()) {\n        if(v1[i] == v2[j]) return true;\n        else if(v1[i] < v2[j]) i++;\n        else j++;\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return {};\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s1(v1.begin(), v1.end());\n    std::unordered_set<int> s2(v2.begin(), v2.end());\n    std::vector<int> intersection;\n    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(intersection));\n    return intersection.size() > 0;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_.begin(), list1_.end());\n    std::unordered_set<int> set2(list2_.begin(), list2_.end());\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto v1 = std::any_cast<std::vector<std::string>>(list1);\n        auto v2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::vector<int> vec1 = list1;\n    std::vector<int> vec2 = list2;\n    std::vector<int>::iterator it1;\n    std::vector<int>::iterator it2;\n    for (it1 = vec1.begin(); it1 != vec1.end(); it1++) {\n        for (it2 = vec2.begin(); it2 != vec2.end(); it2++) {\n            if (*it1 == *it2) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::vector<int> intersection;\n        std::set_intersection(list1_.begin(), list1_.end(), list2_.begin(), list2_.end(), std::back_inserter(intersection));\n        return !intersection.empty();\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::vector<std::string> intersection;\n        std::set_intersection(list1_.begin(), list1_.end(), list2_.begin(), list2_.end(), std::back_inserter(intersection));\n        return !intersection.empty();\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    for (int i = 0; i < list1_.size(); i++) {\n        for (int j = 0; j < list2_.size(); j++) {\n            if (list1_[i] == list2_[j]) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        int i = 0, j = 0;\n        while (i < list1_.size() && j < list2_.size()) {\n            if (list1_[i] < list2_[j]) {\n                i++;\n            } else if (list1_[i] > list2_[j]) {\n                j++;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    std::set<int> set1;\n    std::set<int> set2;\n    std::transform(list1.begin(), list1.end(), std::inserter(set1, set1.begin()));\n    std::transform(list2.begin(), list2.end(), std::inserter(set2, set2.begin()));\n    std::set<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(intersection, intersection.begin()));\n    if (intersection.size() > 0) {\n        return true;\n    }\n    return false;",
    "    std::unordered_set<std::any> set1;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type())\n        return std::nullopt;\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            if(std::binary_search(v2.begin(), v2.end(), v1[i]))\n                return true;\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            if(std::binary_search(v2.begin(), v2.end(), v1[i]))\n                return true;\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    std::vector<int> v3;\n    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n    if(v3.size() > 0) {\n        return true;\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0, j = 0;\n        while (i < vec1.size() && j < vec2.size()) {\n            if (vec1[i] == vec2[j]) {\n                return true;\n            }\n            if (vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0, j = 0;\n        while (i < vec1.size() && j < vec2.size()) {\n            if (vec1[i] == vec2[j]) {\n                return true;\n            }\n            if (vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    else if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> l1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> l2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n    }\n    else if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> l1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> l2 = std::any_cast<std::vector<char>>(list2);\n        for (auto i : l1) {\n            for (auto j : l2) {\n                if (i ==",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto &i: list1) {\n        set1.insert(i);\n    }\n    for (auto &i: list2) {\n        set2.insert(i);\n    }\n    for (auto &i: set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    for (auto i : v1) {\n        for (auto j : v2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto vec1 = std::any_cast<std::vector<double>>(list1);\n        auto vec2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<float>)) {\n        std::vector<float> v1 = std::any_cast<std::vector<float>>(list1);\n        std::vector<float> v2 = std::any_cast<std::vector<float>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < vec1.size(); i++) {\n            for (int j = 0; j < vec2.size(); j++) {\n                if (vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for (int i = 0; i < vec1.size(); i++) {\n            for (int j = 0; j < vec2.size(); j++) {\n                if (vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> l1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> l2 = std::any_cast<std::vector<double>>(list2);\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  std::unordered_set<std::any> set1;\n  for (auto i : list1) {\n    set1.insert(i);\n  }\n  for (auto i : list2) {\n    if (set1.find(i) != set1.end()) {\n      return true;\n    }\n  }\n  return false;",
    "  if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n  std::unordered_set<int> set;\n  for(auto i : list1_vector) {\n    set.insert(i);\n  }\n  for(auto i : list2_vector) {\n    if(set.find(i) != set.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(vec1.begin(), vec1.end());\n    std::sort(vec2.begin(), vec2.end());\n    int i = 0;\n    int j = 0;\n    while(i < vec1.size() && j < vec2.size()) {\n        if(vec1[i] == vec2[j]) {\n            return true;\n        }\n        else if(vec1[i] < vec2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return false;",
    "  // Write your code here\n  return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    if(list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for(auto i : v1) {\n        s.insert(i);\n    }\n    for(auto i : v2) {\n        if(s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> list1_set(list1_vector.begin(), list1_vector.end());\n    for (int i : list2_vector) {\n        if (list1_set.find(i) != list1_set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<float>)) {\n        std::vector<float> list1_ = std::any_cast<std::vector<float>>(list1);\n        std::vector<float> list2_ = std::any_cast<std::vector<float>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> list1_ = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> list2_ = std::any_cast<std::vector<double>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: Write your code here\n    std::unordered_set<int> set;\n    for(auto i:list1){\n        set.insert(i);\n    }\n    for(auto i:list2){\n        if(set.find(i)!=set.end())\n            return true;\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "  if (list1.type() != list2.type()) {\n    return std::nullopt;\n  }\n  if (list1.type() == typeid(std::vector<int>)) {\n    auto list1_ = std::any_cast<std::vector<int>>(list1);\n    auto list2_ = std::any_cast<std::vector<int>>(list2);\n    std::sort(list1_.begin(), list1_.end());\n    std::sort(list2_.begin(), list2_.end());\n    int i = 0, j = 0;\n    while (i < list1_.size() && j < list2_.size()) {\n      if (list1_[i] == list2_[j]) {\n        return true;\n      }\n      if (list1_[i] < list2_[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n    return false;\n  }\n  if (list1.type() == typeid(std::vector<std::string>)) {\n    auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n    auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n    std::sort(list1_.begin(), list1_.end());\n    std::sort(list2_.begin(), list2_.end());\n    int i = 0, j = 0;\n    while (i < list1_.size() && j < list2_.size()) {\n      if (list1_[i] == list2_[j]) {\n        return true;\n      }\n      if (list1_[i] < list2_[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n    return false;\n  }\n  return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    for (int i = 0; i < v1.size(); i++) {\n        for (int j = 0; j < v2.size(); j++) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    std::optional<bool> result;\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        if (list2.type() == typeid(std::vector<int>)) {\n            std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n            for (auto element1 : list1_) {\n                for (auto element2 : list2_) {\n                    if (element1 == element2) {\n                        result = true;\n                        return result;\n                    }\n                }\n            }\n        }\n    }\n    result = false;\n    return result;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type())\n        return std::nullopt;\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        return std::any_of(v1.begin(), v1.end(), [&](auto x) {\n            return std::binary_search(v2.begin(), v2.end(), x);\n        });\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while(i < v1.size() && j < v2.size()) {\n            if(v1[i] == v2[j]) {\n                return true;\n            }\n            if(v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto elem : list1) {\n        set1.insert(elem);\n    }\n    for (auto elem : list2) {\n        set2.insert(elem);\n    }\n    for (auto elem : set1) {\n        if (set2.find(elem) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type())\n        return std::nullopt;\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j])\n                    return true;\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> v1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> v2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j])\n                    return true;\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n       ",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            else if (*i < *j) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            else if (*i < *j) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else {\n        return std::nullopt;\n    }",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "    std::vector<int> l1 = list1.any_cast<std::vector<int>>();\n    std::vector<int> l2 = list2.any_cast<std::vector<int>>();\n    std::unordered_set<int> s1(l1.begin(), l1.end());\n    std::unordered_set<int> s2(l2.begin(), l2.end());\n    for (auto i : s1) {\n        if (s2.find(i) != s2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_int = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_int = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_int) {\n            for (auto j : list2_int) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> list1_double = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> list2_double = std::any_cast<std::vector<double>>(list2);\n        for (auto i : list1_double) {\n            for (auto j : list2_double) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_string = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_string = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : list1_string) {\n            for (auto j : list2_string) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::vector<int> intersection;\n        std::set_intersection(list1_.begin(), list1_.end(), list2_.begin(), list2_.end(), std::back_inserter(intersection));\n        return intersection.size() > 0;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::vector<std::string> intersection;\n        std::set_intersection(list1_.begin(), list1_.end(), list2_.begin(), list2_.end(), std::back_inserter(intersection));\n        return intersection.size() > 0;\n    }\n    return std::nullopt;",
    "    for (auto i : list1) {\n        for (auto j : list2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (auto i : l1) {\n        s.insert(i);\n    }\n    for (auto i : l2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        std::unordered_set<int> set2(list2_.begin(), list2_.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(list1_.begin(), list1_.end());\n        std::unordered_set<std::string> set2(list2_.begin(), list2_.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(vec1.begin(), vec1.end());\n    std::unordered_set<int> set2(vec2.begin(), vec2.end());\n    for (int i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto l1 = std::any_cast<std::vector<double>>(list1);\n        auto l2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        auto l1 = std::any_cast<std::vector<char>>(list1);\n        auto l2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for (auto i : l1) {\n            if (std::binary_search(l2.begin(), l2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_) {\n            for (auto j : list2_) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else {\n        return {};\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    } else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = 0; i < v1.size(); i++) {\n            for (auto j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto v1 = std::any_cast<std::vector<std::string>>(list1);\n        auto v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = 0; i < v1.size(); i++) {\n            for (auto j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto v1 = std::any_cast<std::vector<double>>(list1);\n        auto v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = 0; i < v1.size(); i++) {\n            for (auto j = 0; j < v2.size(); j",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0, j = 0;\n    while (i < v1.size() && j < v2.size()) {\n        if (v1[i] == v2[j]) {\n            return true;\n        }\n        else if (v1[i] < v2[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0, j = 0; i < v1.size() && j < v2.size();) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0, j = 0; i < v1.size() && j < v2.size();) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : list1_) {\n        set.insert(i);\n    }\n    for (auto i : list2_) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_.begin(), list1_.end());\n    std::unordered_set<int> set2(list2_.begin(), list2_.end());\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for(int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for(int i = 0; i < v2.size(); i++) {\n        if(s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto v1 = std::any_cast<std::vector<std::string>>(list1);\n        auto v2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    // TODO: implement\n    return std::nullopt;",
    "    std::vector<int> v1 = list1;\n    std::vector<int> v2 = list2;\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    for (int i = 0; i < v1.size(); i++) {\n        for (int j = 0; j < v2.size(); j++) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_int = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_int = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_int) {\n            for (auto j : list2_int) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> list1_char = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> list2_char = std::any_cast<std::vector<char>>(list2);\n        for (auto i : list1_char) {\n            for (auto j : list2_char) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_string = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_string = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : list1_string) {\n            for (auto j : list2_string) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1 == NULL || list2 == NULL) {\n        return std::nullopt;\n    }\n    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s(v1.begin(), v1.end());\n    for (auto i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    for (auto &i : list1) {\n        for (auto &j : list2) {\n            if (i == j) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for(int i = 0; i < v1.size(); i++) {\n            for(int j = 0; j < v2.size(); j++) {\n                if(v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n       ",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        auto vec1 = std::any_cast<std::vector<double>>(list1);\n        auto vec2 = std::any_cast<std::vector<double>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> s1;\n    std::set<int> s2;\n    for (auto i : list1) {\n        s1.insert(i);\n    }\n    for (auto i : list2) {\n        s2.insert(i);\n    }\n    for (auto i : s1) {\n        if (s2.find(i) != s2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : vec1) {\n        set.insert(i);\n    }\n    for (auto i : vec2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    for (auto i : set1) {\n        if (set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for(int i = 0; i < list1_.size(); i++) {\n        set.insert(list1_[i]);\n    }\n    for(int i = 0; i < list2_.size(); i++) {\n        if(set.find(list2_[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto i : list1_vector) {\n        set.insert(i);\n    }\n    for (auto i : list2_vector) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s1;\n    for (auto i : v1) {\n        s1.insert(i);\n    }\n    for (auto i : v2) {\n        if (s1.find(i) != s1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (auto& i : list1_vector) {\n        set.insert(i);\n    }\n    for (auto& i : list2_vector) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto l1 = std::any_cast<std::vector<int>>(list1);\n        auto l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if(*i == *j) {\n                return true;\n            } else if(*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if(list1.type() == typeid(std::vector<std::string>)) {\n        auto l1 = std::any_cast<std::vector<std::string>>(list1);\n        auto l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        for(auto i = l1.begin(), j = l2.begin(); i != l1.end() && j != l2.end();) {\n            if(*i == *j) {\n                return true;\n            } else if(*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::vector<float>)) {\n        std::vector<float> v1 = std::any_cast<std::vector<float>>(list1);\n        std::vector<float> v2 = std::any_cast<std::vector<float>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> v1 = std::any_cast<std::vector<char>>(list1",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: Implement this function\n    return std::nullopt;",
    "  if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return {};\n  }\n  auto vector1 = std::any_cast<std::vector<int>>(list1);\n  auto vector2 = std::any_cast<std::vector<int>>(list2);\n  std::unordered_set<int> set(vector1.begin(), vector1.end());\n  for (auto element : vector2) {\n    if (set.find(element) != set.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if(list1.empty() || list2.empty()) {\n        return std::nullopt;\n    }\n    std::set<int> set1(list1.begin(), list1.end());\n    std::set<int> set2(list2.begin(), list2.end());\n    std::vector<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::back_inserter(intersection));\n    return intersection.empty();",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_vector.begin(), list1_vector.end());\n    for (int i : list2_vector) {\n        if (set1.find(i) != set1.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> s1(list1.begin(), list1.end());\n    std::set<int> s2(list2.begin(), list2.end());\n    std::set<int> intersection;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::inserter(intersection, intersection.begin()));\n    if (intersection.size() > 0) {\n        return true;\n    }\n    return false;",
    "    std::set<int> s1;\n    std::set<int> s2;\n    for (auto i : list1) {\n        s1.insert(i);\n    }\n    for (auto i : list2) {\n        s2.insert(i);\n    }\n    for (auto i : s1) {\n        if (s2.find(i) != s2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> set1(list1.begin(), list1.end());\n    std::set<int> set2(list2.begin(), list2.end());\n    std::set<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(intersection, intersection.begin()));\n    return intersection.empty() ? std::nullopt : std::optional<bool>(true);",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for(auto i: list1) {\n        set.insert(i);\n    }\n    for(auto i: list2) {\n        if(set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> set1(std::begin(list1), std::end(list1));\n    std::set<int> set2(std::begin(list2), std::end(list2));\n    std::set<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(intersection, intersection.begin()));\n    if (intersection.size() > 0) {\n        return true;\n    } else {\n        return false;\n    }",
    "  if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n  std::sort(list1_vector.begin(), list1_vector.end());\n  std::sort(list2_vector.begin(), list2_vector.end());\n  int i = 0, j = 0;\n  while (i < list1_vector.size() && j < list2_vector.size()) {\n    if (list1_vector[i] == list2_vector[j]) {\n      return true;\n    }\n    if (list1_vector[i] < list2_vector[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n       ",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(vec1.begin(), vec1.end());\n    std::sort(vec2.begin(), vec2.end());\n    int i = 0, j = 0;\n    while(i < vec1.size() && j < vec2.size()) {\n        if(vec1[i] == vec2[j]) {\n            return true;\n        }\n        if(vec1[i] < vec2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    std::set<int> set1(list1.begin(), list1.end());\n    std::set<int> set2(list2.begin(), list2.end());\n    std::vector<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::back_inserter(intersection));\n    if (intersection.size() > 0) {\n        return true;\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(vec1.begin(), vec1.end());\n        std::unordered_set<int> set2(vec2.begin(), vec2.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> set1(vec1.begin(), vec1.end());\n        std::unordered_set<std::string> set2(vec2.begin(), vec2.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0;\n        int j = 0;\n        while(i < vec1.size() && j < vec2.size()) {\n            if(vec1[i] == vec2[j]) {\n                return true;\n            }\n            if(vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        int i = 0;\n        int j = 0;\n        while(i < vec1.size() && j < vec2.size()) {\n            if(vec1[i] == vec2[j]) {\n                return true;\n            }\n            if(vec1[i] < vec2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++) {\n            for(int j = 0; j < vec2.size(); j++) {\n                if(vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for(int i = 0; i < vec1.size(); i++) {\n            for(int j = 0; j < vec2.size(); j++) {\n                if(vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> vec1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> vec2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n       ",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> v1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> v2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)){\n        return std::nullopt;\n    }\n    std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for(int i = 0; i < l1.size(); i++){\n        s.insert(l1[i]);\n    }\n    for(int i = 0; i < l2.size(); i++){\n        if(s.find(l2[i]) != s.end()){\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto list1_vector = std::any_cast<std::vector<int>>(list1);\n        auto list2_vector = std::any_cast<std::vector<int>>(list2);\n        for (auto i : list1_vector) {\n            for (auto j : list2_vector) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_vector = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_vector = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : list1_vector) {\n            for (auto j : list2_vector) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<float>)) {\n        auto v1 = std::any_cast<std::vector<float>>(list1);\n        auto v2 = std::any_cast<std::vector<float>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2.begin(); i != v1.end() && j != v2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<double>)) {\n        auto v1 = std::any_cast<std::vector<double>>(list1);\n        auto v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i = v1.begin(), j = v2",
    "    std::set<int> s1;\n    std::set<int> s2;\n    for (auto i: list1) {\n        s1.insert(i);\n    }\n    for (auto i: list2) {\n        s2.insert(i);\n    }\n    std::set<int> s3;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::inserter(s3, s3.begin()));\n    if (s3.empty()) {\n        return std::nullopt;\n    } else {\n        return true;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (int i = 0; i < vec1.size(); i++) {\n            for (int j = 0; j < vec2.size(); j++) {\n                if (vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (int i = 0; i < vec1.size(); i++) {\n            for (int j = 0; j < vec2.size(); j++) {\n                if (vec1[i] == vec2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : vec1) {\n            for (auto j : vec2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::sort(list1_.begin(), list1_.end());\n        std::sort(list2_.begin(), list2_.end());\n        for (int i = 0; i < list1_.size(); i++) {\n            for (int j = 0; j < list2_.size(); j++) {\n                if (list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return {};",
    "    if(list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set1(list1_.begin(), list1_.end());\n    std::unordered_set<int> set2(list2_.begin(), list2_.end());\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::set<int> s1;\n    std::set<int> s2;\n    for (auto i : list1) {\n        s1.insert(i);\n    }\n    for (auto i : list2) {\n        s2.insert(i);\n    }\n    std::set<int> s3;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::inserter(s3, s3.begin()));\n    if (s3.size() > 0) {\n        return true;\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s1(v1.begin(), v1.end());\n        std::unordered_set<int> s2(v2.begin(), v2.end());\n        for (auto i : s1) {\n            if (s2.find(i) != s2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return {};",
    "    std::set<int> s;\n    for (auto x : list1) {\n        s.insert(x);\n    }\n    for (auto x : list2) {\n        if (s.find(x) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i : v1) {\n            if (std::binary_search(v2.begin(), v2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (auto i : v1) {\n            if (std::binary_search(v2.begin(), v2.end(), i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    for (int i = 0; i < v1.size(); i++) {\n        for (int j = 0; j < v2.size(); j++) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        for (int i = 0; i < v1.size(); i++) {\n            for (int j = 0; j < v2.size(); j++) {\n                if (v1[i] == v2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> v1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> v2 = std::any_cast<std::vector<double>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n       ",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s(v1.begin(), v1.end());\n    for (int i : v2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "  std::set<int> set1(list1.begin(), list1.end());\n  std::set<int> set2(list2.begin(), list2.end());\n  std::set<int> intersection;\n  std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(intersection, intersection.begin()));\n  if (intersection.size() > 0) {\n    return true;\n  }\n  return false;",
    "    std::set<int> set1;\n    std::set<int> set2;\n    for (auto i : list1) {\n        set1.insert(i);\n    }\n    for (auto i : list2) {\n        set2.insert(i);\n    }\n    std::set<int> intersection;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(intersection, intersection.begin()));\n    if (intersection.size() > 0) {\n        return true;\n    } else {\n        return false;\n    }",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if(v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<std::string> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if(v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> list1_ = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> list2_ = std::any_cast<std::vector<double>>(list2);\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> list1_ = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> list2_ = std::any_cast<std::vector<std::string>>(list2);\n        for(int i = 0; i < list1_.size(); i++) {\n            for(int j = 0; j < list2_.size(); j++) {\n                if(list1_[i] == list2_[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n  std::unordered_set<int> set1(vec1.begin(), vec1.end());\n  std::unordered_set<int> set2(vec2.begin(), vec2.end());\n  for (auto ele : set1) {\n    if (set2.find(ele) != set2.end()) {\n      return true;\n    }\n  }\n  return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            } else if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "  if (list1.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  if (list2.type() != typeid(std::vector<int>)) {\n    return std::nullopt;\n  }\n  std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n  std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n  std::sort(v1.begin(), v1.end());\n  std::sort(v2.begin(), v2.end());\n  int i = 0, j = 0;\n  while (i < v1.size() && j < v2.size()) {\n    if (v1[i] == v2[j]) {\n      return true;\n    }\n    if (v1[i] < v2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return false;",
    "    std::vector<int> vector1 = list1;\n    std::vector<int> vector2 = list2;\n    std::vector<int>::iterator it1;\n    std::vector<int>::iterator it2;\n    for (it1 = vector1.begin(); it1 != vector1.end(); it1++) {\n        for (it2 = vector2.begin(); it2 != vector2.end(); it2++) {\n            if (*it1 == *it2) {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto vec1 = std::any_cast<std::vector<int>>(list1);\n        auto vec2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else if (list1.type() == typeid(std::vector<std::string>)) {\n        auto vec1 = std::any_cast<std::vector<std::string>>(list1);\n        auto vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(vec1.begin(), vec1.end());\n        std::sort(vec2.begin(), vec2.end());\n        for (auto i = vec1.begin(), j = vec2.begin(); i != vec1.end() && j != vec2.end();) {\n            if (*i == *j) {\n                return true;\n            }\n            if (*i < *j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    } else {\n        return std::nullopt;\n    }",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> s;\n        for(auto i : vec1) {\n            s.insert(i);\n        }\n        for(auto i : vec2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        std::unordered_set<std::string> s;\n        for(auto i : vec1) {\n            s.insert(i);\n        }\n        for(auto i : vec2) {\n            if(s.find(i) != s.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(vec1.begin(), vec1.end());\n    std::sort(vec2.begin(), vec2.end());\n    int i = 0;\n    int j = 0;\n    while (i < vec1.size() && j < vec2.size()) {\n        if (vec1[i] == vec2[j]) {\n            return true;\n        }\n        if (vec1[i] < vec2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;"
  ]
}