{
  "name": "mbpp_431_common_element",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes two vectors and returns true if they have at least one common element.\nstd::optional<bool> common_element(std::any list1, std::any list2) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = common_element;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)5, (long)6, (long)7, (long)8, (long)9}))) == true);\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5})), (std::any({(long)6, (long)7, (long)8, (long)9}))) == std::nullopt);\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})), (std::any({(std::string)\"d\", (std::string)\"b\", (std::string)\"e\"}))) == true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        auto list1_ = std::any_cast<std::vector<int>>(list1);\n        auto list2_ = std::any_cast<std::vector<int>>(list2);\n        for(auto i : list1_) {\n            for(auto j : list2_) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if(list1.type() == typeid(std::vector<std::string>)) {\n        auto list1_ = std::any_cast<std::vector<std::string>>(list1);\n        auto list2_ = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : list1_) {\n            for(auto j : list2_) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set;\n    for (auto i : list1) {\n        set.insert(i);\n    }\n    for (auto i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::sort(v1.begin(), v1.end());\n    std::sort(v2.begin(), v2.end());\n    int i = 0, j = 0;\n    while (i < v1.size() && j < v2.size()) {\n        if (v1[i] == v2[j]) {\n            return true;\n        }\n        if (v1[i] < v2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> l2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0, j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<int> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if (v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        std::vector<std::string> v3;\n        std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(v3));\n        if (v3.size() > 0) {\n            return true;\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    if (list1.type() != typeid(std::vector<int>) || list2.type() != typeid(std::vector<int>)) {\n        return std::nullopt;\n    }\n    std::vector<int> list1_vector = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> list2_vector = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> set;\n    for (int i = 0; i < list1_vector.size(); i++) {\n        set.insert(list1_vector[i]);\n    }\n    for (int i = 0; i < list2_vector.size(); i++) {\n        if (set.find(list2_vector[i]) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> l1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> l2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<char>)) {\n        std::vector<char> l1 = std::any_cast<std::vector<char>>(list1);\n        std::vector<char> l2 = std::any_cast<std::vector<char>>(list2);\n        std::sort(l1.begin(), l1.end());\n        std::sort(l2.begin(), l2.end());\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1[i] == l2[j]) {\n                return true;\n            }\n            if (l1[i] < l2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return false;\n    }\n    else if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> l1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string",
    "    std::unordered_set<int> set;\n    for (auto &i : list1) {\n        set.insert(i);\n    }\n    for (auto &i : list2) {\n        if (set.find(i) != set.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> v1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> v2 = std::any_cast<std::vector<std::string>>(list2);\n        std::sort(v1.begin(), v1.end());\n        std::sort(v2.begin(), v2.end());\n        int i = 0, j = 0;\n        while (i < v1.size() && j < v2.size()) {\n            if (v1[i] == v2[j]) {\n                return true;\n            }\n            if (v1[i] < v2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> s;\n    for (auto i : list1) {\n        s.insert(i);\n    }\n    for (auto i : list2) {\n        if (s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    // TODO: implement this function\n    return std::nullopt;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for(auto i : v1) {\n        s.insert(i);\n    }\n    for(auto i : v2) {\n        if(s.find(i) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<int> v1 = std::any_cast<std::vector<int>>(list1);\n    std::vector<int> v2 = std::any_cast<std::vector<int>>(list2);\n    std::unordered_set<int> s;\n    for (int i = 0; i < v1.size(); i++) {\n        s.insert(v1[i]);\n    }\n    for (int i = 0; i < v2.size(); i++) {\n        if (s.find(v2[i]) != s.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if(list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if(list1.type() == typeid(std::vector<int>)) {\n        std::vector<int> vec1 = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> vec2 = std::any_cast<std::vector<int>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<double>)) {\n        std::vector<double> vec1 = std::any_cast<std::vector<double>>(list1);\n        std::vector<double> vec2 = std::any_cast<std::vector<double>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else if(list1.type() == typeid(std::vector<std::string>)) {\n        std::vector<std::string> vec1 = std::any_cast<std::vector<std::string>>(list1);\n        std::vector<std::string> vec2 = std::any_cast<std::vector<std::string>>(list2);\n        for(auto i : vec1) {\n            for(auto j : vec2) {\n                if(i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    else {\n        return std::nullopt;\n    }",
    "    if (list1.type() != list2.type()) {\n        return std::nullopt;\n    }\n    if (list1.type() == typeid(std::vector<int>)) {\n        auto v1 = std::any_cast<std::vector<int>>(list1);\n        auto v2 = std::any_cast<std::vector<int>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    if (list1.type() == typeid(std::vector<std::string>)) {\n        auto v1 = std::any_cast<std::vector<std::string>>(list1);\n        auto v2 = std::any_cast<std::vector<std::string>>(list2);\n        for (auto i : v1) {\n            for (auto j : v2) {\n                if (i == j) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return std::nullopt;",
    "    std::unordered_set<int> set1;\n    std::unordered_set<int> set2;\n    for(auto i : list1) {\n        set1.insert(i);\n    }\n    for(auto i : list2) {\n        set2.insert(i);\n    }\n    for(auto i : set1) {\n        if(set2.find(i) != set2.end()) {\n            return true;\n        }\n    }\n    return false;",
    "    if (list1.type() == typeid(std::vector<int>) && list2.type() == typeid(std::vector<int>)) {\n        std::vector<int> list1_ = std::any_cast<std::vector<int>>(list1);\n        std::vector<int> list2_ = std::any_cast<std::vector<int>>(list2);\n        std::unordered_set<int> set1(list1_.begin(), list1_.end());\n        std::unordered_set<int> set2(list2_.begin(), list2_.end());\n        for (auto i : set1) {\n            if (set2.find(i) != set2.end()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return {};"
  ]
}