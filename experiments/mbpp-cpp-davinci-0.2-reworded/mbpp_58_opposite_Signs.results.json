{
  "name": "mbpp_58_opposite_Signs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return (x ^ y) < 0;\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n  return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return (x ^ y) < 0;\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return (x ^ y) < 0;\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n\treturn ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return (x ^ y) < 0;\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return (x ^ y) < 0;\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given two integers have opposite sign or not.\nbool opposite_Signs(long x, long y) {\n    return ((x ^ y) < 0);\n}\nint main() {\n    auto candidate = opposite_Signs;\n    assert(candidate((1), (-2)) == (true));\n    assert(candidate((3), (2)) == (false));\n    assert(candidate((-10), (-10)) == (false));\n    assert(candidate((-2), (2)) == (true));\n}\n",
      "timestamp": 1665517432,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}