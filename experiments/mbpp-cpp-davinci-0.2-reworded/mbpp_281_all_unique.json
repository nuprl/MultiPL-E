{
  "name": "mbpp_281_all_unique",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_list.size() == test_set.size();",
    "    std::set<long> unique_set;\n    for (long i : test_list) {\n        unique_set.insert(i);\n    }\n    return unique_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_list.size() == test_set.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;",
    "    std::set<long> s;\n    for(auto i:test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();",
    "    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::set<long> s;\n    for (auto i : test_list) {\n        if (s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;",
    "    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();",
    "    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_list.size() == test_set.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }",
    "    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();"
  ]
}