{
  "name": "mbpp_106_add_lists",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to append the given vector to the given tuples.\nlong add_lists(std::vector<long> test_list, long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = add_lists;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7})), std::make_tuple(9, 10)) == std::make_tuple(9, 10, 5, 6, 7));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)8})), std::make_tuple(10, 11)) == std::make_tuple(10, 11, 6, 7, 8));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9})), std::make_tuple(11, 12)) == std::make_tuple(11, 12, 7, 8, 9));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    sum += test_tup;\n    return sum;",
    "    // Write your code here\n    // To print results to the standard output you can use std::cout\n    // Example: std::cout << \"Hello world!\";\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    // Your code here\n    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    return sum + test_tup;",
    "    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (auto i : test_list) {\n        sum += i;\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    // Your code here\n    return 0;",
    "    // Your code here\n    long sum = 0;\n    for(int i=0; i<test_list.size(); i++)\n    {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    return sum + test_tup;",
    "    // Your code here\n    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    return sum + test_tup;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        sum += test_list[i];\n    }\n    sum += test_tup;\n    return sum;",
    "    std::vector<long>::iterator it;\n    for(it = test_list.begin(); it != test_list.end(); it++) {\n        test_tup = test_tup + *it;\n    }\n    return test_tup;"
  ]
}