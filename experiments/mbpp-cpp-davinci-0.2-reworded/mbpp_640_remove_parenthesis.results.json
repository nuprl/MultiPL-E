{
  "name": "mbpp_640_remove_parenthesis",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmptsfu2mgz: /tmp/tmptsfu2mgz.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.front() == '(' && item.back() == ')') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpr4q8uicz: /tmp/tmpr4q8uicz.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n    }\n    if (item.find(\")\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n    }\n    result += item;\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpchd1_b5w: /tmp/tmpchd1_b5w.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp_v_fu450: /tmp/tmp_v_fu450.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        std::string item = items[i];\n        if(item[0] == '(') {\n            int j = 1;\n            while(item[j] != ')') {\n                j++;\n            }\n            result += item.substr(1, j-1);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpkg3_of1s: /tmp/tmpkg3_of1s.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmphswy94e5: /tmp/tmphswy94e5.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n    }\n    result += item;\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmptk3qjkgk: /tmp/tmptk3qjkgk.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpbv05cg1m: /tmp/tmpbv05cg1m.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpv2w_v_tn: /tmp/tmpv2w_v_tn.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmplibnwzv2: /tmp/tmplibnwzv2.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpdkz9gq_6: /tmp/tmpdkz9gq_6.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpzfjkvx8w: /tmp/tmpzfjkvx8w.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            result += item.substr(1, item.size() - 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmphupxbc8m: /tmp/tmphupxbc8m.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpf74as7cb: /tmp/tmpf74as7cb.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(' && item[item.size()-1] == ')') {\n            result += item.substr(1, item.size()-2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmptofsu26v: /tmp/tmptofsu26v.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for(auto item : items) {\n    if(item.find(\"(\") == std::string::npos) {\n      result += item;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpr6eg8r25: /tmp/tmpr6eg8r25.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            auto pos = item.find(\"(\");\n            item.erase(pos, item.size() - pos);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpln984fu9: /tmp/tmpln984fu9.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpn1knz7w_: /tmp/tmpn1knz7w_.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpypyogr7c: /tmp/tmpypyogr7c.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpav64js7r: /tmp/tmpav64js7r.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpu01l4quu: /tmp/tmpu01l4quu.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkcz8nizp: /tmp/tmpkcz8nizp.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp7ohzpius: /tmp/tmp7ohzpius.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.begin() + item.find('('), item.begin() + item.find(')') + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123167,
      "stdout": "",
      "stderr": "tmpzw3tbrky: /tmp/tmpzw3tbrky.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpbv05cg1m: /tmp/tmpbv05cg1m.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(')') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjtr79q4a: /tmp/tmpjtr79q4a.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(' && item[item.size() - 1] == ')') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp9czzsg0a: /tmp/tmp9czzsg0a.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item: items) {\n        if(item == \"(\") {\n            continue;\n        }\n        if(item == \")\") {\n            continue;\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpo5p1c_6d: /tmp/tmpo5p1c_6d.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpqmc1_oy3: /tmp/tmpqmc1_oy3.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmph66e1kmk: /tmp/tmph66e1kmk.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item == \"(\") {\n            result += \" \";\n        } else if (item == \")\") {\n            result += \" \";\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmplubjmnwt: /tmp/tmplubjmnwt.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.begin() + item.find(\")\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpc2vtsozr: /tmp/tmpc2vtsozr.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkcz8nizp: /tmp/tmpkcz8nizp.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnglka_v2: /tmp/tmpnglka_v2.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmplibnwzv2: /tmp/tmplibnwzv2.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpf74as7cb: /tmp/tmpf74as7cb.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            result += item.substr(0, item.find(\"(\"));\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmptuc6zr91: /tmp/tmptuc6zr91.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpv2w_v_tn: /tmp/tmpv2w_v_tn.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp7ohzpius: /tmp/tmp7ohzpius.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            int i = 1;\n            while (item[i] != ')') {\n                i++;\n            }\n            result += item.substr(i + 1, item.size() - i - 1);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmppekxwnyv: /tmp/tmppekxwnyv.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n      item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n    }\n    result += item;\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp004sow4z: /tmp/tmp004sow4z.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpca4v7ss6: /tmp/tmpca4v7ss6.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item: items) {\n        if(item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpwjh3mn4c: /tmp/tmpwjh3mn4c.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for (std::string item : items) {\n    if (item.find(\"(\") == std::string::npos) {\n      result += item;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpopudifzm: /tmp/tmpopudifzm.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (std::string item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp0d2xuupp: /tmp/tmp0d2xuupp.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkcz8nizp: /tmp/tmpkcz8nizp.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if(item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpeihqs044: /tmp/tmpeihqs044.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.begin() + item.find('('), item.begin() + item.find(')') + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp8k7_k9kr: /tmp/tmp8k7_k9kr.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] != '(' && item[item.size() - 1] != ')') {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpwg2ykley: /tmp/tmpwg2ykley.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result;\n  for(int i = 0; i < items.size(); i++) {\n    if(items[i] == \"(\") {\n      while(items[i] != \")\") {\n        i++;\n      }\n    } else {\n      result += items[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpmafr42au: /tmp/tmpmafr42au.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp0g1a352u: /tmp/tmp0g1a352u.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for (int i = 0; i < items.size(); i++) {\n    if (items[i] == \"(\") {\n      while (items[i] != \")\") {\n        i++;\n      }\n    } else {\n      result += items[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_vvsv13g: /tmp/tmp_vvsv13g.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end()-1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpib5hdhtb: /tmp/tmpib5hdhtb.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item: items) {\n        if(item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpujhpo_tm: /tmp/tmpujhpo_tm.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end()-1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmppysey0w4: /tmp/tmppysey0w4.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find('(') != std::string::npos) {\n      result += item.substr(0, item.find('('));\n    } else {\n      result += item;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpjicdyiu3: /tmp/tmpjicdyiu3.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpav64js7r: /tmp/tmpav64js7r.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.size() > 1) {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp4xeahcf2: /tmp/tmp4xeahcf2.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item == \"(\") {\n            continue;\n        } else if (item == \")\") {\n            continue;\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpm2xz6j7w: /tmp/tmpm2xz6j7w.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp0q7c9qg5: /tmp/tmp0q7c9qg5.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpypyogr7c: /tmp/tmpypyogr7c.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpwvl1pnj9: /tmp/tmpwvl1pnj9.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n    }\n    if (item.find(\")\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n    }\n    result += item;\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpdxvpt2kq: /tmp/tmpdxvpt2kq.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            auto pos = item.find(\"(\");\n            item.erase(pos, item.size() - pos);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpln984fu9: /tmp/tmpln984fu9.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item: items) {\n        if(item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpmwomwpvk: /tmp/tmpmwomwpvk.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            item.erase(0,1);\n            item.erase(item.size()-1,1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123169,
      "stdout": "",
      "stderr": "tmpjbshppah: /tmp/tmpjbshppah.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpypyogr7c: /tmp/tmpypyogr7c.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpj5d8c3io: /tmp/tmpj5d8c3io.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item: items) {\n        if (item.front() == '(') {\n            item.erase(item.begin());\n            item.pop_back();\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp_ctip9ak: /tmp/tmp_ctip9ak.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnglka_v2: /tmp/tmpnglka_v2.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkcz8nizp: /tmp/tmpkcz8nizp.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(auto item : items) {\n        if(item.size() == 0) {\n            continue;\n        }\n        if(item[0] != '(' && item[item.size()-1] != ')') {\n            result += item;\n        } else if(item[0] == '(' && item[item.size()-1] == ')') {\n            result += item.substr(1, item.size()-2);\n        } else if(item[0] == '(') {\n            result += item.substr(1, item.size()-1);\n        } else if(item[item.size()-1] == ')') {\n            result += item.substr(0, item.size()-1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpkf9akdoy: /tmp/tmpkf9akdoy.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\" || items[i] == \")\") {\n            continue;\n        }\n        result += items[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp1__t5kk2: /tmp/tmp1__t5kk2.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmp0q7c9qg5: /tmp/tmp0q7c9qg5.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item == \"(\" || item == \")\") {\n            continue;\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpvg7ok0_c: /tmp/tmpvg7ok0_c.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(' && item[item.length() - 1] == ')') {\n            result += item.substr(1, item.length() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpafz_896k: /tmp/tmpafz_896k.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpt7hberur: /tmp/tmpt7hberur.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpj5d8c3io: /tmp/tmpj5d8c3io.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            result += item.substr(1, item.size() - 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmphupxbc8m: /tmp/tmphupxbc8m.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.size() == 0) {\n            continue;\n        }\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp_5fbigim: /tmp/tmp_5fbigim.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpbv05cg1m: /tmp/tmpbv05cg1m.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (std::string item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp23ktw964: /tmp/tmp23ktw964.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\" || items[i] == \")\") {\n            continue;\n        }\n        result += items[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpbqfnix_b: /tmp/tmpbqfnix_b.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp_kcubzw2: /tmp/tmp_kcubzw2.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmprjpr6rj8: /tmp/tmprjpr6rj8.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            int start = item.find(\"(\");\n            int end = item.find(\")\");\n            item.erase(start, end - start + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmph_d7cxje: /tmp/tmph_d7cxje.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpyf86g44a: /tmp/tmpyf86g44a.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item: items) {\n        if(item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.length() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpy04qtrz5: /tmp/tmpy04qtrz5.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.begin() + item.find(\"(\"), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmptotbfdis: /tmp/tmptotbfdis.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\") {\n            result += items[i];\n        }\n        else {\n            int j = i + 1;\n            int count = 1;\n            while (count != 0) {\n                if (items[j] == \"(\") {\n                    count++;\n                }\n                else if (items[j] == \")\") {\n                    count--;\n                }\n                j++;\n            }\n            i = j;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123171,
      "stdout": "",
      "stderr": "tmpdi2mblx4: /tmp/tmpdi2mblx4.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpbv05cg1m: /tmp/tmpbv05cg1m.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.size() == 1) {\n            result += item;\n        } else {\n            if (item.front() == '(' && item.back() == ')') {\n                result += item.substr(1, item.size() - 2);\n            } else {\n                result += item;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpb4ywfy6e: /tmp/tmpb4ywfy6e.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpv2w_v_tn: /tmp/tmpv2w_v_tn.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpypyogr7c: /tmp/tmpypyogr7c.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpiydlgunj: /tmp/tmpiydlgunj.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpu01l4quu: /tmp/tmpu01l4quu.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpb95ymaw9: /tmp/tmpb95ymaw9.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end()-1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpowe57gb2: /tmp/tmpowe57gb2.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (std::string item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            std::string temp = item.substr(0, item.find(\"(\"));\n            result += temp;\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpupe4fmm5: /tmp/tmpupe4fmm5.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item = item.substr(0, item.find(\"(\"));\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item = item.substr(0, item.find(\")\"));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmp712w4vtl: /tmp/tmp712w4vtl.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpv2w_v_tn: /tmp/tmpv2w_v_tn.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp7ohzpius: /tmp/tmp7ohzpius.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpggtao7u9: /tmp/tmpggtao7u9.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpnd4umr8b: /tmp/tmpnd4umr8b.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\" && items[i] != \")\") {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpppikgbbj: /tmp/tmpppikgbbj.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            result += item.substr(1, item.size() - 2);\n        } else {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpblpq41t7: /tmp/tmpblpq41t7.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpwvl1pnj9: /tmp/tmpwvl1pnj9.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.pop_back();\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpqsg75bhn: /tmp/tmpqsg75bhn.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(item.find(\"(\"), item.find(\")\") - item.find(\"(\") + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpzfjkvx8w: /tmp/tmpzfjkvx8w.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp_v_fu450: /tmp/tmp_v_fu450.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmphswy94e5: /tmp/tmphswy94e5.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] != \"(\") {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpyf86g44a: /tmp/tmpyf86g44a.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp_v_fu450: /tmp/tmp_v_fu450.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item == \"(\") {\n            continue;\n        }\n        if (item == \")\") {\n            continue;\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpicu8xiud: /tmp/tmpicu8xiud.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item = item.substr(0, item.find('('));\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpn1knz7w_: /tmp/tmpn1knz7w_.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string str = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            str += items[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpfqidijf5: /tmp/tmpfqidijf5.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpwvl1pnj9: /tmp/tmpwvl1pnj9.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmprjpr6rj8: /tmp/tmprjpr6rj8.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpggtao7u9: /tmp/tmpggtao7u9.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpnd4umr8b: /tmp/tmpnd4umr8b.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp20fb54ic: /tmp/tmp20fb54ic.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if (item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmphswy94e5: /tmp/tmphswy94e5.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp4ft0iowb: /tmp/tmp4ft0iowb.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp755wcjrh: /tmp/tmp755wcjrh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(item.begin());\n            item.erase(item.end() - 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpkcz8nizp: /tmp/tmpkcz8nizp.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpls9_ymme: /tmp/tmpls9_ymme.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result = \"\";\n  for (auto item : items) {\n    if (item.find('(') == std::string::npos) {\n      result += item;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpoflfl5na: /tmp/tmpoflfl5na.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n        }\n        if (item[item.size() - 1] == ')') {\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpggtao7u9: /tmp/tmpggtao7u9.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmpbv05cg1m: /tmp/tmpbv05cg1m.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            while(items[i] != \")\") {\n                i++;\n            }\n        }\n        else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp7ohzpius: /tmp/tmp7ohzpius.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item = item.substr(1, item.size() - 2);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpd69gj7_m: /tmp/tmpd69gj7_m.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string output;\n    for (auto item : items) {\n        if (item[0] != '(') {\n            output += item;\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpzqbjf7dn: /tmp/tmpzqbjf7dn.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n        }\n        if(item.find(\")\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123168,
      "stdout": "",
      "stderr": "tmpeihqs044: /tmp/tmpeihqs044.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.size() == 1) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpnqrqbi4g: /tmp/tmpnqrqbi4g.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for(auto item : items) {\n        if(item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpat1z19uw: /tmp/tmpat1z19uw.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (int i = 0; i < items.size(); i++) {\n        if (items[i] == \"(\") {\n            while (items[i] != \")\") {\n                i++;\n            }\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmped8c6k08: /tmp/tmped8c6k08.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpqmc1_oy3: /tmp/tmpqmc1_oy3.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(int i = 0; i < items.size(); i++) {\n        if(items[i] == \"(\") {\n            int j = i + 1;\n            while(items[j] != \")\") {\n                j++;\n            }\n            i = j;\n        } else {\n            result += items[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpzq86r8ov: /tmp/tmpzq86r8ov.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(item.find('('), item.find(')') - item.find('(') + 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpnglka_v2: /tmp/tmpnglka_v2.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmpt0jdtqtt: /tmp/tmpt0jdtqtt.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        int start = 0;\n        int end = item.length() - 1;\n        if (item[start] == '(') {\n            start++;\n        }\n        if (item[end] == ')') {\n            end--;\n        }\n        result += item.substr(start, end - start + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123172,
      "stdout": "",
      "stderr": "tmp04jv9jd1: /tmp/tmp04jv9jd1.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find('(') == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmp_v_fu450: /tmp/tmp_v_fu450.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n  std::string result;\n  for (auto item : items) {\n    if (item.find(\"(\") != std::string::npos) {\n      item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n      item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n    }\n    result += item;\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmp004sow4z: /tmp/tmp004sow4z.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for (auto item : items) {\n        if (item[0] == '(') {\n            item.erase(0, 1);\n            item.erase(item.size() - 1, 1);\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1665510055,
      "stdout": "",
      "stderr": "tmplibnwzv2: /tmp/tmplibnwzv2.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result;\n    for(auto item : items) {\n        if(item.find(\"(\") == std::string::npos) {\n            result += item;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123170,
      "stdout": "",
      "stderr": "tmpnd4umr8b: /tmp/tmpnd4umr8b.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nstd::string remove_parenthesis(std::vector<std::string> items) {\n    std::string result = \"\";\n    for (auto item : items) {\n        if (item.find(\"(\") != std::string::npos) {\n            item.erase(std::remove(item.begin(), item.end(), '('), item.end());\n            item.erase(std::remove(item.begin(), item.end(), ')'), item.end());\n        }\n        result += item;\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_parenthesis;\n    assert(candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"string(.abc)\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"alpha(num)\"}))) == (\"alpha\"));\n}\n",
      "timestamp": 1666123166,
      "stdout": "",
      "stderr": "tmpjwsi7g6b: /tmp/tmpjwsi7g6b.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)\"python (chrome)\"}))) == (\"python\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}