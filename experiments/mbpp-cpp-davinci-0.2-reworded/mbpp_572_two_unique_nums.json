{
  "name": "mbpp_572_two_unique_nums",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to remove duplicate numbers from a given number of vectors.\nstd::vector<long> two_unique_nums(std::vector<long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = two_unique_nums;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> unique_nums;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            unique_nums.push_back(nums[i]);\n        } else if (nums[i] != nums[i-1]) {\n            unique_nums.push_back(nums[i]);\n        }\n    }\n    return unique_nums;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (long num : nums) {\n        map[num]++;\n    }\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            result.push_back(it->first);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "  std::vector<long> result;\n  std::unordered_set<long> seen;\n  for (auto num : nums) {\n    if (seen.find(num) == seen.end()) {\n      seen.insert(num);\n      result.push_back(num);\n    }\n  }\n  return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> count;\n    for (auto num : nums) {\n        count[num]++;\n    }\n    for (auto num : nums) {\n        if (count[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto num : nums) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n        }\n    }\n    for (auto num : set) {\n        result.push_back(num);\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto num : nums) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_map<long, int> map;\n    for (auto num : nums) {\n        map[num]++;\n    }\n    for (auto num : nums) {\n        if (map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::sort(nums.begin(), nums.end());\n    for (int i = 0; i < nums.size(); i++) {\n        if (i == 0) {\n            result.push_back(nums[i]);\n        } else if (nums[i] != nums[i - 1]) {\n            result.push_back(nums[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long num : nums) {\n        if (seen.count(num) == 0) {\n            result.push_back(num);\n            seen.insert(num);\n        }\n    }\n    return result;"
  ]
}