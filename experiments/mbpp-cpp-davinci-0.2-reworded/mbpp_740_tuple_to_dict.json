{
  "name": "mbpp_740_tuple_to_dict",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/cppthon-convert-tuple-to-adjacent-pair-map/\nstd::map<long,long> tuple_to_dict(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = tuple_to_dict;\n    assert(candidate(std::make_tuple(1, 5, 7, 10, 13, 5)) == (std::map<long,long>({{1, 5}, {7, 10}, {13, 5}})));\n    assert(candidate(std::make_tuple(1, 2, 3, 4, 5, 6)) == (std::map<long,long>({{1, 2}, {3, 4}, {5, 6}})));\n    assert(candidate(std::make_tuple(7, 8, 9, 10, 11, 12)) == (std::map<long,long>({{7, 8}, {9, 10}, {11, 12}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::map<long,long> test_map;\n    for (int i = 0; i < test_tup.size(); i += 2) {\n        test_map[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_map;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    test_dict[1] = 1;\n    test_dict[2] = 2;\n    test_dict[3] = 3;\n    test_dict[4] = 4;\n    test_dict[5] = 5;\n    test_dict[6] = 6;\n    test_dict[7] = 7;\n    test_dict[8] = 8;\n    test_dict[9] = 9;\n    test_dict[10] = 10;\n    test_dict[11] = 11;\n    test_dict[12] = 12;\n    test_dict[13] = 13;\n    test_dict[14] = 14;\n    test_dict[15] = 15;\n    test_dict[16] = 16;\n    test_dict[17] = 17;\n    test_dict[18] = 18;\n    test_dict[19] = 19;\n    test_dict[20] = 20;\n    test_dict[21] = 21;\n    test_dict[22] = 22;\n    test_dict[23] = 23;\n    test_dict[24] = 24;\n    test_dict[25] = 25;\n    test_dict[26] = 26;\n    test_dict[27] = 27;\n    test_dict[28] = 28;\n    test_dict[29] = 29;\n    test_dict[30] = 30;\n    test_dict[31] = 31;\n    test_dict[32] = 32;\n    test_dict[33] = 33;\n    test_dict[34] = 34;\n    test_dict[35] = 35;\n    test_dict[36] = 36;\n    test_dict[37] = 37;\n    test_dict[38] = 38;\n    test_dict[39] = 39;\n    test_dict[40] = 40;\n    test_dict[41] = 41;\n    test_dict[42] = 42;\n    test_dict[43] = 43;\n    test_dict[44] = 44;\n    test_dict[45] = 45;\n    test",
    "    std::map<long,long> test_map;\n    long key = test_tup[0];\n    long value = test_tup[1];\n    for (int i = 2; i < test_tup.length; i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup != 0) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        }\n        else {\n            value = test_tup[i];\n            test_map[key] = value;\n        }\n    }\n    return test_map;",
    "    std::map<long,long> dict;\n    long i = 0;\n    long j = 1;\n    while (j < test_tup.size()) {\n        dict[test_tup[i]] = test_tup[j];\n        i += 2;\n        j += 2;\n    }\n    return dict;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while(test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_map;\n    long i = 0;\n    while (test_tup) {\n        test_map[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_map;",
    "    std::map<long,long> test_dict;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for (int i = 0; i < std::tuple_size<decltype(test_tuple)>::value; i += 2) {\n        test_dict[std::get<i>(test_tuple)] = std::get<i + 1>(test_tuple);\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long test_tup_arr[test_tup];\n    for (long i = 0; i < test_tup; i++) {\n        test_tup_arr[i] = i;\n    }\n    for (long i = 0; i < test_tup; i++) {\n        test_dict[test_tup_arr[i]] = test_tup_arr[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    for (int i = 0; i < test_tup.size(); i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;",
    "    std::map<long,long> test_map;\n    std::tuple<long,long,long,long,long,long,long,long,long,long> test_tuple = test_tup;\n    for(int i=0;i<9;i++) {\n        test_map[std::get<i>(test_tuple)] = std::get<i+1>(test_tuple);\n    }\n    return test_map;",
    "    std::map<long,long> test_dict;\n    long key = 0;\n    long value = 0;\n    for (int i = 0; i < test_tup.size(); i++) {\n        if (i % 2 == 0) {\n            key = test_tup[i];\n        } else {\n            value = test_tup[i];\n            test_dict[key] = value;\n        }\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long test_tup_len = std::tuple_size<decltype(test_tup)>::value;\n    for(long i = 0; i < test_tup_len; i++) {\n        test_dict[std::get<0>(test_tup)] = std::get<1>(test_tup);\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i = 0;\n    while (test_tup) {\n        test_dict[i] = test_tup % 10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;",
    "    std::map<long,long> test_dict;\n    long i=0;\n    while(test_tup) {\n        test_dict[i] = test_tup%10;\n        test_tup /= 10;\n        i++;\n    }\n    return test_dict;"
  ]
}