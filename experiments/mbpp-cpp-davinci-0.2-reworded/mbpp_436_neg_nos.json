{
  "name": "mbpp_436_neg_nos",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to return the negative numbers in a vector.\nstd::vector<long> neg_nos(std::vector<long> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = neg_nos;\n    assert(candidate((std::vector<long>({(long)-1, (long)4, (long)5, (long)-6}))) == (std::vector<long>({(long)-1, (long)-6})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)3, (long)4}))) == (std::vector<long>({(long)-1, (long)-2})));\n    assert(candidate((std::vector<long>({(long)-7, (long)-6, (long)8, (long)9}))) == (std::vector<long>({(long)-7, (long)-6})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0) {\n            list2.push_back(*i);\n        }\n    }\n    return list2;",
    "    std::vector<long> neg_list;\n    for (auto i : list1) {\n        if (i < 0) {\n            neg_list.push_back(i);\n        }\n    }\n    return neg_list;",
    "    std::vector<long> list2;\n    for(auto i: list1) {\n        if(i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> neg_list;\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (*i < 0) {\n            neg_list.push_back(*i);\n        }\n    }\n    return neg_list;",
    "    std::vector<long> neg_list;\n    for (auto i : list1) {\n        if (i < 0) {\n            neg_list.push_back(i);\n        }\n    }\n    return neg_list;",
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> neg_list;\n    for (auto i : list1) {\n        if (i < 0) {\n            neg_list.push_back(i);\n        }\n    }\n    return neg_list;",
    "    std::vector<long> list2;\n    for(int i=0;i<list1.size();i++) {\n        if(list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> neg_list;\n    for (long i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            neg_list.push_back(list1[i]);\n        }\n    }\n    return neg_list;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] < 0) {\n            list2.push_back(list1[i]);\n        }\n    }\n    return list2;",
    "    std::vector<long> list2;\n    for (auto i : list1) {\n        if (i < 0) {\n            list2.push_back(i);\n        }\n    }\n    return list2;",
    "    std::vector<long> neg_list;\n    for (auto i : list1) {\n        if (i < 0) {\n            neg_list.push_back(i);\n        }\n    }\n    return neg_list;"
  ]
}