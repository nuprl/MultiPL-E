{
  "name": "mbpp_390_add_string",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to apply a given format string to all of the elements in a vector.\nstd::vector<std::string> add_string(std::any list_, std::string string) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = add_string;\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4})), (\"temp{0}\")) == (std::vector<std::string>({(std::string)\"temp1\", (std::string)\"temp2\", (std::string)\"temp3\", (std::string)\"temp4\"})));\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\"})), (\"python{0}\")) == (std::vector<std::string>({(std::string)\"pythona\", (std::string)\"pythonb\", (std::string)\"pythonc\", (std::string)\"pythond\"})));\n    assert(candidate((std::any({(long)5, (long)6, (long)7, (long)8})), (\"string{0}\")) == (std::vector<std::string>({(std::string)\"string5\", (std::string)\"string6\", (std::string)\"string7\", (std::string)\"string8\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string s : list) {\n        new_list.push_back(s + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto &i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[i] + string);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto item : list_) {\n        list.push_back(item + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (int i = 0; i < list_int.size(); i++) {\n            list.push_back(std::to_string(list_int[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<float>)) {\n        std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n        for (int i = 0; i < list_float.size(); i++) {\n            list.push_back(std::to_string(list_float[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (int i = 0; i < list_double.size(); i++) {\n            list.push_back(std::to_string(list_double[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<char>)) {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (int i = 0; i < list_char.size(); i++) {\n            list.push_back(std::to_string(list_char[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<bool>)) {\n        std::vector<bool> list_bool = std::any_cast<std::vector<bool>>(list_);\n        for (int i = 0; i < list_bool.size(); i++) {\n            list.push_back(std::",
    "    std::vector<std::string> list;\n    for (auto i: list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for(auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto& i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (int i = 0; i < list.size(); i++) {\n        new_list.push_back(list[i] + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for(auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i: list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    list.push_back(string);\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto &i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for(auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto &i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto item : list_) {\n        list.push_back(std::to_string(item) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string item : list) {\n        new_list.push_back(item + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  for (int i = 0; i < list.size(); i++) {\n    list[i] += string;\n  }\n  return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto &i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for(auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string item : list) {\n        new_list.push_back(string + item);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string element : list) {\n        new_list.push_back(element + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> result;\n    for(auto i : list_) {\n        result.push_back(std::to_string(i) + string);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto &i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::stringstream ss;\n    ss << list_;\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        list.push_back(item);\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(string + list[i]);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (int i = 0; i < list.size(); i++) {\n        new_list.push_back(list[i] + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (int i = 0; i < list.size(); i++) {\n        result.push_back(list[i] + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "  std::vector<std::string> list;\n  if (list_.type() == typeid(std::vector<std::string>)) {\n    list = std::any_cast<std::vector<std::string>>(list_);\n  } else if (list_.type() == typeid(std::vector<int>)) {\n    std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n    for (int i = 0; i < list_int.size(); i++) {\n      list.push_back(std::to_string(list_int[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<double>)) {\n    std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n    for (int i = 0; i < list_double.size(); i++) {\n      list.push_back(std::to_string(list_double[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<float>)) {\n    std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n    for (int i = 0; i < list_float.size(); i++) {\n      list.push_back(std::to_string(list_float[i]));\n    }\n  } else if (list_.type() == typeid(std::vector<char>)) {\n    std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n    for (int i = 0; i < list_char.size(); i++) {\n      list.push_back(std::to_string(list_char[i]));\n    }\n  } else {\n    std::cout << \"Invalid type\" << '\\n';\n  }\n  for (int i = 0; i < list.size(); i++) {\n    list[i] = string + list[i];\n  }\n  return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (int i = 0; i < list.size(); i++) {\n        new_list.push_back(list[i] + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "  std::vector<std::string> result;\n  for (auto i : list_) {\n    result.push_back(i + string);\n  }\n  return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (std::string item : list) {\n        result.push_back(item + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto &i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for(int i = 0; i < list.size(); i++) {\n        new_list.push_back(list[i] + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    std::any_cast<std::vector<std::string>>(list_);\n    for (auto &i : list) {\n        i = string + i;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (auto i : list_int) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (auto i : list_double) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<float>)) {\n        std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n        for (auto i : list_float) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<char>)) {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (auto i : list_char) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<bool>)) {\n        std::vector<bool> list_bool = std::any_cast<std::vector<bool>>(list_);\n        for (auto i : list_bool) {\n            list.push_back(std::to_string(i));\n        }\n    } else {\n        std::cout << \"Unsupported type\" << std::endl;\n    }\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for(auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string element : list) {\n        new_list.push_back(element + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (auto i : list_int) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (auto i : list_double) {\n            list.push_back(std::to_string(i));\n        }\n    } else {\n        throw std::invalid_argument(\"Invalid type\");\n    }\n    for (auto &i : list) {\n        i = string + i;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (int i = 0; i < list.size(); i++) {\n        new_list.push_back(list[i] + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i = list.begin(); i != list.end(); i++) {\n        new_list.push_back(*i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "  std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n  std::vector<std::string> result;\n  for (auto i : list) {\n    result.push_back(i + string);\n  }\n  return result;",
    "    std::vector<std::string> list;\n    for (auto &i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(std::to_string(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (std::string item : list) {\n        new_list.push_back(item + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (auto i : list_int) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (auto i : list_double) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<float>)) {\n        std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n        for (auto i : list_float) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<long>)) {\n        std::vector<long> list_long = std::any_cast<std::vector<long>>(list_);\n        for (auto i : list_long) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<long long>)) {\n        std::vector<long long> list_long_long = std::any_cast<std::vector<long long>>(list_);\n        for (auto i : list_long_long) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<unsigned int>)) {\n        std::vector<unsigned int> list_unsigned_int = std::any_cast<",
    "    std::vector<std::string> list;\n    std::stringstream ss(list_);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        list.push_back(item);\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> new_list;\n    std::vector<std::any> list = std::any_cast<std::vector<std::any>>(list_);\n    for (auto i : list) {\n        new_list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (int i = 0; i < list_int.size(); i++) {\n            list.push_back(std::to_string(list_int[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (int i = 0; i < list_double.size(); i++) {\n            list.push_back(std::to_string(list_double[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<char>)) {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (int i = 0; i < list_char.size(); i++) {\n            list.push_back(std::to_string(list_char[i]));\n        }\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto element : list_) {\n        list.push_back(element + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for(auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (auto i : list_int) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (auto i : list_double) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<float>)) {\n        std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n        for (auto i : list_float) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<char>)) {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (auto i : list_char) {\n            list.push_back(std::to_string(i));\n        }\n    } else if (list_.type() == typeid(std::vector<bool>)) {\n        std::vector<bool> list_bool = std::any_cast<std::vector<bool>>(list_);\n        for (auto i : list_bool) {\n            list.push_back(std::to_string(i));\n        }\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(i + string);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> result;\n    for (auto i : list) {\n        result.push_back(string + i);\n    }\n    return result;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = list[i] + string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "  std::vector<std::string> list;\n  if (list_.type() == typeid(std::vector<int>)) {\n    std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n    for (int i = 0; i < list_int.size(); i++) {\n      list.push_back(std::to_string(list_int[i]));\n    }\n  }\n  else if (list_.type() == typeid(std::vector<float>)) {\n    std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n    for (int i = 0; i < list_float.size(); i++) {\n      list.push_back(std::to_string(list_float[i]));\n    }\n  }\n  else if (list_.type() == typeid(std::vector<double>)) {\n    std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n    for (int i = 0; i < list_double.size(); i++) {\n      list.push_back(std::to_string(list_double[i]));\n    }\n  }\n  else if (list_.type() == typeid(std::vector<std::string>)) {\n    list = std::any_cast<std::vector<std::string>>(list_);\n  }\n  else {\n    throw std::runtime_error(\"Unsupported type\");\n  }\n  for (int i = 0; i < list.size(); i++) {\n    list[i] = string + list[i];\n  }\n  return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (int i = 0; i < list_int.size(); i++) {\n            list.push_back(std::to_string(list_int[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (int i = 0; i < list_double.size(); i++) {\n            list.push_back(std::to_string(list_double[i]));\n        }\n    } else {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (int i = 0; i < list_char.size(); i++) {\n            list.push_back(std::to_string(list_char[i]));\n        }\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i));\n    }\n    for (auto& i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> new_list;\n    for (auto i : list_) {\n        new_list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] += string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto &i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto &i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    std::stringstream ss(list_);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n        list.push_back(item);\n    }\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = string + list[i];\n    }\n    return list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    } else if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (int i = 0; i < list_int.size(); i++) {\n            list.push_back(std::to_string(list_int[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (int i = 0; i < list_double.size(); i++) {\n            list.push_back(std::to_string(list_double[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<float>)) {\n        std::vector<float> list_float = std::any_cast<std::vector<float>>(list_);\n        for (int i = 0; i < list_float.size(); i++) {\n            list.push_back(std::to_string(list_float[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<char>)) {\n        std::vector<char> list_char = std::any_cast<std::vector<char>>(list_);\n        for (int i = 0; i < list_char.size(); i++) {\n            list.push_back(std::to_string(list_char[i]));\n        }\n    } else if (list_.type() == typeid(std::vector<bool>)) {\n        std::vector<bool> list_bool = std::any_cast<std::vector<bool>>(list_);\n        for (int i = 0; i < list_bool.size(); i++) {\n            list.push_back(std::",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    if (list_.type() == typeid(std::vector<int>)) {\n        std::vector<int> list_int = std::any_cast<std::vector<int>>(list_);\n        for (auto i : list_int) {\n            list.push_back(std::to_string(i));\n        }\n    }\n    else if (list_.type() == typeid(std::vector<double>)) {\n        std::vector<double> list_double = std::any_cast<std::vector<double>>(list_);\n        for (auto i : list_double) {\n            list.push_back(std::to_string(i));\n        }\n    }\n    else if (list_.type() == typeid(std::vector<std::string>)) {\n        list = std::any_cast<std::vector<std::string>>(list_);\n    }\n    else {\n        std::cout << \"Invalid type\" << std::endl;\n    }\n    for (auto &i : list) {\n        i = string + i;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    std::any_cast<std::vector<std::string>>(list_);\n    for (auto &i : list) {\n        i += string;\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    for (int i = 0; i < list.size(); i++) {\n        list[i] = list[i] + string;\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto &i : list_) {\n        list.push_back(std::to_string(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(string + i);\n    }\n    return new_list;",
    "\tstd::vector<std::string> list;\n\tfor (auto i : list_) {\n\t\tlist.push_back(std::to_string(i) + string);\n\t}\n\treturn list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto item : list) {\n        new_list.push_back(string + item);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(std::any_cast<std::string>(i) + string);\n    }\n    return list;",
    "    std::vector<std::string> list = std::any_cast<std::vector<std::string>>(list_);\n    std::vector<std::string> new_list;\n    for (auto i : list) {\n        new_list.push_back(i + string);\n    }\n    return new_list;",
    "    std::vector<std::string> list;\n    for (auto i : list_) {\n        list.push_back(i + string);\n    }\n    return list;",
    "    std::vector<std::string> list;\n    for (auto element : list_) {\n        list.push_back(element + string);\n    }\n    return list;"
  ]
}