{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/cppthon-program-to-count-the-pairs-of-reverse-strings/\nlong count_reverse_pairs(std::vector<std::string> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = count_reverse_pairs;\n    assert(candidate((std::vector<std::string>({(std::string)\"julia\", (std::string)\"best\", (std::string)\"tseb\", (std::string)\"for\", (std::string)\"ailuj\"}))) == (2));\n    assert(candidate((std::vector<std::string>({(std::string)\"geeks\", (std::string)\"best\", (std::string)\"for\", (std::string)\"skeeg\"}))) == (1));\n    assert(candidate((std::vector<std::string>({(std::string)\"makes\", (std::string)\"best\", (std::string)\"sekam\", (std::string)\"for\", (std::string)\"rof\"}))) == (2));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for(auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string rev = *i;\n        std::reverse(rev.begin(), rev.end());\n        if(map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if(map.find(*i) != map.end()) {\n            map[*i]++;\n        } else {\n            map[*i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (int i = 0; i < test_list.size(); i++) {\n        std::string str = test_list[i];\n        std::reverse(str.begin(), str.end());\n        if (map.find(str) != map.end()) {\n            count += map[str];\n        }\n        if (map.find(test_list[i]) != map.end()) {\n            map[test_list[i]]++;\n        } else {\n            map[test_list[i]] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> hash_map;\n    for (auto str : test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if (hash_map.find(rev_str) != hash_map.end()) {\n            count += hash_map[rev_str];\n        }\n        if (hash_map.find(str) != hash_map.end()) {\n            hash_map[str]++;\n        } else {\n            hash_map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i]==test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, long> count_map;\n    for (auto &test_string : test_list) {\n        std::string reverse_string = test_string;\n        std::reverse(reverse_string.begin(), reverse_string.end());\n        count_map[reverse_string]++;\n    }\n    long count = 0;\n    for (auto &test_string : test_list) {\n        std::string reverse_string = test_string;\n        std::reverse(reverse_string.begin(), reverse_string.end());\n        if (count_map.find(test_string) != count_map.end()) {\n            count += count_map[test_string];\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = 0; i < test_list.size(); i++) {\n        for (auto j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto str : test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if (map.find(rev_str) != map.end()) {\n            count += map[rev_str];\n        }\n        if (map.find(str) != map.end()) {\n            map[str] += 1;\n        }\n        else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(str) != map.end()) {\n            map[str] += 1;\n        } else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string str1 = test_list[i];\n            std::string str2 = test_list[j];\n            std::reverse(str1.begin(), str1.end());\n            if (str1 == str2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(*i) != map.end()) {\n            map[*i] += 1;\n        } else {\n            map[*i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, long> reverse_pairs;\n    for (auto &str : test_list) {\n        std::string reverse_str = str;\n        std::reverse(reverse_str.begin(), reverse_str.end());\n        if (reverse_pairs.find(reverse_str) != reverse_pairs.end()) {\n            reverse_pairs[reverse_str] += 1;\n        } else {\n            reverse_pairs[str] = 0;\n        }\n    }\n    long count = 0;\n    for (auto &pair : reverse_pairs) {\n        count += pair.second;\n    }\n    return count;",
    "\tlong count = 0;\n\tfor (int i = 0; i < test_list.size(); i++) {\n\t\tfor (int j = i + 1; j < test_list.size(); j++) {\n\t\t\tif (test_list[i] == test_list[j]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        std::string rev = *it;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(*it) != map.end()) {\n            map[*it] += 1;\n        } else {\n            map[*it] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i].compare(test_list[j])==0){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> m;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (m.find(rev) != m.end()) {\n            count += m[rev];\n        }\n        if (m.find(i) != m.end()) {\n            m[i]++;\n        } else {\n            m[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        m[rev]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        count += m[i];\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> m;\n    for(auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if(m.find(rev) != m.end()) {\n            m[rev]++;\n        } else {\n            m[i] = 1;\n        }\n    }\n    long count = 0;\n    for(auto i : m) {\n        if(i.second > 1) {\n            count += (i.second * (i.second - 1))/2;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = 0; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                continue;\n            }\n            std::string temp = test_list[i];\n            std::reverse(temp.begin(), temp.end());\n            if (temp == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string str1 = test_list[i];\n            std::string str2 = test_list[j];\n            std::reverse(str1.begin(), str1.end());\n            if (str1 == str2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(*i) != map.end()) {\n            map[*i] += 1;\n        } else {\n            map[*i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i=0; i<test_list.size(); i++) {\n        for(int j=i+1; j<test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (int i = 0; i < test_list.size(); i++) {\n        std::string rev = test_list[i];\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(test_list[i]) != map.end()) {\n            map[test_list[i]]++;\n        } else {\n            map[test_list[i]] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            std::string temp = test_list[i];\n            std::reverse(temp.begin(), temp.end());\n            if(temp == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for (auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        map[temp]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        if (map.find(i) != map.end()) {\n            count += map[i];\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count_map;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        std::string str = *it;\n        std::reverse(str.begin(), str.end());\n        count_map[str]++;\n    }\n    long count = 0;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        std::string str = *it;\n        std::reverse(str.begin(), str.end());\n        if (count_map.find(str) != count_map.end()) {\n            count += count_map[str];\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<test_list.size();i++)\n    {\n        for(int j=i+1;j<test_list.size();j++)\n        {\n            if(test_list[i]==test_list[j])\n            {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s1.begin(), s1.end());\n            if(s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = i + 1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = 0; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                continue;\n            }\n            std::string temp = test_list[j];\n            std::reverse(temp.begin(), temp.end());\n            if(test_list[i] == temp) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++){\n        for(int j = i+1; j < test_list.size(); j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(temp == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(i) != map.end()) {\n            map[i]++;\n        } else {\n            map[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for(auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        map[temp]++;\n    }\n    long count = 0;\n    for(auto i : test_list) {\n        if(map.find(i) != map.end()) {\n            count += map[i];\n            map.erase(i);\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string first = test_list[i];\n            std::string second = test_list[j];\n            std::reverse(first.begin(), first.end());\n            if (first == second) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> m;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (m.find(rev) != m.end()) {\n            count += m[rev];\n        }\n        m[i]++;\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s1.begin(), s1.end());\n            if (s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        for (auto j = i + 1; j != test_list.end(); j++) {\n            if (*i == *j) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count=0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            string s1=test_list[i];\n            string s2=test_list[j];\n            reverse(s1.begin(),s1.end());\n            if(s1==s2){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(str) != map.end()) {\n            map[str]++;\n        } else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> hash_map;\n    for(auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if(hash_map.find(rev) != hash_map.end()) {\n            hash_map[rev]++;\n        }\n        else {\n            hash_map[i] = 1;\n        }\n    }\n    long count = 0;\n    for(auto i : hash_map) {\n        if(i.second > 1) {\n            count += i.second * (i.second - 1) / 2;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> count_map;\n    for (auto &str : test_list) {\n        std::reverse(str.begin(), str.end());\n        count_map[str]++;\n    }\n    long count = 0;\n    for (auto &str : test_list) {\n        count += count_map[str];\n    }\n    return count;",
    "    std::unordered_map<std::string, int> mymap;\n    for(int i=0;i<test_list.size();i++)\n    {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if(mymap.find(temp) != mymap.end())\n        {\n            mymap[temp]++;\n        }\n        else\n        {\n            mymap[test_list[i]] = 1;\n        }\n    }\n    long count = 0;\n    for(auto it = mymap.begin(); it != mymap.end(); it++)\n    {\n        if(it->second > 1)\n        {\n            count += (it->second * (it->second - 1))/2;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto i : test_list) {\n        std::string rev = i;\n        std::reverse(rev.begin(), rev.end());\n        if (map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if (map.find(i) != map.end()) {\n            map[i]++;\n        } else {\n            map[i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(*i) != map.end()) {\n            map[*i] += 1;\n        } else {\n            map[*i] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, long> map;\n    for(auto &str : test_list) {\n        std::string rev = str;\n        std::reverse(rev.begin(), rev.end());\n        if(map.find(rev) != map.end()) {\n            count += map[rev];\n        }\n        if(map.find(str) != map.end()) {\n            map[str]++;\n        } else {\n            map[str] = 1;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s1.begin(), s1.end());\n            if (s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::unordered_map<std::string, int> map;\n    for (auto i = test_list.begin(); i != test_list.end(); i++) {\n        std::string temp = *i;\n        std::reverse(temp.begin(), temp.end());\n        if (map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n        if (map.find(*i) != map.end()) {\n            map[*i] += 1;\n        } else {\n            map[*i] = 1;\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i] == test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i=0;i<test_list.size();i++){\n        for(int j=i+1;j<test_list.size();j++){\n            if(test_list[i]==test_list[j]){\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> my_map;\n    for (auto i : test_list) {\n        std::string temp = i;\n        std::reverse(temp.begin(), temp.end());\n        my_map[temp]++;\n    }\n    long count = 0;\n    for (auto i : test_list) {\n        if (my_map.find(i) != my_map.end()) {\n            count += my_map[i];\n            my_map.erase(i);\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::map<std::string, int> map_str;\n    for(auto str: test_list) {\n        std::string rev_str = str;\n        std::reverse(rev_str.begin(), rev_str.end());\n        if(map_str.find(rev_str) != map_str.end()) {\n            map_str[rev_str]++;\n        } else {\n            map_str[str] = 1;\n        }\n    }\n    long count = 0;\n    for(auto it = map_str.begin(); it != map_str.end(); it++) {\n        if(it->second > 1) {\n            count += (it->second * (it->second - 1)) / 2;\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count += 1;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    std::unordered_map<std::string, int> map;\n    for(int i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if(map.find(temp) != map.end()) {\n            map[temp] += 1;\n        } else {\n            map[temp] = 1;\n        }\n    }\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        std::string temp = test_list[i];\n        std::reverse(temp.begin(), temp.end());\n        if(map.find(temp) != map.end()) {\n            count += map[temp];\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            std::string temp = test_list[i];\n            std::reverse(temp.begin(), temp.end());\n            if (temp == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s2.begin(), s2.end());\n            if(s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for (int i = 0; i < test_list.size(); i++) {\n        for (int j = i + 1; j < test_list.size(); j++) {\n            if (test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i+1; j < test_list.size(); j++) {\n            if(test_list[i] == test_list[j]) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    for(int i = 0; i < test_list.size(); i++) {\n        for(int j = i + 1; j < test_list.size(); j++) {\n            std::string s1 = test_list[i];\n            std::string s2 = test_list[j];\n            std::reverse(s1.begin(), s1.end());\n            if(s1 == s2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "  long count = 0;\n  for (int i = 0; i < test_list.size(); i++) {\n    for (int j = i + 1; j < test_list.size(); j++) {\n      if (test_list[i] == test_list[j]) {\n        count++;\n      }\n    }\n  }\n  return count;"
  ]
}