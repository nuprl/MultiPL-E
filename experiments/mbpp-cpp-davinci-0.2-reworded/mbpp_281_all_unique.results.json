{
  "name": "mbpp_281_all_unique",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_list.size() == test_set.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set;\n    for (long i : test_list) {\n        unique_set.insert(i);\n    }\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_list.size() == test_set.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s;\n    for(auto i:test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s;\n    for (auto i : test_list) {\n        if (s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_list.size() == test_set.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s;\n    for (long i = 0; i < test_list.size(); i++) {\n        s.insert(test_list[i]);\n    }\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for(int i=0;i<test_list.size();i++) {\n        test_set.insert(test_list[i]);\n    }\n    if(test_set.size() == test_list.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_list.size() == test_set.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set;\n    for (auto i : test_list) {\n        unique_set.insert(i);\n    }\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> set_list;\n    for (int i = 0; i < test_list.size(); i++) {\n        set_list.insert(test_list[i]);\n    }\n    if (set_list.size() == test_list.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::unordered_set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s;\n    for (auto i : test_list) {\n        s.insert(i);\n    }\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.count(i) == 0) {\n            test_set.insert(i);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        if (unique_set.find(test_list[i]) != unique_set.end()) {\n            return false;\n        }\n        unique_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return (test_set.size() == test_list.size());\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for (it = test_list.begin(); it != test_list.end(); ++it) {\n        for (it2 = it + 1; it2 != test_list.end(); ++it2) {\n            if (*it == *it2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) == test_set.end()) {\n            test_set.insert(i);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i: test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for(long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_list.size() == test_set.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::unordered_set<long> test_set;\n    for (long i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::unordered_set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::unordered_set<long> set_of_elements;\n    for (auto element : test_list) {\n        if (set_of_elements.find(element) != set_of_elements.end()) {\n            return false;\n        }\n        set_of_elements.insert(element);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return (test_set.size() == test_list.size());\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (int i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s(test_list.begin(), test_list.end());\n    return s.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto &i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    if (test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto it = test_list.begin(); it != test_list.end(); it++) {\n        test_set.insert(*it);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set;\n    for (auto i : test_list) {\n        unique_set.insert(i);\n    }\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> s;\n    for (auto i : test_list) {\n        if (s.find(i) != s.end()) {\n            return false;\n        }\n        s.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::sort(test_list.begin(), test_list.end());\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] == test_list[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::unordered_set<long> set_of_elements;\n    for(auto i: test_list) {\n        if(set_of_elements.find(i) == set_of_elements.end()) {\n            set_of_elements.insert(i);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_list.size() == test_set.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for(long i = 0; i < test_list.size(); i++) {\n        test_set.insert(test_list[i]);\n    }\n    if(test_set.size() == test_list.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) == test_set.end()) {\n            test_set.insert(test_list[i]);\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124220,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i: test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        if (test_set.find(i) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(i);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (test_set.find(test_list[i]) != test_set.end()) {\n            return false;\n        }\n        test_set.insert(test_list[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_list.size() == test_set.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set;\n    for (auto i : test_list) {\n        test_set.insert(i);\n    }\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> unique_set(test_list.begin(), test_list.end());\n    return unique_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check if the elements of a given vector are unique or not.\nbool all_unique(std::vector<long> test_list) {\n    std::set<long> test_set(test_list.begin(), test_list.end());\n    return test_set.size() == test_list.size();\n}\nint main() {\n    auto candidate = all_unique;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n}\n",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}