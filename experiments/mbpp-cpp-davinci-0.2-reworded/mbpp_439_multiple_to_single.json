{
  "name": "mbpp_439_multiple_to_single",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to join a vector of multiple integers into a single integer.\nlong multiple_to_single(std::vector<long> L) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = multiple_to_single;\n    assert(candidate((std::vector<long>({(long)11, (long)33, (long)50}))) == (113350));\n    assert(candidate((std::vector<long>({(long)-1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (-123456));\n    assert(candidate((std::vector<long>({(long)10, (long)15, (long)20, (long)25}))) == (10152025));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long long int sum = 0;\n    for(int i = 0; i < L.size(); i++)\n    {\n        sum = sum * 10 + L[i];\n    }\n    return sum;",
    "    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "  long result = 0;\n  for (int i = 0; i < L.size(); i++) {\n    result = result * 10 + L[i];\n  }\n  return result;",
    "    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    std::string s;\n    for(auto x: L) {\n        s += std::to_string(x);\n    }\n    return std::stol(s);",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (auto i : L) {\n        result = result * 10 + i;\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (long i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;",
    "    long result = 0;\n    for (int i = 0; i < L.size(); i++) {\n        result = result * 10 + L[i];\n    }\n    return result;"
  ]
}