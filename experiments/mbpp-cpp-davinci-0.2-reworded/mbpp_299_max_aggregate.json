{
  "name": "mbpp_299_max_aggregate",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to calculate the maximum aggregate from the vector of tuples.\nUnion_std_string_long max_aggregate(std::vector<Union_std_string_long> stdata) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_aggregate;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 7), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 122), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 84)}))) == std::make_tuple(\"Juan Whelan\", 212));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 50), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 48), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 37), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 22), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 14)}))) == std::make_tuple(\"Juan Whelan\", 72));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 10), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 20), (std::tuple<std::string, long>)std::make_tuple(\"Peter Nichols\", 30), (std::tuple<std::string, long>)std::make_tuple(\"Juan Whelan\", 40), (std::tuple<std::string, long>)std::make_tuple(\"Sabah Colley\", 50)}))) == std::make_tuple(\"Sabah Colley\", 70));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for(int i = 0; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] == max_aggregate) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0.size() > max_aggregate.f0.size()) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_value = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i] > max_value) {\n            max_value = stdata[i];\n        }\n    }\n    return max_value;",
    "    Union_std_string_long max_aggregate_value;\n    max_aggregate_value.f1 = 0;\n    for (auto it = stdata.begin(); it != stdata.end(); ++it) {\n        if (it->f1 > max_aggregate_value.f1) {\n            max_aggregate_value.f1 = it->f1;\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 0; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate_value;\n    max_aggregate_value.f0 = \"\";\n    max_aggregate_value.f1 = 0;\n    for (auto it = stdata.begin(); it != stdata.end(); it++) {\n        if (it->f0 == \"\") {\n            if (it->f1 > max_aggregate_value.f1) {\n                max_aggregate_value.f1 = it->f1;\n            }\n        } else {\n            if (it->f0 > max_aggregate_value.f0) {\n                max_aggregate_value.f0 = it->f0;\n            }\n        }\n    }\n    return max_aggregate_value;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (max_aggregate.f1 < stdata[i].f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max = stdata[0];\n    for(int i = 1; i < stdata.size(); i++) {\n        if(stdata[i].f1 > max.f1) {\n            max = stdata[i];\n        }\n    }\n    return max;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f1 > max_aggregate.f1) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;",
    "    Union_std_string_long max_aggregate = stdata[0];\n    for (int i = 1; i < stdata.size(); i++) {\n        if (stdata[i].f0 > max_aggregate.f0) {\n            max_aggregate = stdata[i];\n        }\n    }\n    return max_aggregate;"
  ]
}