{
  "name": "mbpp_64_subject_marks",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to sort a vector of tuples using the second value of each tuple.\nstd::vector<Union_std_string_long> subject_marks(std::vector<Union_std_string_long> subjectmarks) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = subject_marks;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82), (std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54), (std::tuple<std::string, long>)std::make_tuple(\"Social\", 33)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Social\", 33), (std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Physics\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> subject_marks;\n    std::vector<std::string> subjects;\n    std::vector<long> marks;\n    for(int i=0;i<subjectmarks.size();i++) {\n        if(subjectmarks[i] == \"maths\") {\n            marks.push_back(subjectmarks[i]);\n        }\n        else {\n            subjects.push_back(subjectmarks[i]);\n        }\n    }\n    std::sort(marks.begin(),marks.end());\n    std::sort(subjects.begin(),subjects.end());\n    for(int i=0;i<marks.size();i++) {\n        subject_marks.push_back(marks[i]);\n        subject_marks.push_back(subjects[i]);\n    }\n    return subject_marks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subject_marks.push_back(*i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::map<std::string,long> subject_marks_map;\n    for(auto i : subjectmarks) {\n        if(i == \"maths\") {\n            subject_marks_map.insert(std::make_pair(\"maths\",i));\n        }\n        if(i == \"physics\") {\n            subject_marks_map.insert(std::make_pair(\"physics\",i));\n        }\n        if(i == \"chemistry\") {\n            subject_marks_map.insert(std::make_pair(\"chemistry\",i));\n        }\n    }\n    for(auto i : subject_marks_map) {\n        sorted_subjectmarks.push_back(i.second);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for(auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_marks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Physics\") {\n            sorted_marks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Chemistry\") {\n            sorted_marks.push_back(*it);\n        }\n    }\n    return sorted_marks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"physics\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"physics\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it2;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        for(it2 = it + 1; it2 != subjectmarks.end(); it2++) {\n            if((*it).f1 < (*it2).f1) {\n                Union_std_string_long temp = *it;\n                *it = *it2;\n                *it2 = temp;\n            }\n        }\n    }\n    return subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        if (i.f0 == \"\") {\n            sorted_subject_marks.push_back(i.f1);\n        } else {\n            sorted_subject_marks.push_back(i.f0);\n        }\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f1 > 40) {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long> sorted_subjectmarks_long;\n    std::vector<Union_std_string_long> sorted_subjectmarks_string;\n    for(int i=0;i<subjectmarks.size();i++){\n        if(subjectmarks[i]==\"Maths\"||subjectmarks[i]==\"Physics\"||subjectmarks[i]==\"Chemistry\"||subjectmarks[i]==\"Biology\"||subjectmarks[i]==\"Computer\"){\n            sorted_subjectmarks_string.push_back(subjectmarks[i]);\n        }\n        else{\n            sorted_subjectmarks_long.push_back(subjectmarks[i]);\n        }\n    }\n    std::sort(sorted_subjectmarks_long.begin(),sorted_subjectmarks_long.end());\n    for(int i=0;i<sorted_subjectmarks_long.size();i++){\n        sorted_subjectmarks.push_back(sorted_subjectmarks_long[i]);\n    }\n    for(int i=0;i<sorted_subjectmarks_string.size();i++){\n        sorted_subjectmarks.push_back(sorted_subjectmarks_string[i]);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        result.push_back(*it);\n    }\n    std::sort(result.begin(), result.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_2;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_3;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_4;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_5;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_6;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_7;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_8;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_9;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_10;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_11;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_12;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_13;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_14;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_15;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_16;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_17;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_18;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_19;\n    std::vector<Union_std_string_long> sorted_subject_marks_temp_20;\n    std::vector<Union_std_string_long>",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subjectmarks.push_back(*i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f1 >= 50) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 < 50) {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 >= 50) {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::map<std::string, long> map;\n    for (auto i : subjectmarks) {\n        if (i == \"Maths\") {\n            map[i.f0] = i.f1;\n        }\n        if (i == \"Physics\") {\n            map[i.f0] = i.f1;\n        }\n        if (i == \"Chemistry\") {\n            map[i.f0] = i.f1;\n        }\n    }\n    for (auto i : map) {\n        result.push_back(Union_std_string_long(i.first));\n        result.push_back(Union_std_string_long(i.second));\n    }\n    return result;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subjectmarks.push_back(*i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](auto &a, auto &b) {\n        return a.f1 < b.f1;\n    });\n    for (auto &i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Physics\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long> marks;\n    std::vector<Union_std_string_long> subjects;\n    for(int i=0;i<subjectmarks.size();i++){\n        if(subjectmarks[i]==\"Maths\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i]==\"Physics\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i]==\"Chemistry\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i]==\"Biology\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i]==\"English\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i]==\"Computer\"){\n            marks.push_back(subjectmarks[i+1]);\n            subjects.push_back(subjectmarks[i]);\n        }\n    }\n    std::sort(marks.begin(),marks.end());\n    for(int i=0;i<marks.size();i++){\n        for(int j=0;j<subjects.size();j++){\n            if(marks[i]==subjects[j+1]){\n                result.push_back(subjects[j]);\n                result.push_back(marks[i]);\n            }\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subject_marks.push_back(i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for(auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subjectmarks.push_back(*i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long> sorted_subject_marks_1;\n    std::vector<Union_std_string_long> sorted_subject_marks_2;\n    std::vector<Union_std_string_long> sorted_subject_marks_3;\n    std::vector<Union_std_string_long> sorted_subject_marks_4;\n    std::vector<Union_std_string_long> sorted_subject_marks_5;\n    std::vector<Union_std_string_long> sorted_subject_marks_6;\n    std::vector<Union_std_string_long> sorted_subject_marks_7;\n    std::vector<Union_std_string_long> sorted_subject_marks_8;\n    std::vector<Union_std_string_long> sorted_subject_marks_9;\n    std::vector<Union_std_string_long> sorted_subject_marks_10;\n    std::vector<Union_std_string_long> sorted_subject_marks_11;\n    std::vector<Union_std_string_long> sorted_subject_marks_12;\n    std::vector<Union_std_string_long> sorted_subject_marks_13;\n    std::vector<Union_std_string_long> sorted_subject_marks_14;\n    std::vector<Union_std_string_long> sorted_subject_marks_15;\n    std::vector<Union_std_string_long> sorted_subject_marks_16;\n    std::vector<Union_std_string_long> sorted_subject_marks_17;\n    std::vector<Union_std_string_long> sorted_subject_marks_18;\n    std::vector<Union_std_string_long> sorted_subject_marks_19;\n    std::vector<Union_std_string_long> sorted_subject_marks_20;\n    std::vector<Union_std_string_long> sorted_subject_marks_21;\n    std::vector<Union_std_string_long> sorted_subject_marks_22;\n    std::vector<Union_",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long &a, const Union_std_string_long &b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Physics\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long> result1;\n    std::vector<Union_std_string_long> result2;\n    std::vector<Union_std_string_long> result3;\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if ((*i).f1 >= 90) {\n            result.push_back(*i);\n        }\n        else if ((*i).f1 >= 80) {\n            result1.push_back(*i);\n        }\n        else if ((*i).f1 >= 70) {\n            result2.push_back(*i);\n        }\n        else {\n            result3.push_back(*i);\n        }\n    }\n    result.insert(result.end(), result1.begin(), result1.end());\n    result.insert(result.end(), result2.begin(), result2.end());\n    result.insert(result.end(), result3.begin(), result3.end());\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subjectmarks_final_final_final_final_final_final_final_final_final_final_final_final_final_final;\n    std::vector<Union_std_string_long> sorted_subject",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> v;\n    std::vector<Union_std_string_long> v1;\n    std::vector<Union_std_string_long> v2;\n    for(int i = 0; i < subjectmarks.size(); i++) {\n        if(subjectmarks[i] == \"Maths\") {\n            v.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i] == \"Physics\") {\n            v1.push_back(subjectmarks[i]);\n        }\n        else if(subjectmarks[i] == \"Chemistry\") {\n            v2.push_back(subjectmarks[i]);\n        }\n    }\n    v.insert(v.end(), v1.begin(), v1.end());\n    v.insert(v.end(), v2.begin(), v2.end());\n    return v;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b){\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i] == \"Maths\") {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i] == \"Physics\") {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i] == \"Chemistry\") {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i] == \"English\") {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i] == \"Computer\") {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long> sorted_subjectmarks_long;\n    std::vector<Union_std_string_long> sorted_subjectmarks_string;\n    for (auto i : subjectmarks) {\n        if (i.f0 == \"\") {\n            sorted_subjectmarks_long.push_back(i);\n        } else {\n            sorted_subjectmarks_string.push_back(i);\n        }\n    }\n    std::sort(sorted_subjectmarks_long.begin(), sorted_subjectmarks_long.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    std::sort(sorted_subjectmarks_string.begin(), sorted_subjectmarks_string.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f0 < b.f0;\n    });\n    sorted_subjectmarks.insert(sorted_subjectmarks.end(), sorted_subjectmarks_long.begin(), sorted_subjectmarks_long.end());\n    sorted_subjectmarks.insert(sorted_subjectmarks.end(), sorted_subjectmarks_string.begin(), sorted_subjectmarks_string.end());\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if(it->f0 == \"maths\") {\n            result.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"English\") {\n            sorted_subjectmarks.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Science\") {\n            sorted_subjectmarks.push_back(*i);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for(auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        for (it1 = it + 1; it1 != subjectmarks.end(); ++it1) {\n            if (it->f1 < it1->f1) {\n                std::swap(it->f1, it1->f1);\n                std::swap(it->f0, it1->f0);\n            }\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        result.push_back(*it);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); ++i) {\n        if (i->f1 >= 40) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it) == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it) == \"Physics\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it) == \"Chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it) == \"Biology\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it) == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::map<long, std::string> map;\n    for (auto i : subjectmarks) {\n        if (i.f1 == i.f1) {\n            map[i.f1] = i.f0;\n        }\n    }\n    for (auto i : map) {\n        result.push_back(Union_std_string_long(i.second));\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> subject_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if ((*it).f0 == \"Maths\") {\n            subject_marks.push_back(*it);\n        }\n    }\n    return subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subject_marks.push_back(*i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long> result1;\n    std::vector<Union_std_string_long> result2;\n    std::vector<Union_std_string_long> result3;\n    std::vector<Union_std_string_long> result4;\n    std::vector<Union_std_string_long> result5;\n    std::vector<Union_std_string_long> result6;\n    std::vector<Union_std_string_long> result7;\n    std::vector<Union_std_string_long> result8;\n    std::vector<Union_std_string_long> result9;\n    std::vector<Union_std_string_long> result10;\n    std::vector<Union_std_string_long> result11;\n    std::vector<Union_std_string_long> result12;\n    std::vector<Union_std_string_long> result13;\n    std::vector<Union_std_string_long> result14;\n    std::vector<Union_std_string_long> result15;\n    std::vector<Union_std_string_long> result16;\n    std::vector<Union_std_string_long> result17;\n    std::vector<Union_std_string_long> result18;\n    std::vector<Union_std_string_long> result19;\n    std::vector<Union_std_string_long> result20;\n    std::vector<Union_std_string_long> result21;\n    std::vector<Union_std_string_long> result22;\n    std::vector<Union_std_string_long> result23;\n    std::vector<Union_std_string_long> result24;\n    std::vector<Union_std_string_long> result25;\n    std::vector<Union_std_string_long> result26;\n    std::vector<Union_std_string_long> result27;\n    std::vector<Union_std_string_long> result28;\n    std::vector<Union_std_string_long> result29;\n    std",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 > 50) {\n            sorted_subjectmarks.push_back(*it);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        result.push_back(*i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subjectmarks.push_back(*i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    for(int i = 0; i < subjectmarks.size(); i++) {\n        if(subjectmarks[i].f1 >= 40) {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); ++it) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        result.push_back(*i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"physics\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subject_marks.push_back(i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    for (int i = 0; i < subjectmarks.size(); i++) {\n        if (subjectmarks[i].f1 >= 40) {\n            sorted_subjectmarks.push_back(subjectmarks[i]);\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 > 50) {\n            sorted_subject_marks.push_back(*it);\n        }\n    }\n    return sorted_subject_marks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            sorted_subjectmarks.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Physics\") {\n            sorted_subjectmarks.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Chemistry\") {\n            sorted_subjectmarks.push_back(Union_std_string_long(it->f1));\n        }\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for(auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if ((*it).f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if ((*it).f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if ((*it).f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> subject_marks;\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Maths\") {\n            subject_marks.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Science\") {\n            subject_marks.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"English\") {\n            subject_marks.push_back(*i);\n        }\n    }\n    return subject_marks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subjectmarks.push_back(*i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std::vector<Union_std_string_long>::iterator it26;\n    std",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long> result1;\n    std::vector<Union_std_string_long> result2;\n    std::vector<Union_std_string_long> result3;\n    std::vector<Union_std_string_long> result4;\n    std::vector<Union_std_string_long> result5;\n    std::vector<Union_std_string_long> result6;\n    std::vector<Union_std_string_long> result7;\n    std::vector<Union_std_string_long> result8;\n    std::vector<Union_std_string_long> result9;\n    std::vector<Union_std_string_long> result10;\n    std::vector<Union_std_string_long> result11;\n    std::vector<Union_std_string_long> result12;\n    std::vector<Union_std_string_long> result13;\n    std::vector<Union_std_string_long> result14;\n    std::vector<Union_std_string_long> result15;\n    std::vector<Union_std_string_long> result16;\n    std::vector<Union_std_string_long> result17;\n    std::vector<Union_std_string_long> result18;\n    std::vector<Union_std_string_long> result19;\n    std::vector<Union_std_string_long> result20;\n    std::vector<Union_std_string_long> result21;\n    std::vector<Union_std_string_long> result22;\n    std::vector<Union_std_string_long> result23;\n    std::vector<Union_std_string_long> result24;\n    std::vector<Union_std_string_long> result25;\n    std::vector<Union_std_string_long> result26;\n    std::vector<Union_std_string_long> result27;\n    std::vector<Union_std_string_long> result28;\n    std::vector<Union_std_string_long> result29;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Maths\") {\n            result.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Physics\") {\n            result.push_back(*i);\n        }\n    }\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        if (i->f0 == \"Chemistry\") {\n            result.push_back(*i);\n        }\n    }\n    return result;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](auto &left, auto &right) {\n        return left.f1 < right.f1;\n    });\n    for (auto &i : subjectmarks) {\n        sorted_subject_marks.push_back(i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if(it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;"
  ]
}