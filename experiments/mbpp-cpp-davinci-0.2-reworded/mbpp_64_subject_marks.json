{
  "name": "mbpp_64_subject_marks",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Write a function to sort a vector of tuples using the second value of each tuple.\nstd::vector<Union_std_string_long> subject_marks(std::vector<Union_std_string_long> subjectmarks) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = subject_marks;\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Social sciences\", 82), (std::tuple<std::string, long>)std::make_tuple(\"English\", 88), (std::tuple<std::string, long>)std::make_tuple(\"Science\", 90), (std::tuple<std::string, long>)std::make_tuple(\"Maths\", 97)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54), (std::tuple<std::string, long>)std::make_tuple(\"Social\", 33)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Social\", 33), (std::tuple<std::string, long>)std::make_tuple(\"Telugu\", 49), (std::tuple<std::string, long>)std::make_tuple(\"Hindhi\", 54)})));\n    assert(candidate((std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97), (std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45)}))) == (std::vector<Union_std_string_long>({(std::tuple<std::string, long>)std::make_tuple(\"Biology\", 45), (std::tuple<std::string, long>)std::make_tuple(\"Physics\", 96), (std::tuple<std::string, long>)std::make_tuple(\"Chemistry\", 97)})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Physics\") {\n            result.push_back(*it);\n        }\n    }\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f0 == \"Chemistry\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> subject_marks;\n    std::vector<std::string> subjects;\n    std::vector<long> marks;\n    for(int i=0;i<subjectmarks.size();i++) {\n        if(subjectmarks[i] == \"maths\") {\n            marks.push_back(subjectmarks[i]);\n        }\n        else {\n            subjects.push_back(subjectmarks[i]);\n        }\n    }\n    std::sort(marks.begin(),marks.end());\n    std::sort(subjects.begin(),subjects.end());\n    for(int i=0;i<marks.size();i++) {\n        subject_marks.push_back(marks[i]);\n        subject_marks.push_back(subjects[i]);\n    }\n    return subject_marks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subject_marks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i = subjectmarks.begin(); i != subjectmarks.end(); i++) {\n        sorted_subject_marks.push_back(*i);\n    }\n    return sorted_subject_marks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::map<std::string,long> subject_marks_map;\n    for(auto i : subjectmarks) {\n        if(i == \"maths\") {\n            subject_marks_map.insert(std::make_pair(\"maths\",i));\n        }\n        if(i == \"physics\") {\n            subject_marks_map.insert(std::make_pair(\"physics\",i));\n        }\n        if(i == \"chemistry\") {\n            subject_marks_map.insert(std::make_pair(\"chemistry\",i));\n        }\n    }\n    for(auto i : subject_marks_map) {\n        sorted_subjectmarks.push_back(i.second);\n    }\n    return sorted_subjectmarks;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        sorted_subjectmarks.push_back(i);\n    }\n    return sorted_subjectmarks;",
    "    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for(it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if((*it).f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f1 >= 40) {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    std::vector<Union_std_string_long>::iterator it1;\n    std::vector<Union_std_string_long>::iterator it2;\n    std::vector<Union_std_string_long>::iterator it3;\n    std::vector<Union_std_string_long>::iterator it4;\n    std::vector<Union_std_string_long>::iterator it5;\n    std::vector<Union_std_string_long>::iterator it6;\n    std::vector<Union_std_string_long>::iterator it7;\n    std::vector<Union_std_string_long>::iterator it8;\n    std::vector<Union_std_string_long>::iterator it9;\n    std::vector<Union_std_string_long>::iterator it10;\n    std::vector<Union_std_string_long>::iterator it11;\n    std::vector<Union_std_string_long>::iterator it12;\n    std::vector<Union_std_string_long>::iterator it13;\n    std::vector<Union_std_string_long>::iterator it14;\n    std::vector<Union_std_string_long>::iterator it15;\n    std::vector<Union_std_string_long>::iterator it16;\n    std::vector<Union_std_string_long>::iterator it17;\n    std::vector<Union_std_string_long>::iterator it18;\n    std::vector<Union_std_string_long>::iterator it19;\n    std::vector<Union_std_string_long>::iterator it20;\n    std::vector<Union_std_string_long>::iterator it21;\n    std::vector<Union_std_string_long>::iterator it22;\n    std::vector<Union_std_string_long>::iterator it23;\n    std::vector<Union_std_string_long>::iterator it24;\n    std::vector<Union_std_string_long>::iterator it25;\n    std",
    "    std::vector<Union_std_string_long> sorted_subjectmarks;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](Union_std_string_long a, Union_std_string_long b) {\n        return a.f1 < b.f1;\n    });\n    return subjectmarks;",
    "    std::vector<Union_std_string_long> result;\n    std::vector<Union_std_string_long>::iterator it;\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Maths\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"English\") {\n            result.push_back(*it);\n        }\n    }\n    for (it = subjectmarks.begin(); it != subjectmarks.end(); it++) {\n        if (it->f0 == \"Science\") {\n            result.push_back(*it);\n        }\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const Union_std_string_long& a, const Union_std_string_long& b) {\n        return a.f1 < b.f1;\n    });\n    for(auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;",
    "    std::vector<Union_std_string_long> result;\n    std::sort(subjectmarks.begin(), subjectmarks.end(), [](auto a, auto b) {\n        return a.f1 < b.f1;\n    });\n    for (auto i : subjectmarks) {\n        result.push_back(i);\n    }\n    return result;"
  ]
}