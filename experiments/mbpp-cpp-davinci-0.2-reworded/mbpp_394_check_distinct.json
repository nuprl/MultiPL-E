{
  "name": "mbpp_394_check_distinct",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check if given tuple contains no duplicates.\nbool check_distinct(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_distinct;\n    assert(candidate(std::make_tuple(1, 4, 5, 6, 1, 4)) == (false));\n    assert(candidate(std::make_tuple(1, 4, 5, 6)) == (true));\n    assert(candidate(std::make_tuple(2, 3, 4, 5, 6)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    int arr[10];\n    for(int i=0; i<10; i++) {\n        arr[i] = 0;\n    }\n    while(test_tup) {\n        int digit = test_tup%10;\n        if(arr[digit]) {\n            return false;\n        }\n        arr[digit] = 1;\n        test_tup /= 10;\n    }\n    return true;",
    "  std::set<int> s;\n  while (test_tup > 0) {\n    int digit = test_tup % 10;\n    if (s.find(digit) != s.end()) {\n      return false;\n    }\n    s.insert(digit);\n    test_tup /= 10;\n  }\n  return true;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 1; i < digits.size(); i++) {\n        if (digits[i] == digits[i - 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 1; i++) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::set<int> s;\n    while (test_tup > 0) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::set<int> s;\n    while(test_tup) {\n        s.insert(test_tup%10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::set<int> s;\n    while (test_tup > 0) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 1; i < digits.size(); i++) {\n        if (digits[i] == digits[i-1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 1; i < digits.size(); i++) {\n        if (digits[i] == digits[i - 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::vector<long> test_vec;\n    while (test_tup > 0) {\n        test_vec.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int i = 1; i < test_vec.size(); i++) {\n        if (test_vec[i] == test_vec[i - 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int count = 0;\n    for (int i = 0; i < sizeof(test_tup); i++) {\n        if (test_tup & (1 << i)) {\n            count++;\n        }\n    }\n    return count == 3;",
    "    std::bitset<10> bits(test_tup);\n    return bits.count() == 10;",
    "    std::set<int> s;\n    while (test_tup) {\n        s.insert(test_tup % 10);\n        test_tup /= 10;\n    }\n    return s.size() == 4;",
    "    std::vector<int> digits;\n    while (test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for (int i = 0; i < digits.size() - 1; i++) {\n        if (digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::set<int> s;\n    while (test_tup != 0) {\n        int digit = test_tup % 10;\n        if (s.find(digit) != s.end()) {\n            return false;\n        }\n        s.insert(digit);\n        test_tup /= 10;\n    }\n    return true;",
    "    std::bitset<32> bs(test_tup);\n    return bs.count() == 4;",
    "  int count = 0;\n  for (int i = 0; i < 4; i++) {\n    for (int j = 0; j < 4; j++) {\n      if (i != j) {\n        if ((test_tup >> (i * 8)) & 0xFF == (test_tup >> (j * 8)) & 0xFF) {\n          count++;\n        }\n      }\n    }\n  }\n  if (count == 0) {\n    return true;\n  }\n  return false;",
    "    std::vector<int> digits;\n    while(test_tup > 0) {\n        digits.push_back(test_tup % 10);\n        test_tup /= 10;\n    }\n    std::sort(digits.begin(), digits.end());\n    for(int i = 0; i < digits.size() - 1; i++) {\n        if(digits[i] == digits[i + 1]) {\n            return false;\n        }\n    }\n    return true;"
  ]
}