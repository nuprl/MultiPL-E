{
  "name": "mbpp_223_is_majority",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > (n/2)){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            count++;\n        }\n    }\n    if(count>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long mid = n/2;\n    long first = 0;\n    long last = n-1;\n    long pos = -1;\n    while(first <= last) {\n        long mid = (first + last)/2;\n        if(arr[mid] == x) {\n            pos = mid;\n            break;\n        }\n        else if(arr[mid] < x) {\n            first = mid + 1;\n        }\n        else {\n            last = mid - 1;\n        }\n    }\n    if(pos == -1) {\n        return false;\n    }\n    if((pos + mid) <= (n-1) && arr[pos + mid] == x) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "tmp98rjqkib: /tmp/tmp98rjqkib.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long c=0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            c++;\n        }\n    }\n    if(c>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(int i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long mid = n/2;\n    long start = 0;\n    long end = n-1;\n    long index = -1;\n    while(start <= end){\n        long mid = (start+end)/2;\n        if(arr[mid] == x){\n            index = mid;\n            break;\n        }\n        else if(arr[mid] < x){\n            start = mid+1;\n        }\n        else{\n            end = mid-1;\n        }\n    }\n    if(index == -1){\n        return false;\n    }\n    if((index+mid) <= (n-1) && arr[index+mid] == x){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "tmpc6jypc3h: /tmp/tmpc6jypc3h.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            count++;\n        }\n    }\n    if(count>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long low = 0;\n    long high = n-1;\n    long mid = 0;\n    while(low<=high){\n        mid = (low+high)/2;\n        if(arr[mid]==x){\n            break;\n        }\n        else if(arr[mid]<x){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n    }\n    if(arr[mid]!=x){\n        return false;\n    }\n    long count = 0;\n    for(long i=mid;i<n;i++){\n        if(arr[i]==x){\n            count++;\n        }\n        else{\n            break;\n        }\n    }\n    if(count>n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "tmp7lu4hxjg: /tmp/tmp7lu4hxjg.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            count++;\n        }\n    }\n    if(count>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n  long count = 0;\n  for (long i = 0; i < n; i++) {\n    if (arr[i] == x) {\n      count++;\n    }\n  }\n  if (count > n/2) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long mid = n/2;\n    long l = 0;\n    long r = n-1;\n    long pos = -1;\n    while(l<=r){\n        long mid = (l+r)/2;\n        if(arr[mid]==x){\n            pos = mid;\n            break;\n        }\n        else if(arr[mid]<x){\n            l = mid+1;\n        }\n        else{\n            r = mid-1;\n        }\n    }\n    if(pos==-1){\n        return false;\n    }\n    if(pos+mid<n){\n        if(arr[pos+mid]==x){\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "tmp7d7dbucs: /tmp/tmp7d7dbucs.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0; i<n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            count++;\n        }\n    }\n    if(count>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        if(arr[i]==x)\n        {\n            count++;\n        }\n    }\n    if(count>n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0;i<n;i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long mid = n/2;\n    long start = 0;\n    long end = n-1;\n    long index = -1;\n    while(start<=end){\n        long mid = (start+end)/2;\n        if(arr[mid]==x){\n            index = mid;\n            break;\n        }\n        else if(arr[mid]>x){\n            end = mid-1;\n        }\n        else{\n            start = mid+1;\n        }\n    }\n    if(index==-1){\n        return false;\n    }\n    if(index+mid<n && arr[index+mid]==x){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "tmpgre54lnr: /tmp/tmpgre54lnr.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long mid = n/2;\n    long start = 0;\n    long end = n-1;\n    long index = -1;\n    while(start<=end) {\n        long mid = (start+end)/2;\n        if(arr[mid]==x) {\n            index = mid;\n            break;\n        }\n        else if(arr[mid]>x) {\n            end = mid-1;\n        }\n        else {\n            start = mid+1;\n        }\n    }\n    if(index==-1) {\n        return false;\n    }\n    if(index+mid<n && arr[index+mid]==x) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "tmpaadn36d8: /tmp/tmpaadn36d8.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0;i<n;i++){\n        if(arr[i]==x){\n            count++;\n        }\n    }\n    if(count>n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long mid = n/2;\n    long low = 0;\n    long high = n-1;\n    while(low<=high){\n        long mid = (low+high)/2;\n        if(arr[mid]==x){\n            if(mid+n/2<=n-1 && arr[mid+n/2]==x){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(arr[mid]>x){\n            high = mid-1;\n        }\n        else{\n            low = mid+1;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "tmpm6n1d8q7: /tmp/tmpm6n1d8q7.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long mid = n/2;\n    long start = 0;\n    long end = n-1;\n    long index = -1;\n    while(start<=end){\n        long mid = (start+end)/2;\n        if(arr[mid]==x){\n            index = mid;\n            break;\n        }\n        else if(arr[mid]>x){\n            end = mid-1;\n        }\n        else{\n            start = mid+1;\n        }\n    }\n    if(index==-1){\n        return false;\n    }\n    if(index+mid<=n-1 && arr[index+mid]==x){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "tmpzth0be_i: /tmp/tmpzth0be_i.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i=0; i<n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long low = 0;\n    long high = n-1;\n    long mid = (low+high)/2;\n    while(low<=high){\n        if(arr[mid]==x){\n            if(mid+n/2<=n-1){\n                if(arr[mid+n/2]==x){\n                    return true;\n                }\n                else{\n                    low = mid+1;\n                }\n            }\n            else{\n                return false;\n            }\n        }\n        else if(arr[mid]<x){\n            low = mid+1;\n        }\n        else{\n            high = mid-1;\n        }\n        mid = (low+high)/2;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "tmpmmqfc8a2: /tmp/tmpmmqfc8a2.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x){\n            count++;\n        }\n    }\n    if(count > n/2){\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        if(arr[i] == x) {\n            count++;\n        }\n    }\n    if(count > n/2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1665510117,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++){\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n            count++;\n    }\n    if(count > n/2)\n        return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a sorted vector, its length (n), and an element and returns whether the element is the majority element in the given sorted vector. (The majority element is the element that occurs more than n/2 times.)\nbool is_majority(std::vector<long> arr, long n, long x) {\n    // Write your code here\n    long count = 0;\n    for(long i = 0; i < n; i++)\n    {\n        if(arr[i] == x)\n        {\n            count++;\n        }\n    }\n    if(count > n/2)\n    {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_majority;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)3, (long)10})), (7), (3)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)4, (long)4, (long)4, (long)6, (long)6})), (8), (4)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)2})), (5), (1)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)2})), (5), (1)) == (false));\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}