{
  "name": "mbpp_759_is_decimal",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpiy_cnxpr: /tmp/tmpiy_cnxpr.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    // Check for sign\n    if (num[i] == '-' || num[i] == '+') {\n        i++;\n    }\n    // Check for digits before decimal point\n    if (num[i] == '.') {\n        return false;\n    }\n    while (num[i] != '.' && num[i] != '\\0') {\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    // Check for digits after decimal point\n    if (num[i] == '.') {\n        i++;\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    // Check for trailing characters\n    if (num[i] != '\\0') {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == -1) {\n        return true;\n    }\n    if (num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpx91kzw3d: /tmp/tmpx91kzw3d.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpiy_cnxpr: /tmp/tmpiy_cnxpr.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            i++;\n            break;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (i == num.size()) {\n        return true;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp6o6gzu3y: /tmp/tmp6o6gzu3y.cpp:41: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return false;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == 0) {\n        return false;\n    }\n    if(num.length() - dot_index > 3) {\n        return false;\n    }\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            if(num.size() - i > 3) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpdelbc9eq: /tmp/tmpdelbc9eq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_pos = i;\n            break;\n        }\n    }\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp9nshphkt: /tmp/tmp9nshphkt.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (dot_pos == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpy6f9ygwj: /tmp/tmpy6f9ygwj.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == std::string::npos) {\n        return true;\n    }\n    if(num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp2byvegq3: /tmp/tmp2byvegq3.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpiy_cnxpr: /tmp/tmpiy_cnxpr.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.length() - index > 3) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp71b4icmu: /tmp/tmp71b4icmu.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for(int i = num.size() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if(count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpjstmk62w: /tmp/tmpjstmk62w.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpiy_cnxpr: /tmp/tmpiy_cnxpr.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index == num.length() - 1) {\n            return false;\n        }\n        if(index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpz0kaq7te: /tmp/tmpz0kaq7te.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp4_vc16ao: /tmp/tmp4_vc16ao.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp_vze8ok2: /tmp/tmp_vze8ok2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    if (num.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num.length() - i > 3) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp8ld5qu57: /tmp/tmp8ld5qu57.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (i < num.size()) {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpvh9yb83k: /tmp/tmpvh9yb83k.cpp:31: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int pos = num.find('.');\n        if (pos + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmp5cdwdra4: /tmp/tmp5cdwdra4.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if (num.size() == 0) return false;\n    int i = 0;\n    if (num[0] == '-') i++;\n    int count = 0;\n    while (i < num.size()) {\n        if (num[i] == '.') {\n            count++;\n            if (count > 1) return false;\n        } else if (!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) return false;\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.size() - 1) return false;\n        if (index == num.size() - 3) return true;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.length() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpfuofr6e_: /tmp/tmpfuofr6e_.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpqa7cq6c7: /tmp/tmpqa7cq6c7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmphga0739e: /tmp/tmphga0739e.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return count <= 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmptu7v174w: /tmp/tmptu7v174w.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if(dot_index == -1) {\n        return true;\n    }\n    if(num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpqa7cq6c7: /tmp/tmpqa7cq6c7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.size() - 1) {\n        return false;\n    }\n    if (index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpbtlymzi6: /tmp/tmpbtlymzi6.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int dot_count = 0;\n    int digit_count = 0;\n    while(num[i] != '\\0') {\n        if(num[i] == '.') {\n            dot_count++;\n        } else if(num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        } else {\n            return false;\n        }\n        i++;\n    }\n    if(dot_count == 1 && digit_count == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpl3i6i8gl: /tmp/tmpl3i6i8gl.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int dot_index = num.find('.');\n    if(dot_index + 3 == num.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == std::string::npos) {\n        return true;\n    }\n    if (index + 3 == num.size()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmp4dcb_udt: /tmp/tmp4dcb_udt.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  bool decimal_flag = false;\n  int count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '.') {\n      if (decimal_flag) {\n        return false;\n      }\n      decimal_flag = true;\n    } else if (num[i] < '0' || num[i] > '9') {\n      return false;\n    } else if (decimal_flag) {\n      count++;\n    }\n  }\n  if (count > 2) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int n = num.length();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 == n) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int dot_index = num.find('.');\n        if (num.length() - dot_index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpl1cocy3l: /tmp/tmpl1cocy3l.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpsv6epcmq: /tmp/tmpsv6epcmq.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    if(count == 1) {\n        std::string after_decimal = num.substr(num.find('.') + 1);\n        if(after_decimal.length() == 2) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpo4w5pn5i: /tmp/tmpo4w5pn5i.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_dot = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_dot++;\n    }\n    if(count_after_dot > 3) {\n        return false;\n    }\n    int count_before_dot = 0;\n    for(int i = num.size() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_before_dot++;\n    }\n    if(count_before_dot > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            i++;\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '.') {\n                return false;\n            }\n            if (num[i] == '-') {\n                return false;\n            }\n            if (num[i] == '+') {\n                return false;\n            }\n            if (num[i] == ' ') {\n                return false;\n            }\n            if (num[i] == '\\t') {\n                return false;\n            }\n            if (num[i] == '\\n') {\n                return false;\n            }\n            if (num[i] == '\\r') {\n                return false;\n            }\n            if (num[i] == '\\v') {\n                return false;\n            }\n            if (num[i] == '\\f') {\n                return false;\n            }\n            if (num[i] == '\\b') {\n                return false;\n            }\n            if (num[i] == '\\a') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '\\0') {\n                return false\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "/tmp/tmpcvfwphly.cpp: In function \u2018bool is_decimal(std::string)\u2019:\n/tmp/tmpcvfwphly.cpp:74:29: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   74 |                 return false\n      |                             ^\n      |                             ;\n   75 | }\n      | ~                            \n/tmp/tmpcvfwphly.cpp:76:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   76 | int main() {\n      |            ^\n/tmp/tmpcvfwphly.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpcvfwphly.cpp:17:28: note: to match this \u2018{\u2019\n   17 |         if (num[i] == '.') {\n      |                            ^\n/tmp/tmpcvfwphly.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpcvfwphly.cpp:10:28: note: to match this \u2018{\u2019\n   10 |     while (num[i] != '\\0') {\n      |                            ^\n/tmp/tmpcvfwphly.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpcvfwphly.cpp:4:34: note: to match this \u2018{\u2019\n    4 | bool is_decimal(std::string num) {\n      |                                  ^\n/tmp/tmpcvfwphly.cpp:83:1: warning: control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(i < num.size()) {\n        if(num[i] == '.') {\n            count++;\n        }\n        else if(!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    if(count == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "tmpp8bx8i62: /tmp/tmpp8bx8i62.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count1++;\n    }\n    int count2 = 0;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if (count2 > 2) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return true;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp_1oxkl6j: /tmp/tmp_1oxkl6j.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        else if (isdigit(num[i])) {\n            digit_count++;\n        }\n        else {\n            return false;\n        }\n    }\n    if (dot_count == 1 && digit_count == 3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpbl61i71m: /tmp/tmpbl61i71m.cpp:27: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < num.length(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tif (num.length() - i - 1 > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpwwwlz4zx: /tmp/tmpwwwlz4zx.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpomi5jch0: /tmp/tmpomi5jch0.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int decimal_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (num[i] >= '0' && num[i] <= '9') {\n            decimal_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count > 1 || decimal_count > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmple732_lz: /tmp/tmple732_lz.cpp:23: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    else {\n        int dot_index = num.find('.');\n        if(dot_index == -1) {\n            return true;\n        }\n        else {\n            if(num.size() - dot_index - 1 > 2) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpo2hutk2b: /tmp/tmpo2hutk2b.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  for (int i = 0; i < num.length(); i++) {\n    if (num[i] == '.') {\n      if (num.length() - i > 3) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp1f_q7ixg: /tmp/tmp1f_q7ixg.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (num[0] == '.') {\n        return false;\n    }\n    if (num[num.length() - 1] == '.') {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num.length() - i - 1 > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmprweb5lsl: /tmp/tmprweb5lsl.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        if (dot_count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (dot_count == 0) {\n        return true;\n    }\n    int dot_index = num.find('.');\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpxmh5mq07: /tmp/tmpxmh5mq07.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpwpj3htbi: /tmp/tmpwpj3htbi.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            break;\n        }\n        count1++;\n    }\n    int count2 = 0;\n    for(int i = num.size() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if(count1 + count2 - 1 == num.size()) {\n        return false;\n    }\n    if(count2 > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp4zbuhzp2: /tmp/tmp4zbuhzp2.cpp:39: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.length() - 1) {\n        return false;\n    }\n    if (index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp0kjpnp0g: /tmp/tmp0kjpnp0g.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int n = num.length();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    for(; i < n; i++) {\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp8cej7dej: /tmp/tmp8cej7dej.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.length() - index - 1 == 2) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpmvw238iw: /tmp/tmpmvw238iw.cpp:22: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if (num.empty()) return false;\n    int i = 0;\n    if (num[0] == '-') i++;\n    if (i == num.size()) return false;\n    int count = 0;\n    while (i < num.size() && num[i] != '.') {\n        if (!isdigit(num[i])) return false;\n        i++;\n    }\n    if (i == num.size()) return true;\n    i++;\n    while (i < num.size()) {\n        if (!isdigit(num[i])) return false;\n        i++;\n        count++;\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int n = num.length();\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < n; i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpsouj7swy: /tmp/tmpsouj7swy.cpp:26: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpf9q21irq: /tmp/tmpf9q21irq.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpsdloduqs: /tmp/tmpsdloduqs.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "tmpvpspdmz3: /tmp/tmpvpspdmz3.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        } else if(num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    return (dot_count == 1 && digit_count == 3);\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp5l1frx3f: /tmp/tmp5l1frx3f.cpp:20: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "tmp44rilrgr: /tmp/tmp44rilrgr.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int len = num.length();\n    int count = 0;\n    for(int i = 0; i < len; i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == std::string::npos) {\n        return false;\n    }\n    if(dot_pos == len - 1) {\n        return false;\n    }\n    if(dot_pos == len - 2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpeu459lun: /tmp/tmpeu459lun.cpp:29: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for(int i = num.size() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if(count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpjstmk62w: /tmp/tmpjstmk62w.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for (int i = 0; i < num.size(); i++) {\n    if (num[i] == '.') {\n      count++;\n    }\n  }\n  if (count > 1) {\n    return false;\n  }\n  int dot_index = num.find('.');\n  if (dot_index == std::string::npos) {\n    return true;\n  }\n  if (dot_index + 3 < num.size()) {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp9qim5cwm: /tmp/tmp9qim5cwm.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            for(int j = i + 1; j < num.length(); j++) {\n                count1++;\n            }\n        }\n    }\n    if(count1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "tmpcsrzcy_s: /tmp/tmpcsrzcy_s.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return true;\n    }\n    if(dot_index == num.size() - 1) {\n        return false;\n    }\n    if(dot_index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpn0xj6b9g: /tmp/tmpn0xj6b9g.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return false;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == 0) {\n        return false;\n    }\n    if(num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for(int i = num.length() - 1; i >= 0; i--) {\n        if(num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if(count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp8ozf37fj: /tmp/tmp8ozf37fj.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpm0i26nyd: /tmp/tmpm0i26nyd.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == -1) {\n        return true;\n    }\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpm_4qv1ue: /tmp/tmpm_4qv1ue.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmphga0739e: /tmp/tmphga0739e.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpv_o05i2c: /tmp/tmpv_o05i2c.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmp_vze8ok2: /tmp/tmp_vze8ok2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpv_o05i2c: /tmp/tmpv_o05i2c.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return true;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmplop6hb0b: /tmp/tmplop6hb0b.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    std::string after_decimal = num.substr(num.find('.') + 1);\n    if(after_decimal.length() > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (i < num.size()) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    if (count == 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpkrjcvv0h: /tmp/tmpkrjcvv0h.cpp:29: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmplxj0o33b: /tmp/tmplxj0o33b.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == 0) {\n            return false;\n        }\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpomgo138a: /tmp/tmpomgo138a.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    int after_dot = num.size() - dot_pos - 1;\n    if (after_dot > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpp5hqknik: /tmp/tmpp5hqknik.cpp:27: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        }\n        else if(num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        }\n        else {\n            return false;\n        }\n    }\n    if(dot_count == 1 && digit_count == 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpijvnqisf: /tmp/tmpijvnqisf.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (num[i + 1] == '.') {\n                return false;\n            }\n            if (num[i + 2] == '.') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmptk__g58y: /tmp/tmptk__g58y.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tif (num.size() - i - 1 > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmprwjck3f6: /tmp/tmprwjck3f6.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp6q3mri57: /tmp/tmp6q3mri57.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return count <= 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmppur3nwba: /tmp/tmppur3nwba.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    std::stringstream ss(num);\n    float f;\n    ss >> f;\n    if (ss.fail()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp05l1oxv9: /tmp/tmp05l1oxv9.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.size() - index > 3) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpbs_an7zo: /tmp/tmpbs_an7zo.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == -1) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122999,
      "stdout": "",
      "stderr": "tmpvpspdmz3: /tmp/tmpvpspdmz3.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp45wqqx8l: /tmp/tmp45wqqx8l.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "tmp62cl46j5: /tmp/tmp62cl46j5.cpp:24: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        }\n        if(dot_count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if(dot_count == 0) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmpc848mezq: /tmp/tmpc848mezq.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if(index == num.size() - 1) {\n        return false;\n    }\n    if(index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpcfr3apmj: /tmp/tmpcfr3apmj.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(dot_index + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp6ekv7hze: /tmp/tmp6ekv7hze.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int pos = num.find('.');\n        if (num.length() - pos - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp53lt2pq2: /tmp/tmp53lt2pq2.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(i < num.length()) {\n        if(num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpo39etw15: /tmp/tmpo39etw15.cpp:24: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpksz6zi74: /tmp/tmpksz6zi74.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count_decimal = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_decimal++;\n    }\n    if (count_decimal > 3) {\n        return false;\n    }\n    int count_after_decimal = 0;\n    for (int i = num.length() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count_after_decimal++;\n    }\n    if (count_after_decimal > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.length()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpro2k82pq: /tmp/tmpro2k82pq.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpozvgbxk7: /tmp/tmpozvgbxk7.cpp:31: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpjeaxwx7v: /tmp/tmpjeaxwx7v.cpp:25: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpgvldwia2: /tmp/tmpgvldwia2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        if (dot_count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n    }\n    if (dot_count == 0) {\n        return true;\n    }\n    std::string after_dot = num.substr(num.find('.') + 1);\n    if (after_dot.length() > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return false;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == 0) {\n        return false;\n    }\n    if(num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.size() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpygn8h7hx: /tmp/tmpygn8h7hx.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return true;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp8o7rg1_u: /tmp/tmp8o7rg1_u.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i=0; i<num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index == num.length()-1 || index == 0) {\n            return false;\n        }\n        if(num.length()-index-1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpq3usz45o: /tmp/tmpq3usz45o.cpp:28: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return count == 1;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpz4am2lzn: /tmp/tmpz4am2lzn.cpp:24: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int decimal_count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            decimal_count++;\n        }\n    }\n    if(decimal_count > 1) {\n        return false;\n    }\n    if(decimal_count == 0) {\n        return true;\n    }\n    if(decimal_count == 1) {\n        int decimal_index = num.find('.');\n        if(num.size() - decimal_index - 1 > 2) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpqz56g767: /tmp/tmpqz56g767.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpcooputi2: /tmp/tmpcooputi2.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint count = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\treturn false;\n\t}\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tif (num.size() - i - 1 > 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp3sar8yb_: /tmp/tmp3sar8yb_.cpp:27: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (num.length() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpvvr9j58f: /tmp/tmpvvr9j58f.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "tmp6q3mri57: /tmp/tmp6q3mri57.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return false;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp0w1fze4b: /tmp/tmp0w1fze4b.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int n = num.length();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        if(num[i] == '.') {\n            count++;\n            continue;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmp4hhp684c: /tmp/tmp4hhp684c.cpp:25: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            if (num.size() - i - 1 > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "tmpqj80g9bq: /tmp/tmpqj80g9bq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (num.length() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpm12yu649: /tmp/tmpm12yu649.cpp:35: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.length() == 0) {\n        return false;\n    }\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    if(i == num.length()) {\n        return false;\n    }\n    int count_decimal = 0;\n    while(i < num.length()) {\n        if(num[i] == '.') {\n            count_decimal++;\n            if(count_decimal > 1) {\n                return false;\n            }\n        }\n        else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpseltjk2l: /tmp/tmpseltjk2l.cpp:34: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            if (num.size() - i - 1 > 2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123003,
      "stdout": "",
      "stderr": "tmpqj80g9bq: /tmp/tmpqj80g9bq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == -1) {\n        return true;\n    }\n    if(dot_index == num.length() - 1) {\n        return false;\n    }\n    if(dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpm118xqdk: /tmp/tmpm118xqdk.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmptcl6z5a8: /tmp/tmptcl6z5a8.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] == '.') {\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpals0t7nh: /tmp/tmpals0t7nh.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmppapshr3_: /tmp/tmppapshr3_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            break;\n        }\n        count1++;\n    }\n    if (count1 > 3) {\n        return false;\n    }\n    int count2 = 0;\n    for (int i = num.size() - 1; i >= 0; i--) {\n        if (num[i] == '.') {\n            break;\n        }\n        count2++;\n    }\n    if (count2 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            if (i + 3 > num.length()) {\n                return false;\n            }\n            if (num[i + 1] == '.' || num[i + 2] == '.') {\n                return false;\n            }\n            if (num[i + 1] == '0' && num[i + 2] == '0') {\n                return false;\n            }\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmphd0_g3bj: /tmp/tmphd0_g3bj.cpp:33: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    int count = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    while(num[i] != '\\0') {\n        if(num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmphfnfsb9v: /tmp/tmphfnfsb9v.cpp:24: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count == 1) {\n        std::string::size_type sz;\n        double d = std::stod(num, &sz);\n        if (num.length() - sz == 3) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpy9oignwa: /tmp/tmpy9oignwa.cpp:22: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpbahl3jv7: /tmp/tmpbahl3jv7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpjrcbvu5f: /tmp/tmpjrcbvu5f.cpp:20: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    int i = 0;\n    if (num[0] == '-') {\n        i = 1;\n    }\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpyqxgeati: /tmp/tmpyqxgeati.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(index + 3 < num.size()) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmphga0739e: /tmp/tmphga0739e.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmppapshr3_: /tmp/tmppapshr3_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            i++;\n            if (num[i] == '\\0') {\n                return false;\n            }\n            if (num[i] == '0') {\n                i++;\n                if (num[i] == '\\0') {\n                    return true;\n                }\n                if (num[i] == '0') {\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            }\n            else {\n                i++;\n                if (num[i] == '\\0') {\n                    return true;\n                }\n                if (num[i] == '0') {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpm9juit83: /tmp/tmpm9juit83.cpp:53: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if(index == -1) {\n        return true;\n    }\n    if(index == num.size() - 1) {\n        return false;\n    }\n    if(index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmp6bdsulxn: /tmp/tmp6bdsulxn.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        } else if (isdigit(num[i])) {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if (dot_count > 1) {\n        return false;\n    }\n    if (digit_count > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpm4acy9yq: /tmp/tmpm4acy9yq.cpp:26: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index + 3 == num.length()) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpc4cub35u: /tmp/tmpc4cub35u.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count_dot = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count_dot++;\n        }\n    }\n    if (count_dot > 1) {\n        return false;\n    }\n    int count_digits = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        count_digits++;\n    }\n    if (count_digits > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpgeamnag_: /tmp/tmpgeamnag_.cpp:31: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    if(num[0] == '-') {\n        num.erase(num.begin());\n    }\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpbczdab3c: /tmp/tmpbczdab3c.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.length() - 1) {\n        return false;\n    }\n    if (index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmp0kjpnp0g: /tmp/tmp0kjpnp0g.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n        std::string str = num.substr(num.find(\".\") + 1);\n        if(str.size() == 2) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpsfxona2f: /tmp/tmpsfxona2f.cpp:27: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        } else if(num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        } else {\n            return false;\n        }\n    }\n    if(dot_count == 1 && digit_count == 3) {\n        return true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmp5iblscg1: /tmp/tmp5iblscg1.cpp:24: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return false;\n    }\n    if (dot_index == num.size() - 1) {\n        return false;\n    }\n    if (dot_index == 0) {\n        return false;\n    }\n    if (dot_index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmphhc9kx2g: /tmp/tmphhc9kx2g.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (num[i] != '\\0') {\n        if (num[i] == '.') {\n            count++;\n        }\n        i++;\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if (dot_pos == std::string::npos) {\n        return true;\n    }\n    if (dot_pos + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpnu6oho9m: /tmp/tmpnu6oho9m.cpp:31: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    int digit_count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            dot_count++;\n        }\n        else if(num[i] >= '0' && num[i] <= '9') {\n            digit_count++;\n        }\n        else {\n            return false;\n        }\n    }\n    if(dot_count == 1 && digit_count == num.size() - 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmptaoejdls: /tmp/tmptaoejdls.cpp:29: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[0] == '-') {\n        i = 1;\n    }\n    int count = 0;\n    for(; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpgux56h_d: /tmp/tmpgux56h_d.cpp:27: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmp5ujkgmdq: /tmp/tmp5ujkgmdq.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmpqtm70d_v: /tmp/tmpqtm70d_v.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int decimal_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            decimal_count = num.size() - i - 1;\n            break;\n        }\n    }\n    if (decimal_count > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpsywaxzy2: /tmp/tmpsywaxzy2.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n            continue;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmp6mogp7xc: /tmp/tmp6mogp7xc.cpp:24: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if(dot_index == std::string::npos) {\n        return false;\n    }\n    if(dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpyw9ly857: /tmp/tmpyw9ly857.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n  int count = 0;\n  for(int i = 0; i < num.size(); i++) {\n    if(num[i] == '.') {\n      count++;\n    }\n  }\n  if(count == 1) {\n    int index = num.find('.');\n    if(num.size() - index - 1 == 2) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpscqqg22z: /tmp/tmpscqqg22z.cpp:22: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i]) && num[i] != '.') {\n            return false;\n        }\n    }\n    if(count == 0) {\n        return false;\n    }\n    int index = num.find('.');\n    if(num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return false;\n    }\n    if (dot_index == num.size() - 1) {\n        return false;\n    }\n    if (dot_index == 0) {\n        return false;\n    }\n    if (num.size() - dot_index - 1 > 2) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    bool decimal_found = false;\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            if (decimal_found) {\n                return false;\n            }\n            decimal_found = true;\n        } else if (num[i] < '0' || num[i] > '9') {\n            return false;\n        } else if (decimal_found) {\n            count++;\n        }\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int count1 = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            for(int j = i + 1; j < num.length(); j++) {\n                count1++;\n            }\n            break;\n        }\n    }\n    if(count1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpiqgxqvit: /tmp/tmpiqgxqvit.cpp:31: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index == num.size() - 1) {\n        return false;\n    }\n    if (dot_index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpj2fzgldl: /tmp/tmpj2fzgldl.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) return false;\n    int i = 0;\n    if(num[0] == '-') i++;\n    int count = 0;\n    for(; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n            continue;\n        }\n        if(num[i] < '0' || num[i] > '9') return false;\n    }\n    if(count > 1) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpuz383sut: /tmp/tmpuz383sut.cpp:23: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpmnep1eeu: /tmp/tmpmnep1eeu.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count=0;\n    for(int i=0;i<num.size();i++) {\n        if(num[i]=='.') {\n            count++;\n        }\n    }\n    if(count>1) {\n        return false;\n    }\n    for(int i=0;i<num.size();i++) {\n        if(num[i]=='.') {\n            if(num.size()-i-1>2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpbtel6ufh: /tmp/tmpbtel6ufh.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n\tint dot_count = 0;\n\tint digit_count = 0;\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == '.') {\n\t\t\tdot_count++;\n\t\t}\n\t\telse if (isdigit(num[i])) {\n\t\t\tdigit_count++;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (dot_count == 1 && digit_count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpky1agmcc: /tmp/tmpky1agmcc.cpp:27: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    bool decimal_point_found = false;\n    int decimal_point_index = -1;\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            if(decimal_point_found) {\n                return false;\n            }\n            decimal_point_found = true;\n            decimal_point_index = i;\n        }\n    }\n    if(decimal_point_found) {\n        for(int i = decimal_point_index + 1; i < num.length(); i++) {\n            count++;\n        }\n        if(count == 2) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpyajpxp_k: /tmp/tmpyajpxp_k.cpp:30: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == -1) {\n        return true;\n    }\n    if (num.size() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "tmpx91kzw3d: /tmp/tmpx91kzw3d.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 0) {\n        return true;\n    }\n    int i = num.find('.');\n    if(i + 3 < num.size()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpuek9dj6j: /tmp/tmpuek9dj6j.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int decimal_count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            decimal_count = num.size() - i - 1;\n        }\n    }\n    if(decimal_count > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmpi3di7hdg: /tmp/tmpi3di7hdg.cpp:28: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int len = num.length();\n    int i = 0;\n    bool dot_found = false;\n    int count = 0;\n    while(i < len) {\n        if(num[i] == '.') {\n            if(dot_found) {\n                return false;\n            }\n            dot_found = true;\n        } else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        } else if(dot_found) {\n            count++;\n        }\n        i++;\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == -1) {\n        return true;\n    }\n    if(num.length() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "tmp470s9_0f: /tmp/tmp470s9_0f.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    if(num.size() == 0) return false;\n    int i = 0;\n    if(num[i] == '-') i++;\n    if(num[i] == '.') return false;\n    int count = 0;\n    while(i < num.size() && num[i] != '.') {\n        if(!isdigit(num[i])) return false;\n        i++;\n    }\n    if(i == num.size()) return true;\n    i++;\n    while(i < num.size()) {\n        if(!isdigit(num[i])) return false;\n        count++;\n        i++;\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "tmp85ycoxjh: /tmp/tmp85ycoxjh.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); ++i) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    for (int i = 0; i < num.size(); ++i) {\n        if (num[i] == '.') {\n            if (num.size() - i > 3) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpkvayywg5: /tmp/tmpkvayywg5.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int index = num.find('.');\n        if (index == num.length() - 1) {\n            return false;\n        }\n        if (index == num.length() - 3) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666122998,
      "stdout": "",
      "stderr": "tmpf9q21irq: /tmp/tmpf9q21irq.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.length() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpbztsckfx: /tmp/tmpbztsckfx.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = -1;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_index = i;\n            break;\n        }\n    }\n    if (dot_index == -1) {\n        return true;\n    }\n    if (num.size() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmpbahl3jv7: /tmp/tmpbahl3jv7.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    if(count == 1) {\n        int index = num.find('.');\n        if(num.size() - index - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp1ezutaoj: /tmp/tmp1ezutaoj.cpp:25: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 0) {\n        return true;\n    }\n    int index = num.find('.');\n    if (index == num.size() - 1) {\n        return false;\n    }\n    if (index == num.size() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp_kj_qa77: /tmp/tmp_kj_qa77.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index == num.length() - 1) {\n        return false;\n    }\n    if (dot_index == num.length() - 3) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "tmppapshr3_: /tmp/tmppapshr3_.cpp:29: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpcg_teudz: /tmp/tmpcg_teudz.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while (i < num.length()) {\n        if (num[i] == '.') {\n            count++;\n        }\n        if (count > 1) {\n            return false;\n        }\n        if (num[i] != '.' && (num[i] < '0' || num[i] > '9')) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmplxladmse: /tmp/tmplxladmse.cpp:28: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (num.length() - dot_index > 3) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpx0kli4q5: /tmp/tmpx0kli4q5.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = num.find('.');\n    if(dot_pos == std::string::npos) {\n        return true;\n    }\n    if(num.size() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp25npxl4s: /tmp/tmp25npxl4s.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n        return false;\n    }\n    int dot_pos = -1;\n    for(int i = 0; i < num.length(); i++) {\n        if(num[i] == '.') {\n            dot_pos = i;\n            break;\n        }\n    }\n    if(dot_pos == -1) {\n        return true;\n    }\n    if(dot_pos == num.length() - 1) {\n        return false;\n    }\n    if(num.length() - dot_pos - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpbzt99x6i: /tmp/tmpbzt99x6i.cpp:35: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if(num[i] == '-') {\n        i++;\n    }\n    int count = 0;\n    while(i < num.size()) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n        if(!isdigit(num[i])) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpz8sfd7xb: /tmp/tmpz8sfd7xb.cpp:26: int main(): Assertion `candidate((\"123.11\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            count++;\n        }\n        if(count > 1) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmphm3vk8_u: /tmp/tmphm3vk8_u.cpp:19: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count_decimal = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count_decimal++;\n        }\n        if (count_decimal > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmp5apxpkmp: /tmp/tmp5apxpkmp.cpp:30: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (num[0] == '.') {\n        return false;\n    }\n    if (num[num.length() - 1] == '.') {\n        return false;\n    }\n    int index = num.find('.');\n    if (index == -1) {\n        return true;\n    }\n    if (num.length() - index - 1 > 2) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmpfzd91umc: /tmp/tmpfzd91umc.cpp:32: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num[i] == '.') {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    int dot_index = num.find('.');\n    if (dot_index == std::string::npos) {\n        return true;\n    }\n    if (dot_index + 3 < num.length()) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123002,
      "stdout": "",
      "stderr": "tmpg2iw9i8p: /tmp/tmpg2iw9i8p.cpp:26: int main(): Assertion `candidate((\"e666.86\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int i = 0;\n    if (num[0] == '-') {\n        i++;\n    }\n    int count = 0;\n    for (; i < num.size(); i++) {\n        if (num[i] == '.') {\n            count++;\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    if (count > 1) {\n        return false;\n    }\n    if (count == 1) {\n        int pos = num.find('.');\n        if (num.size() - pos - 1 > 2) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    int dot_count = 0;\n    for (int i = 0; i < num.size(); i++) {\n        if (num[i] == '.') {\n            dot_count++;\n        }\n        if (dot_count > 1) {\n            return false;\n        }\n        if (num[i] == '.') {\n            continue;\n        }\n        if (num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "tmphsd5c4os: /tmp/tmphsd5c4os.cpp:26: int main(): Assertion `candidate((\"3.124587\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nbool is_decimal(std::string num) {\n    bool decimal_found = false;\n    int count = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(num[i] == '.') {\n            if(decimal_found) {\n                return false;\n            }\n            decimal_found = true;\n        }\n        else if(num[i] < '0' || num[i] > '9') {\n            return false;\n        }\n        else if(decimal_found) {\n            count++;\n        }\n    }\n    return count <= 2;\n}\nint main() {\n    auto candidate = is_decimal;\n    assert(candidate((\"123.11\")) == (true));\n    assert(candidate((\"e666.86\")) == (false));\n    assert(candidate((\"3.124587\")) == (false));\n    assert(candidate((\"1.11\")) == (true));\n    assert(candidate((\"1.1.11\")) == (false));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}