{
  "name": "mbpp_103_eulerian_num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the Eulerian number a(n, m).\nlong eulerian_num(long n, long m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = eulerian_num;\n    assert(candidate((3), (1)) == (4));\n    assert(candidate((4), (1)) == (11));\n    assert(candidate((5), (3)) == (26));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    // Write your code here\n    long dp[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n        {\n            if(i==0 || j==0)\n            {\n                dp[i][j]=0;\n            }\n            else if(i==1)\n            {\n                dp[i][j]=1;\n            }\n            else if(j==1)\n            {\n                dp[i][j]=i;\n            }\n            else\n            {\n                dp[i][j]=dp[i-1][j-1]+j*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (m > n)\n        return 0;\n    if (m == n)\n        return 1;\n    if (m == 1)\n        return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0 || m == 0)\n        return 1;\n    if (n == 1 || m == 1)\n        return n + m - 1;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j] + j*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                dp[i][j] = 1;\n            }\n            else {\n                dp[i][j] = dp[i-1][j-1] + (i-1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        arr[i][0] = 1;\n    }\n    for(long i = 0; i <= m; i++) {\n        arr[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            arr[i][j] = arr[i-1][j-1] + (i*arr[i-1][j]);\n        }\n    }\n    long ans = arr[n][m];\n    for(long i = 0; i <= n; i++) {\n        delete[] arr[i];\n    }\n    delete[] arr;\n    return ans;",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                a[i][j] = a[i-1][j+1];\n            } else if(j == m) {\n                a[i][j] = a[i-1][j-1];\n            } else {\n                a[i][j] = a[i-1][j-1] + a[i-1][j+1];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + a[i-1][j-1];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 || m == 0) return 1;\n    if (n == 1 || m == 1) return n;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long **a = new long *[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 0;\n            } else if (i == 1 || j == 1) {\n                a[i][j] = 1;\n            } else if (i == j) {\n                a[i][j] = 1;\n            } else if (i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i - j) * a[i - 1][j] + j * a[i - 1][j - 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **arr = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        arr[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        arr[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            arr[i][j] = arr[i - 1][j - 1] + (i - 1) * arr[i - 1][j];\n        }\n    }\n    return arr[n][m];",
    "    if(n == 0) return 1;\n    if(m == 0) return 0;\n    if(n == 1) return 1;\n    if(m == 1) return 1;\n    if(n == m) return 1;\n    if(n < m) return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    long **arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i < j) {\n                arr[i][j] = 0;\n            } else {\n                arr[i][j] = (i-1)*arr[i-1][j] + (j+1)*arr[i-1][j-1];\n            }\n        }\n    }\n    return arr[n][m];",
    "    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1 || m == 1) {\n        return n + m - 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        dp[i][0] = 0;\n    }\n    for(long i = 0; i <= m; i++) {\n        dp[0][i] = 0;\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                dp[i][j] = 1;\n            } else if(i < j) {\n                dp[i][j] = 0;\n            } else {\n                dp[i][j] = (i-j)*dp[i-1][j] + (j+1)*dp[i-1][j-1];\n            }\n        }\n    }\n    return dp[n][m];",
    "  if (n < 0 || m < 0) {\n    return 0;\n  }\n  if (n == 0 && m == 0) {\n    return 1;\n  }\n  if (n == 0 || m == 0) {\n    return 0;\n  }\n  return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** arr = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        arr[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == j) {\n                arr[i][j] = 1;\n            } else if (j > i) {\n                arr[i][j] = 0;\n            } else {\n                arr[i][j] = (i - j) * arr[i - 1][j] + (j + 1) * arr[i - 1][j + 1];\n            }\n        }\n    }\n    long ans = arr[n][m];\n    for (long i = 0; i <= n; i++) {\n        delete[] arr[i];\n    }\n    delete[] arr;\n    return ans;",
    "    long a[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n        {\n            if(i==0 || j==0)\n            {\n                a[i][j]=1;\n            }\n            else if(i==1)\n            {\n                a[i][j]=j+1;\n            }\n            else if(j==1)\n            {\n                a[i][j]=1;\n            }\n            else\n            {\n                a[i][j]=a[i-1][j-1]+j*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            }\n            else {\n                a[i][j] = (i-j+1)*a[i-1][j] + j*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                a[i][j] = 1;\n            } else if (i == 0 || j == 0) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + (j+1)*a[i-1][j];\n            }\n        }\n    }\n    long ans = a[n][m];\n    for (long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1 || m == 1) {\n        return n + m - 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= m; i++) {\n        arr[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            arr[i][j] = (i-1)*arr[i-1][j] + (j+1)*arr[i][j-1];\n        }\n    }\n    return arr[n][m];",
    "    long** eulerian_matrix = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        eulerian_matrix[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                eulerian_matrix[i][j] = 1;\n            } else {\n                eulerian_matrix[i][j] = (i-j+1)*eulerian_matrix[i-1][j] + j*eulerian_matrix[i-1][j-1];\n            }\n        }\n    }\n    return eulerian_matrix[n][m];",
    "    if (n == 0 || m == 0) return 1;\n    if (n == 1 || m == 1) return n + m;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long *a = new long[n + 1];\n    a[0] = 1;\n    for (long i = 1; i <= n; i++) {\n        a[i] = 0;\n        for (long j = 0; j < i; j++) {\n            a[i] += a[j] * a[i - j - 1];\n        }\n    }\n    long res = a[n];\n    delete[] a;\n    return res;",
    "    long **a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(int i = 0; i <= n; i++) {\n        a[i][0] = 0;\n    }\n    for(int i = 0; i <= m; i++) {\n        a[0][i] = 0;\n    }\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j] + j*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 || m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                arr[i][j] = 1;\n            }\n            else {\n                arr[i][j] = arr[i-1][j-1] + (i-1)*arr[i-1][j];\n            }\n        }\n    }\n    return arr[n][m];",
    "    long** a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(int i = 1; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            if(j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + j*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-j)*a[i-1][j-1] + (j+1)*a[i-1][j];\n        }\n    }\n    return a[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                dp[i][j] = 1;\n            }\n            else {\n                dp[i][j] = (i-1)*dp[i-1][j] + (j+1)*dp[i][j-1];\n            }\n        }\n    }\n    return dp[n][m];",
    "    long** a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= m; i++) {\n        a[0][i] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - 1) * a[i - 1][j] + (j + 1) * a[i - 1][j - 1];\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            if (i == j) {\n                a[i][j] = 1;\n            }\n            else if (i < j) {\n                a[i][j] = 0;\n            }\n            else {\n                a[i][j] = (j + 1) * a[i - 1][j] + (i - j) * a[i - 1][j - 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (j+1)*a[i-1][j] + (i-j)*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1 || m == 1) {\n        return n + m - 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0) return 1;\n    if (m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 0;\n    }\n    for(long i = 0; i <= m; i++) {\n        a[0][i] = 0;\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + a[i-1][j-1];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1 || m == 1) {\n        return n;\n    }\n    if (n < m) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);",
    "    long dp[n+1][m+1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j > i) {\n                dp[i][j] = 0;\n            } else if (j == i) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = (i - j) * dp[i-1][j] + (j + 1) * dp[i-1][j-1];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long ans = 0;\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n > 0) {\n        ans += (n - m + 1) * eulerian_num(n - 1, m);\n    }\n    if (m > 0) {\n        ans += m * eulerian_num(n, m - 1);\n    }\n    return ans;",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-j) * a[i-1][j-1] + (j+1) * a[i-1][j];\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - 1) * a[i - 1][j] + (j + 1) * a[i - 1][j - 1];\n        }\n    }\n    return a[n][m];",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*(a[i-1][j-1] + a[i-1][j]);\n        }\n    }\n    return a[n][m];",
    "    long eulerian[n+1][m+1];\n    for(long i=0;i<=n;i++) {\n        for(long j=0;j<=m;j++) {\n            if(i == 0 && j == 0) {\n                eulerian[i][j] = 1;\n            }\n            else if(i == 0) {\n                eulerian[i][j] = 0;\n            }\n            else if(j == 0) {\n                eulerian[i][j] = 1;\n            }\n            else {\n                eulerian[i][j] = (i-j+1)*eulerian[i-1][j-1] + (j+1)*eulerian[i-1][j];\n            }\n        }\n    }\n    return eulerian[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        dp[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                dp[i][j] = 1;\n            } else if(i > j) {\n                dp[i][j] = dp[i-1][j-1] + (i-1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if(m > n) return 0;\n    if(m == n) return 1;\n    if(m == 1) return 1;\n    if(m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0) return 1;\n    if (m == 0) return 0;\n    if (n == 1) return m;\n    return (n - 1) * (eulerian_num(n - 1, m) + eulerian_num(n, m - 1));",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n)\n        return 0;\n    if (m == n)\n        return 1;\n    if (m == 1)\n        return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long a[n+1][m+1];\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            }\n            else {\n                a[i][j] = a[i-1][j-1] + (i+1)*a[i][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long result = 1;\n    for (long i = 1; i <= m; i++) {\n        result = result * (n - i + 1) / i;\n    }\n    return result;",
    "    long dp[n + 1][m + 1];\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = 1;\n            } else if (i == 0) {\n                dp[i][j] = 0;\n            } else if (j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = (i - j + 1) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long ans = 0;\n    if(n == 0 || m == 0)\n        return 1;\n    if(n == 1 || m == 1)\n        return n;\n    if(n < m)\n        return 0;\n    if(n == m)\n        return 1;\n    ans = eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m);\n    return ans;",
    "    long **a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(int i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + (j+1)*a[i-1][j-1];\n        }\n    }\n    return a[n][m];",
    "    long dp[n+1][m+1];\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                dp[i][j] = 1;\n            }\n            else if(i == 1) {\n                dp[i][j] = j + 1;\n            }\n            else if(j == 1) {\n                dp[i][j] = 1;\n            }\n            else {\n                dp[i][j] = dp[i-1][j-1] + (i * dp[i][j-1]);\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long** a = new long*[n + 1];\n    for (int i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            if (j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** a = new long*[n + 1];\n    for (int i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (int i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (i == j) {\n                a[i][j] = 1;\n            } else if (i > j) {\n                a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= m; i++) {\n        a[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + (j+1)*a[i][j-1];\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                a[i][j] = 1;\n            } else if (i == 0 || j == 0) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i - 1) * a[i - 1][j] + a[i - 1][j - 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long** arr = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        arr[i][0] = 0;\n    }\n    for(int i = 0; i <= m; i++) {\n        arr[0][i] = 0;\n    }\n    arr[0][0] = 1;\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            arr[i][j] = (i-1)*arr[i-1][j] + (j+1)*arr[i][j-1];\n        }\n    }\n    return arr[n][m];",
    "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (int i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (int i = 0; i <= n; i++) {\n        a[i][0] = 0;\n    }\n    for (int i = 0; i <= m; i++) {\n        a[0][i] = 0;\n    }\n    a[0][0] = 1;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= m; j++) {\n            if (i == j) {\n                a[i][j] = 1;\n            } else if (i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i - j) * a[i - 1][j] + j * a[i - 1][j - 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long** dp = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        dp[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) return 0;\n    if (m == n) return 1;\n    if (m == 1) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - 1) * a[i - 1][j] + a[i - 1][j - 1];\n        }\n    }\n    long result = a[n][m];\n    for (long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return result;",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long result = 1;\n    for (long i = 1; i <= m; i++) {\n        result = result * (n - i + 1) / i;\n    }\n    return result;",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 0;\n    }\n    for(long i = 0; i <= m; i++) {\n        a[0][i] = 0;\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + j*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= m; i++) {\n        a[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + (j+1)*a[i][j-1];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) return 0;\n    if (m == n) return 1;\n    if (m == 1) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long **a = new long*[n+1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j == 0) {\n                a[i][j] = a[i-1][j];\n            } else {\n                a[i][j] = a[i-1][j-1] + (i-1)*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long result = 0;\n    if (m == 0 || n == m) {\n        return 1;\n    }\n    if (m > n) {\n        return 0;\n    }\n    result = (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n    return result;",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i-1][j-1] + (i-1)*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n + 1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n < 0 || m < 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long eulerian[n+1][m+1];\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                eulerian[i][j] = 1;\n            } else {\n                eulerian[i][j] = (i-j+1)*eulerian[i-1][j] + j*eulerian[i-1][j-1];\n            }\n        }\n    }\n    return eulerian[n][m];",
    "    long i, j;\n    long **a = new long*[n + 1];\n    for (i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (i = 0; i <= n; i++) {\n        for (j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (i = 1; i <= n; i++) {\n        for (j = 1; j <= m; j++) {\n            a[i][j] = (i - 1) * a[i - 1][j] + a[i - 1][j - 1];\n        }\n    }\n    long ans = a[n][m];\n    for (i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= m; i++) {\n        a[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + (j+1)*a[i-1][j-1];\n        }\n    }\n    long ans = a[n][m];\n    for(long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long ans = 1;\n    for (long i = n - m + 1; i <= n; i++) {\n        ans *= i;\n    }\n    return ans;",
    "    long **arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                arr[i][j] = arr[i-1][i-1];\n            }\n            else {\n                arr[i][j] = arr[i-1][j-1] + (i*arr[i-1][j]);\n            }\n        }\n    }\n    return arr[n][m];",
    "    long** dp = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        dp[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= m; i++) {\n        dp[0][i] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            dp[i][j] = (i - 1) * dp[i - 1][j] + (j + 1) * dp[i][j - 1];\n        }\n    }\n    return dp[n][m];",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + (j+1)*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 && j == 0) {\n                a[i][j] = 1;\n            } else if(i == 0) {\n                a[i][j] = 0;\n            } else if(j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + j*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0)\n        return 1;\n    if (m == 0)\n        return 0;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long eulerian[n + 1][m + 1];\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= std::min(i, m); j++) {\n            if (j == 0) {\n                eulerian[i][j] = 1;\n            } else if (j == i) {\n                eulerian[i][j] = 1;\n            } else {\n                eulerian[i][j] = eulerian[i - 1][j - 1] + (i - j) * eulerian[i - 1][j];\n            }\n        }\n    }\n    return eulerian[n][m];",
    "    long **arr = new long*[n];\n    for(long i = 0; i < n; i++) {\n        arr[i] = new long[m];\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for(long i = 1; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            if(j == 0) {\n                arr[i][j] = arr[i-1][j];\n            } else {\n                arr[i][j] = arr[i-1][j] + arr[i][j-1];\n            }\n        }\n    }\n    long ans = arr[n-1][m-1];\n    for(long i = 0; i < n; i++) {\n        delete[] arr[i];\n    }\n    delete[] arr;\n    return ans;",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 || m == 0) return 1;\n    if (n == 1 || m == 1) return n + m;\n    return (n + m) * eulerian_num(n - 1, m) + n * eulerian_num(n, m - 1);",
    "  if (n == m) return 1;\n  if (m == 0) return 0;\n  if (m == 1) return 1;\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m - 2);",
    "    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if(n == 0 && m == 0) return 1;\n    if(n == 0 || m == 0) return 0;\n    return (n-m+1)*eulerian_num(n-1, m-1) + (m+1)*eulerian_num(n-1, m);",
    "    long **a = new long *[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - 1) * a[i - 1][j] + a[i - 1][j - 1];\n        }\n    }\n    long result = a[n][m];\n    for (long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return result;",
    "    long result = 0;\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n > 0) {\n        result += (n - m + 1) * eulerian_num(n - 1, m);\n    }\n    if (m > 0) {\n        result += m * eulerian_num(n, m - 1);\n    }\n    return result;",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            if(i == 0 && j == 0) {\n                a[i][j] = 1;\n            }\n            else if(i == 0) {\n                a[i][j] = 0;\n            }\n            else if(j == 0) {\n                a[i][j] = 1;\n            }\n            else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + (j+1)*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** arr = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        arr[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                arr[i][j] = 1;\n            } else {\n                arr[i][j] = arr[i][j - 1] + (i - 1) * arr[i - 1][j];\n            }\n        }\n    }\n    return arr[n][m];",
    "    long result = 0;\n    if(n == 0) {\n        return 1;\n    }\n    if(m == 0) {\n        return 0;\n    }\n    if(n == 1) {\n        return 1;\n    }\n    if(m == 1) {\n        return 1;\n    }\n    if(n == m) {\n        return 1;\n    }\n    if(n > m) {\n        return 0;\n    }\n    result = eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n, m - 1);\n    return result;",
    "    long result = 1;\n    for (long i = 1; i <= m; i++) {\n        result *= (n - i + 1);\n        result /= i;\n    }\n    return result;",
    "    long res = 1;\n    for (long i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;",
    "    long** a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 0;\n            } else if(i == 1 || j == 1) {\n                a[i][j] = 1;\n            } else if(i == j) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j] + j*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long a[n + 1][m + 1];\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= std::min(i, m); j++) {\n            if (j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (a[i - 1][j - 1] + (i - j) * a[i - 1][j]) % 1000000007;\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for(int i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(int i = 0; i <= n; i++) {\n        for(int j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + a[i-1][j-1];\n        }\n    }\n    return a[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        dp[i][0] = 0;\n    }\n    for(long i = 0; i <= m; i++) {\n        dp[0][i] = 0;\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                dp[i][j] = 1;\n            } else if(i < j) {\n                dp[i][j] = 0;\n            } else {\n                dp[i][j] = (i-j+1)*dp[i-1][j-1] + (j+1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "  long **a = new long*[n+1];\n  for(long i = 0; i <= n; i++) {\n    a[i] = new long[m+1];\n    for(long j = 0; j <= m; j++) {\n      a[i][j] = 0;\n    }\n  }\n  for(long i = 0; i <= n; i++) {\n    a[i][0] = 1;\n  }\n  for(long i = 1; i <= n; i++) {\n    for(long j = 1; j <= m; j++) {\n      a[i][j] = a[i-1][j-1] + (i-1)*a[i-1][j];\n    }\n  }\n  return a[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0) return 1;\n    if (m == 0) return 0;\n    if (n == m) return 1;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "  if (n == 0) return 1;\n  if (m == 0) return 0;\n  if (n == 1) return m;\n  return (n - 1) * (eulerian_num(n - 1, m) + eulerian_num(n, m - 1));",
    "  if (n == 0 && m == 0) {\n    return 1;\n  }\n  if (n == 0 || m == 0) {\n    return 0;\n  }\n  return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + j*a[i-1][j];\n            }\n        }\n    }\n    return a[n][m];",
    "    long result = 1;\n    for (long i = n - m + 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;",
    "    if (m == 0 || m == n) {\n        return 1;\n    }\n    if (m == 1 || m == n - 1) {\n        return n;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m);",
    "    long dp[n+1][m+1];\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 && j == 0) {\n                dp[i][j] = 1;\n            } else if(i == 0) {\n                dp[i][j] = 0;\n            } else if(j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = (i-j+1)*dp[i-1][j-1] + (j+1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            }\n            else if(i == 1) {\n                a[i][j] = j+1;\n            }\n            else if(j == 1) {\n                a[i][j] = 1;\n            }\n            else {\n                a[i][j] = (i*a[i][j-1]) + ((i+1)*a[i-1][j-1]);\n            }\n        }\n    }\n    long ans = a[n][m];\n    for(long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **arr = new long*[n+1];\n    for(int i=0;i<=n;i++) {\n        arr[i] = new long[m+1];\n    }\n    for(int i=0;i<=n;i++) {\n        for(int j=0;j<=m;j++) {\n            arr[i][j] = 0;\n        }\n    }\n    arr[0][0] = 1;\n    for(int i=1;i<=n;i++) {\n        for(int j=0;j<=m;j++) {\n            if(j==0) {\n                arr[i][j] = arr[i-1][j+1];\n            }\n            else if(j==m) {\n                arr[i][j] = arr[i-1][j-1];\n            }\n            else {\n                arr[i][j] = arr[i-1][j-1] + arr[i-1][j+1];\n            }\n        }\n    }\n    return arr[n][m];",
    "    long** a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    long** a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == j) {\n                a[i][j] = 1;\n            } else if(j > i) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i - j) * a[i - 1][j] + (j + 1) * a[i - 1][j + 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-j)*a[i-1][j-1] + (j+1)*a[i-1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    if (n < m) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);",
    "    if (n == m)\n        return 1;\n    if (m == 0)\n        return 0;\n    if (m == 1)\n        return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m - 2);",
    "    long result = 1;\n    for (long i = n - m + 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j];\n        }\n    }\n    long ans = a[n][m];\n    for (long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                a[i][j] = 1;\n            }\n            else {\n                a[i][j] = (i-j+1)*a[i-1][j-1] + j*a[i-1][j];\n            }\n        }\n    }\n    long ans = a[n][m];\n    for(long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return ans;",
    "    long a[n+1][m+1];\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (a[i-1][j] + j*a[i-1][j-1]) % 1000000007;\n            }\n        }\n    }\n    return a[n][m];",
    "  long **a = new long*[n+1];\n  for(long i = 0; i <= n; i++) {\n    a[i] = new long[m+1];\n  }\n  for(long i = 0; i <= n; i++) {\n    for(long j = 0; j <= m; j++) {\n      a[i][j] = 0;\n    }\n  }\n  for(long i = 0; i <= m; i++) {\n    a[0][i] = 1;\n  }\n  for(long i = 1; i <= n; i++) {\n    for(long j = 1; j <= m; j++) {\n      a[i][j] = (i-1)*a[i-1][j] + (j+1)*a[i][j-1];\n    }\n  }\n  return a[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                dp[i][j] = dp[i-1][j+1];\n            } else if(j == m) {\n                dp[i][j] = dp[i-1][j-1];\n            } else {\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long dp[n + 1][m + 1];\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    long c[n + 1][m + 1];\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= std::min(i, m); j++) {\n            if (j == 0)\n                c[i][j] = 1;\n            else\n                c[i][j] = c[i - 1][j - 1] + j * c[i - 1][j];\n        }\n    }\n    return c[n][m];",
    "  if (n < 0 || m < 0) return 0;\n  if (n == 0 && m == 0) return 1;\n  if (n == 0 || m == 0) return 0;\n  return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long ans = 1;\n    for(long i = 1; i <= m; i++) {\n        ans = ans * (n - i + 1) / i;\n    }\n    return ans;",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0)\n        return 1;\n    if (m == 0)\n        return 0;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i-1][j-1] + (i-1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0) return 1;\n    if (m == 0) return 0;\n    if (n == 1) return m;\n    if (n == m) return 1;\n    return (m - n + 1) * eulerian_num(n - 1, m - 1) + (n + 1) * eulerian_num(n, m - 1);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j == 0) {\n                a[i][j] = a[i - 1][j + 1];\n            } else if (j == m) {\n                a[i][j] = a[i - 1][j - 1] * j;\n            } else {\n                a[i][j] = a[i - 1][j - 1] * j + a[i - 1][j + 1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long **a = new long*[n+1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j == 0) {\n                a[i][j] = a[i-1][j+1];\n            } else if (j == m) {\n                a[i][j] = a[i-1][j-1] * (m+1-i);\n            } else {\n                a[i][j] = a[i-1][j-1] * (m+1-i) + a[i-1][j+1];\n            }\n        }\n    }\n    long result = a[n][0];\n    for (long i = 0; i <= n; i++) {\n        delete[] a[i];\n    }\n    delete[] a;\n    return result;",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0) return 1;\n    if (m == 0) return 0;\n    long res = 0;\n    for (long i = 1; i <= n; i++) {\n        res += eulerian_num(n - i, m - 1);\n    }\n    return res;",
    "    long dp[n+1][m+1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n    for (long i = 1; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (j == 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = (i-j+1)*dp[i-1][j-1] + (j+1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    long a[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n        {\n            if(i==0||j==0)\n                a[i][j]=1;\n            else\n                a[i][j]=a[i-1][j-1]+j*a[i-1][j];\n        }\n    }\n    return a[n][m];"
  ]
}