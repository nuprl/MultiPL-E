{
  "name": "mbpp_103_eulerian_num",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find the Eulerian number a(n, m).\nlong eulerian_num(long n, long m) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = eulerian_num;\n    assert(candidate((3), (1)) == (4));\n    assert(candidate((4), (1)) == (11));\n    assert(candidate((5), (3)) == (26));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    // Write your code here\n    long dp[n+1][m+1];\n    for(int i=0;i<=n;i++)\n    {\n        for(int j=0;j<=m;j++)\n        {\n            if(i==0 || j==0)\n            {\n                dp[i][j]=0;\n            }\n            else if(i==1)\n            {\n                dp[i][j]=1;\n            }\n            else if(j==1)\n            {\n                dp[i][j]=i;\n            }\n            else\n            {\n                dp[i][j]=dp[i-1][j-1]+j*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (m > n)\n        return 0;\n    if (m == n)\n        return 1;\n    if (m == 1)\n        return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0 || m == 0)\n        return 1;\n    if (n == 1 || m == 1)\n        return n + m - 1;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = (i-j+1)*a[i-1][j] + j*a[i-1][j-1];\n            }\n        }\n    }\n    return a[n][m];",
    "    long** dp = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        dp[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                dp[i][j] = 1;\n            }\n            else {\n                dp[i][j] = dp[i-1][j-1] + (i-1)*dp[i-1][j];\n            }\n        }\n    }\n    return dp[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long** arr = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        arr[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    for(long i = 0; i <= n; i++) {\n        arr[i][0] = 1;\n    }\n    for(long i = 0; i <= m; i++) {\n        arr[0][i] = 1;\n    }\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            arr[i][j] = arr[i-1][j-1] + (i*arr[i-1][j]);\n        }\n    }\n    long ans = arr[n][m];\n    for(long i = 0; i <= n; i++) {\n        delete[] arr[i];\n    }\n    delete[] arr;\n    return ans;",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            if(j == 0) {\n                a[i][j] = a[i-1][j+1];\n            } else if(j == m) {\n                a[i][j] = a[i-1][j-1];\n            } else {\n                a[i][j] = a[i-1][j-1] + a[i-1][j+1];\n            }\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n+1];\n    for(long i = 0; i <= n; i++) {\n        a[i] = new long[m+1];\n    }\n    for(long i = 0; i <= n; i++) {\n        for(long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    a[0][0] = 1;\n    for(long i = 1; i <= n; i++) {\n        for(long j = 1; j <= m; j++) {\n            a[i][j] = (i-1)*a[i-1][j] + a[i-1][j-1];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 || m == 0) return 1;\n    if (n == 1 || m == 1) return n;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    long **a = new long*[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            a[i][j] = 0;\n        }\n    }\n    for (long i = 0; i <= n; i++) {\n        a[i][0] = 1;\n    }\n    for (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= m; j++) {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j];\n        }\n    }\n    return a[n][m];",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);",
    "    long **a = new long *[n + 1];\n    for (long i = 0; i <= n; i++) {\n        a[i] = new long[m + 1];\n    }\n    for (long i = 0; i <= n; i++) {\n        for (long j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 0;\n            } else if (i == 1 || j == 1) {\n                a[i][j] = 1;\n            } else if (i == j) {\n                a[i][j] = 1;\n            } else if (i < j) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (i - j) * a[i - 1][j] + j * a[i - 1][j - 1];\n            }\n        }\n    }\n    return a[n][m];"
  ]
}