{
  "name": "mbpp_472_check_Consecutive",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to check whether the given vector contains consecutive numbers or not.\nbool check_Consecutive(std::vector<long> l) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = check_Consecutive;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)6}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)1}))) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::sort(l.begin(), l.end());\n    for(int i = 0; i < l.size() - 1; i++) {\n        if(l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    if(l.size() == 0) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n    for(int i = 0; i < l.size() - 1; i++) {\n        if(l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    if (l.size() == 0) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i + 1] - l[i] != 1) {\n            return false;\n        }\n    }\n    return true;",
    "    std::sort(l.begin(), l.end());\n    for(int i = 0; i < l.size()-1; i++) {\n        if(l[i+1] - l[i] != 1) {\n            return false;\n        }\n    }\n    return true;",
    "    std::sort(l.begin(), l.end());\n    for(int i = 0; i < l.size() - 1; i++) {\n        if(l[i] + 1 != l[i+1]) {\n            return false;\n        }\n    }\n    return true;",
    "    std::sort(l.begin(), l.end());\n    for(int i=0; i<l.size()-1; i++) {\n        if(l[i+1] != l[i]+1) {\n            return false;\n        }\n    }\n    return true;",
    "    if(l.size()==0)\n        return false;\n    std::sort(l.begin(),l.end());\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]-l[i-1]!=1)\n            return false;\n    }\n    return true;",
    "    // Write your code here\n    std::sort(l.begin(), l.end());\n    for(int i = 0; i < l.size() - 1; i++) {\n        if(l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = l.size();\n    if (n < 1) {\n        return false;\n    }\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if (max - min + 1 == n) {\n        return true;\n    }\n    return false;",
    "    int n = l.size();\n    if (n < 1) {\n        return false;\n    }\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if (max - min + 1 == n) {\n        return true;\n    }\n    return false;",
    "    if(l.size()==0)\n        return false;\n    std::sort(l.begin(),l.end());\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]-l[i-1]!=1)\n            return false;\n    }\n    return true;",
    "    std::vector<long> v;\n    for (int i = 0; i < l.size(); i++) {\n        v.push_back(l[i]);\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < v.size() - 1; i++) {\n        if (v[i] + 1 != v[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    // Write your code here\n    sort(l.begin(),l.end());\n    for(int i=0;i<l.size()-1;i++)\n    {\n        if(l[i+1]-l[i]!=1)\n        {\n            return false;\n        }\n    }\n    return true;",
    "    int n = l.size();\n    if (n < 1) {\n        return true;\n    }\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if (max - min + 1 == n) {\n        bool visited[n];\n        memset(visited, false, sizeof(visited));\n        for (int i = 0; i < n; i++) {\n            if (visited[l[i] - min] != false) {\n                return false;\n            }\n            visited[l[i] - min] = true;\n        }\n        return true;\n    }\n    return false;",
    "    if (l.size() == 0) {\n        return false;\n    }\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] - l[i - 1] != 1) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = l.size();\n    if (n < 1) {\n        return false;\n    }\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if (max - min + 1 == n) {\n        bool visited[n];\n        memset(visited, false, sizeof(visited));\n        for (int i = 0; i < n; i++) {\n            if (visited[l[i] - min] != false) {\n                return false;\n            }\n            visited[l[i] - min] = true;\n        }\n        return true;\n    }\n    return false;",
    "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++) {\n        if (l[i] + 1 != l[i + 1]) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = l.size();\n    if(n < 1) {\n        return false;\n    }\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if(max - min + 1 == n) {\n        return true;\n    }\n    return false;",
    "    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] - l[i - 1] != 1) {\n            return false;\n        }\n    }\n    return true;",
    "    int n = l.size();\n    if (n < 1)\n        return false;\n    int min = *std::min_element(l.begin(), l.end());\n    int max = *std::max_element(l.begin(), l.end());\n    if (max - min + 1 == n) {\n        bool visited[n];\n        memset(visited, false, sizeof(visited));\n        for (int i = 0; i < n; i++) {\n            if (visited[l[i] - min] != false)\n                return false;\n            visited[l[i] - min] = true;\n        }\n        return true;\n    }\n    return false;"
  ]
}