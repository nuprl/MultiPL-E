{
  "name": "mbpp_400_extract_freq",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to extract the number of unique tuples in the given vector.\nlong extract_freq(std::vector<long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = extract_freq;\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(3, 4), (std::tuple<long, long>)std::make_tuple(1, 2), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(5, 6)}))) == (3));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(4, 15), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(6, 7)}))) == (4));\n    assert(candidate((std::vector<long>({(std::tuple<long, long>)std::make_tuple(5, 16), (std::tuple<long, long>)std::make_tuple(2, 3), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 9)}))) == (4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long count = 0;\n    std::unordered_map<long, long> freq_map;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (freq_map.find(test_list[i]) == freq_map.end()) {\n            freq_map[test_list[i]] = 1;\n        } else {\n            freq_map[test_list[i]] += 1;\n        }\n    }\n    for (auto it = freq_map.begin(); it != freq_map.end(); it++) {\n        if (it->second > 1) {\n            count += it->second;\n        }\n    }\n    return count;",
    "    std::vector<long>::iterator it;\n    std::set<long> unique_set;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        unique_set.insert(*it);\n    }\n    return unique_set.size();",
    "    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    std::vector<long>::iterator it3;\n    std::vector<long>::iterator it4;\n    std::vector<long>::iterator it5;\n    std::vector<long>::iterator it6;\n    std::vector<long>::iterator it7;\n    std::vector<long>::iterator it8;\n    std::vector<long>::iterator it9;\n    std::vector<long>::iterator it10;\n    std::vector<long>::iterator it11;\n    std::vector<long>::iterator it12;\n    std::vector<long>::iterator it13;\n    std::vector<long>::iterator it14;\n    std::vector<long>::iterator it15;\n    std::vector<long>::iterator it16;\n    std::vector<long>::iterator it17;\n    std::vector<long>::iterator it18;\n    std::vector<long>::iterator it19;\n    std::vector<long>::iterator it20;\n    std::vector<long>::iterator it21;\n    std::vector<long>::iterator it22;\n    std::vector<long>::iterator it23;\n    std::vector<long>::iterator it24;\n    std::vector<long>::iterator it25;\n    std::vector<long>::iterator it26;\n    std::vector<long>::iterator it27;\n    std::vector<long>::iterator it28;\n    std::vector<long>::iterator it29;\n    std::vector<long>::iterator it30;\n    std::vector<long>::iterator it31;\n    std::vector<long>::iterator it32;\n    std::vector<long>::iterator it33;\n    std::vector<long>::iterator it34;\n    std::vector<long>::iterator it35;\n    std::vector<long>::iterator it36;\n    std::vector<long>::iterator it37;\n    std::vector<long>::iterator it38;\n    std::vector<long>::iterator it39;\n    std::vector<",
    "    std::vector<long> unique_list;\n    for(long i = 0; i < test_list.size(); i++) {\n        if(std::find(unique_list.begin(), unique_list.end(), test_list[i]) == unique_list.end()) {\n            unique_list.push_back(test_list[i]);\n        }\n    }\n    return unique_list.size();",
    "    std::unordered_map<long, long> freq_map;\n    for (auto i : test_list) {\n        freq_map[i]++;\n    }\n    return freq_map.size();",
    "    std::set<std::vector<long>> unique_tuples;\n    for (int i = 0; i < test_list.size(); i++) {\n        std::vector<long> tuple;\n        for (int j = i; j < test_list.size(); j++) {\n            tuple.push_back(test_list[j]);\n            unique_tuples.insert(tuple);\n        }\n    }\n    return unique_tuples.size();",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 0;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] != test_list[i + 1]) {\n            count++;\n        }\n    }\n    return count + 1;",
    "    std::set<std::vector<long>> unique_tuples;\n    for(int i=0;i<test_list.size();i+=3) {\n        std::vector<long> tuple;\n        tuple.push_back(test_list[i]);\n        tuple.push_back(test_list[i+1]);\n        tuple.push_back(test_list[i+2]);\n        unique_tuples.insert(tuple);\n    }\n    return unique_tuples.size();",
    "    std::vector<long> unique_list;\n    for(long i=0;i<test_list.size();i++) {\n        if(std::find(unique_list.begin(),unique_list.end(),test_list[i]) == unique_list.end()) {\n            unique_list.push_back(test_list[i]);\n        }\n    }\n    return unique_list.size();",
    "    std::sort(test_list.begin(), test_list.end());\n    std::vector<long>::iterator it = std::unique(test_list.begin(), test_list.end());\n    test_list.resize(std::distance(test_list.begin(), it));\n    return test_list.size();",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i] != test_list[i-1]) {\n            count++;\n        }\n    }\n    return count;",
    "    std::set<std::vector<long>> unique_tuples;\n    for (int i = 0; i < test_list.size(); i++) {\n        std::vector<long> temp;\n        for (int j = 0; j < test_list.size(); j++) {\n            if (i != j) {\n                temp.push_back(test_list[j]);\n            }\n        }\n        unique_tuples.insert(temp);\n    }\n    return unique_tuples.size();",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 1;\n    for(int i = 1; i < test_list.size(); i++) {\n        if(test_list[i] != test_list[i-1]) {\n            count++;\n        }\n    }\n    return count;",
    "    long count = 0;\n    std::vector<long>::iterator it;\n    std::vector<long>::iterator it2;\n    for (it = test_list.begin(); it != test_list.end(); it++) {\n        for (it2 = test_list.begin(); it2 != test_list.end(); it2++) {\n            if (*it == *it2) {\n                count++;\n            }\n        }\n    }\n    return count;",
    "    // Write your code here\n    long count = 0;\n    std::sort(test_list.begin(), test_list.end());\n    for(long i = 0; i < test_list.size() - 1; i++) {\n        if(test_list[i] != test_list[i + 1]) {\n            count++;\n        }\n    }\n    return count;",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 1;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] != test_list[i + 1]) {\n            count++;\n        }\n    }\n    return count;",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 0;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (i == 0) {\n            count++;\n        } else if (test_list[i] != test_list[i - 1]) {\n            count++;\n        }\n    }\n    return count;",
    "    long unique_tuples = 0;\n    std::vector<long> unique_list;\n    for (long i = 0; i < test_list.size(); i++) {\n        if (std::find(unique_list.begin(), unique_list.end(), test_list[i]) == unique_list.end()) {\n            unique_list.push_back(test_list[i]);\n            unique_tuples++;\n        }\n    }\n    return unique_tuples;",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 1;\n    for (int i = 1; i < test_list.size(); i++) {\n        if (test_list[i] != test_list[i - 1]) {\n            count++;\n        }\n    }\n    return count;",
    "    std::sort(test_list.begin(), test_list.end());\n    long count = 1;\n    for (int i = 0; i < test_list.size() - 1; i++) {\n        if (test_list[i] != test_list[i + 1]) {\n            count++;\n        }\n    }\n    return count;"
  ]
}