{
  "name": "mbpp_554_Split",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function which takes a vector of integers and only returns the odd ones.\nstd::vector<long> Split(std::vector<long> list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = Split;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)12, (long)13}))) == (std::vector<long>({(long)11, (long)13})));\n    assert(candidate((std::vector<long>({(long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)7, (long)9, (long)1})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> odd_list;\n    for(int i=0;i<list.size();i++){\n        if(list[i]%2!=0){\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;",
    "    std::vector<long> odd_list;\n    for (long i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;",
    "    std::vector<long> odd;\n    for(int i=0;i<list.size();i++)\n    {\n        if(list[i]%2!=0)\n        {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "  std::vector<long> odd;\n  for (int i = 0; i < list.size(); i++) {\n    if (list[i] % 2 != 0) {\n      odd.push_back(list[i]);\n    }\n  }\n  return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd_list;\n    for (auto i : list) {\n        if (i % 2 != 0) {\n            odd_list.push_back(i);\n        }\n    }\n    return odd_list;",
    "    std::vector<long> odd_list;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd_list.push_back(list[i]);\n        }\n    }\n    return odd_list;",
    "  std::vector<long> odd;\n  for(int i=0;i<list.size();i++)\n  {\n    if(list[i]%2!=0)\n    {\n      odd.push_back(list[i]);\n    }\n  }\n  return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> result;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            result.push_back(list[i]);\n        }\n    }\n    return result;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "    std::vector<long> odd;\n    for (int i = 0; i < list.size(); i++) {\n        if (list[i] % 2 != 0) {\n            odd.push_back(list[i]);\n        }\n    }\n    return odd;",
    "  std::vector<long> odd;\n  for (int i = 0; i < list.size(); i++) {\n    if (list[i] % 2 != 0) {\n      odd.push_back(list[i]);\n    }\n  }\n  return odd;"
  ]
}