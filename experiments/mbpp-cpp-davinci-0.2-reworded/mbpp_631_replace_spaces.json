{
  "name": "mbpp_631_replace_spaces",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nstd::string replace_spaces(std::string text) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = replace_spaces;\n    assert(candidate((\"Jumanji The Jungle\")) == (\"Jumanji_The_Jungle\"));\n    assert(candidate((\"The_Avengers\")) == (\"The Avengers\"));\n    assert(candidate((\"Fast and Furious\")) == (\"Fast_and_Furious\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    } else if (text[i] == '_') {\n      text[i] = ' ';\n    }\n  }\n  return text;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "  for (int i = 0; i < text.length(); i++) {\n    if (text[i] == ' ') {\n      text[i] = '_';\n    } else if (text[i] == '_') {\n      text[i] = ' ';\n    }\n  }\n  return text;",
    "    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        } else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n            result += '_';\n        } else if (text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (char c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (auto c : text) {\n        if (c == ' ') {\n            result += '_';\n        } else if (c == '_') {\n            result += ' ';\n        } else {\n            result += c;\n        }\n    }\n    return result;",
    "    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i] = '_';\n        }\n        else if(text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;",
    "    std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == '_') {\n            result += ' ';\n        } else if (text[i] == ' ') {\n            result += '_';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n            result += '_';\n        } else if(text[i] == '_') {\n            result += ' ';\n        } else {\n            result += text[i];\n        }\n    }\n    return result;",
    "    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            text[i] = '_';\n        } else if (text[i] == '_') {\n            text[i] = ' ';\n        }\n    }\n    return text;",
    "  std::string result;\n  for (int i = 0; i < text.size(); i++) {\n    if (text[i] == ' ') {\n      result += '_';\n    } else if (text[i] == '_') {\n      result += ' ';\n    } else {\n      result += text[i];\n    }\n  }\n  return result;"
  ]
}