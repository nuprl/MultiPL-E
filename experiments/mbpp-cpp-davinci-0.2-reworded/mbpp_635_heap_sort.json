{
  "name": "mbpp_635_heap_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector.\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = heap_sort;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> sorted;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(long i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable){\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable)\n        pq.push(i);\n    std::vector<long> ans;\n    while(!pq.empty()){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    // create a min heap\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    std::vector<long> sorted;\n    while(!min_heap.empty()){\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i: iterable)\n        minHeap.push(i);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort\n    return iterable;"
  ]
}