{
  "name": "mbpp_635_heap_sort",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to sort the given vector.\nstd::vector<long> heap_sort(std::vector<long> iterable) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = heap_sort;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)7, (long)9, (long)2, (long)4, (long)6, (long)8, (long)0}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)25, (long)35, (long)22, (long)85, (long)14, (long)65, (long)75, (long)25, (long)58}))) == (std::vector<long>({(long)14, (long)22, (long)25, (long)25, (long)35, (long)58, (long)65, (long)75, (long)85})));\n    assert(candidate((std::vector<long>({(long)7, (long)1, (long)9, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)7, (long)9})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> sorted;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(long i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable){\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable)\n        pq.push(i);\n    std::vector<long> ans;\n    while(!pq.empty()){\n        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    // create a min heap\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    std::vector<long> sorted;\n    while(!min_heap.empty()){\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++)\n    {\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty())\n    {\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i: iterable)\n        minHeap.push(i);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort\n    return iterable;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable)\n        minHeap.push(num);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto element: iterable) {\n        min_heap.push(element);\n    }\n    while(!min_heap.empty()) {\n        sorted_list.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_list;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++)\n    {\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Implement heap sort here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // Your code goes here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++)\n    {\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(auto i: iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted_vector;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted_vector.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted_vector;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "  // TODO: Write your code here\n  std::vector<long> result;\n  std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n  for(auto num : iterable)\n    minHeap.push(num);\n  while(!minHeap.empty()){\n    result.push_back(minHeap.top());\n    minHeap.pop();\n  }\n  return result;",
    "    // Write your code here\n    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable)\n    {\n        pq.push(i);\n    }\n    while(!pq.empty())\n    {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable){\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> sorted_vector;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted_vector.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_vector;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num: iterable)\n        minHeap.push(num);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (long i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable)\n        min_heap.push(i);\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    std::vector<long> result;\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto num : iterable) {\n        min_heap.push(num);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(int i=0;i<iterable.size();i++){\n        minHeap.push(iterable[i]);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here.\n    std::vector<long> heap;\n    for(auto i:iterable){\n        heap.push_back(i);\n        std::push_heap(heap.begin(),heap.end());\n    }\n    std::sort_heap(heap.begin(),heap.end());\n    return heap;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted_vector;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i: iterable)\n        min_heap.push(i);\n    while(!min_heap.empty()){\n        sorted_vector.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_vector;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (long i : iterable) {\n        heap.push_back(i);\n        long index = heap.size() - 1;\n        while (index > 0) {\n            long parent = (index - 1) / 2;\n            if (heap[parent] < heap[index]) {\n                std::swap(heap[parent], heap[index]);\n                index = parent;\n            } else {\n                break;\n            }\n        }\n    }\n    std::vector<long> result;\n    while (heap.size() > 0) {\n        result.push_back(heap[0]);\n        heap[0] = heap.back();\n        heap.pop_back();\n        long index = 0;\n        while (index < heap.size()) {\n            long left = 2 * index + 1;\n            long right = 2 * index + 2;\n            long largest = index;\n            if (left < heap.size() && heap[left] > heap[largest]) {\n                largest = left;\n            }\n            if (right < heap.size() && heap[right] > heap[largest]) {\n                largest = right;\n            }\n            if (largest != index) {\n                std::swap(heap[largest], heap[index]);\n                index = largest;\n            } else {\n                break;\n            }\n        }\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num: iterable) {\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "\t// Write your code here\n\t// Return the sorted vector\n\tstd::vector<long> sorted;\n\tstd::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\tfor (auto i : iterable) {\n\t\tpq.push(i);\n\t}\n\twhile (!pq.empty()) {\n\t\tsorted.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\treturn sorted;",
    "    // Write your code here\n    std::vector<long> v;\n    std::make_heap(iterable.begin(), iterable.end());\n    std::sort_heap(iterable.begin(), iterable.end());\n    return iterable;",
    "    std::vector<long> heap;\n    for (long i = 0; i < iterable.size(); i++) {\n        heap.push_back(iterable[i]);\n        long index = heap.size() - 1;\n        while (index > 0) {\n            long parent_index = (index - 1) / 2;\n            if (heap[index] > heap[parent_index]) {\n                std::swap(heap[index], heap[parent_index]);\n                index = parent_index;\n            } else {\n                break;\n            }\n        }\n    }\n    std::vector<long> result;\n    while (heap.size() > 0) {\n        result.push_back(heap[0]);\n        heap[0] = heap[heap.size() - 1];\n        heap.pop_back();\n        long index = 0;\n        while (index < heap.size()) {\n            long left_child_index = 2 * index + 1;\n            long right_child_index = 2 * index + 2;\n            if (left_child_index >= heap.size()) {\n                break;\n            }\n            long max_index = index;\n            if (heap[max_index] < heap[left_child_index]) {\n                max_index = left_child_index;\n            }\n            if (right_child_index < heap.size() && heap[max_index] < heap[right_child_index]) {\n                max_index = right_child_index;\n            }\n            if (max_index == index) {\n                break;\n            }\n            std::swap(heap[index], heap[max_index]);\n            index = max_index;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> sorted_vector;\n    std::priority_queue<long> pq;\n    for(auto x:iterable){\n        pq.push(x);\n    }\n    while(!pq.empty()){\n        sorted_vector.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted_vector;",
    "    // TODO: Write your code here\n    std::vector<long> sortedArray;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for (auto num : iterable) {\n        minHeap.push(num);\n    }\n    while (!minHeap.empty()) {\n        sortedArray.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedArray;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for (int i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable){\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for(auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> result = iterable;\n    std::make_heap(result.begin(), result.end());\n    std::sort_heap(result.begin(), result.end());\n    return result;",
    "    std::vector<long> sorted_vector;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted_vector.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_vector;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(long i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> heap;\n    for(int i = 0; i < iterable.size(); i++){\n        heap.push_back(iterable[i]);\n        int index = heap.size() - 1;\n        while(index > 0){\n            int parent = (index - 1) / 2;\n            if(heap[parent] > heap[index]){\n                std::swap(heap[parent], heap[index]);\n                index = parent;\n            }\n            else{\n                break;\n            }\n        }\n    }\n    std::vector<long> sorted;\n    while(heap.size() > 0){\n        sorted.push_back(heap[0]);\n        heap[0] = heap[heap.size() - 1];\n        heap.pop_back();\n        int index = 0;\n        while(index < heap.size()){\n            int left = 2 * index + 1;\n            int right = 2 * index + 2;\n            if(left >= heap.size()){\n                break;\n            }\n            int min_index = index;\n            if(heap[left] < heap[min_index]){\n                min_index = left;\n            }\n            if(right < heap.size() && heap[right] < heap[min_index]){\n                min_index = right;\n            }\n            if(min_index == index){\n                break;\n            }\n            std::swap(heap[index], heap[min_index]);\n            index = min_index;\n        }\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++)\n        v.push_back(iterable[i]);\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto x : iterable) {\n        pq.push(x);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i: iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable) {\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted_list.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted_list;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> arr;\n    for(int i=0;i<iterable.size();i++)\n    {\n        arr.push_back(iterable[i]);\n    }\n    int n=arr.size();\n    for(int i=n/2-1;i>=0;i--)\n    {\n        heapify(arr,n,i);\n    }\n    for(int i=n-1;i>=0;i--)\n    {\n        std::swap(arr[0],arr[i]);\n        heapify(arr,i,0);\n    }\n    return arr;",
    "    // TODO: Write - Your - Code\n    return iterable;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> heap;\n    for(int i=0;i<iterable.size();i++){\n        heap.push_back(iterable[i]);\n        int ci=heap.size()-1;\n        int pi=(ci-1)/2;\n        while(ci>0){\n            if(heap[ci]<heap[pi]){\n                int temp=heap[ci];\n                heap[ci]=heap[pi];\n                heap[pi]=temp;\n            }\n            ci=pi;\n            pi=(ci-1)/2;\n        }\n    }\n    std::vector<long> ans;\n    while(heap.size()>0){\n        ans.push_back(heap[0]);\n        heap[0]=heap[heap.size()-1];\n        heap.pop_back();\n        int pi=0;\n        int lci=2*pi+1;\n        int rci=2*pi+2;\n        while(lci<heap.size()){\n            int mi=pi;\n            if(heap[mi]>heap[lci]){\n                mi=lci;\n            }\n            if(rci<heap.size() && heap[mi]>heap[rci]){\n                mi=rci;\n            }\n            if(mi==pi){\n                break;\n            }\n            int temp=heap[mi];\n            heap[mi]=heap[pi];\n            heap[pi]=temp;\n            pi=mi;\n            lci=2*pi+1;\n            rci=2*pi+2;\n        }\n    }\n    return ans;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort.\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        sorted.push_back(pq.top());\n        pq.pop();\n    }\n    return sorted;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(long i = 0; i < iterable.size(); i++){\n        min_heap.push(iterable[i]);\n    }\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > min_heap;\n    for (long i = 0; i < iterable.size(); i++) {\n        min_heap.push(iterable[i]);\n    }\n    while (!min_heap.empty()) {\n        sorted_list.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_list;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    std::vector<long> res;\n    while(!pq.empty()){\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
    "    // TODO: Write your code here\n    std::vector<long> sortedArray;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for (auto num : iterable) {\n        minHeap.push(num);\n    }\n    while (!minHeap.empty()) {\n        sortedArray.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return sortedArray;",
    "    // Write your code here.\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable)\n        minHeap.push(num);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable)\n    {\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> v = iterable;\n    int n = v.size();\n    for(int i = n/2-1; i >= 0; i--){\n        heapify(v, n, i);\n    }\n    for(int i = n-1; i >= 0; i--){\n        std::swap(v[0], v[i]);\n        heapify(v, i, 0);\n    }\n    return v;",
    "    // TODO\n    std::vector<long> result;\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> heap;\n    for(int i=0;i<iterable.size();i++){\n        heap.push_back(iterable[i]);\n        int child_index = heap.size()-1;\n        int parent_index = (child_index-1)/2;\n        while(parent_index>=0 && heap[parent_index]<heap[child_index]){\n            long temp = heap[parent_index];\n            heap[parent_index] = heap[child_index];\n            heap[child_index] = temp;\n            child_index = parent_index;\n            parent_index = (child_index-1)/2;\n        }\n    }\n    std::vector<long> result;\n    while(heap.size()>0){\n        result.push_back(heap[0]);\n        heap[0] = heap[heap.size()-1];\n        heap.pop_back();\n        int parent_index = 0;\n        int left_child_index = 2*parent_index+1;\n        int right_child_index = 2*parent_index+2;\n        while(left_child_index<heap.size()){\n            int max_index = parent_index;\n            if(heap[max_index]<heap[left_child_index]){\n                max_index = left_child_index;\n            }\n            if(right_child_index<heap.size() && heap[max_index]<heap[right_child_index]){\n                max_index = right_child_index;\n            }\n            if(max_index==parent_index){\n                break;\n            }\n            long temp = heap[max_index];\n            heap[max_index] = heap[parent_index];\n            heap[parent_index] = temp;\n            parent_index = max_index;\n            left_child_index = 2*parent_index+1;\n            right_child_index = 2*parent_index+2;\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : iterable) {\n        pq.push(i);\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> heap;\n    for(int i=0;i<iterable.size();i++){\n        heap.push_back(iterable[i]);\n        int child = heap.size()-1;\n        int parent = (child-1)/2;\n        while(parent>=0 && heap[parent]>heap[child]){\n            std::swap(heap[parent],heap[child]);\n            child = parent;\n            parent = (child-1)/2;\n        }\n    }\n    std::vector<long> sorted;\n    while(heap.size()>0){\n        sorted.push_back(heap[0]);\n        std::swap(heap[0],heap[heap.size()-1]);\n        heap.pop_back();\n        int parent = 0;\n        int left = 2*parent+1;\n        int right = 2*parent+2;\n        while(left<heap.size()){\n            int min_index = parent;\n            if(heap[left]<heap[min_index]){\n                min_index = left;\n            }\n            if(right<heap.size() && heap[right]<heap[min_index]){\n                min_index = right;\n            }\n            if(min_index==parent){\n                break;\n            }\n            std::swap(heap[parent],heap[min_index]);\n            parent = min_index;\n            left = 2*parent+1;\n            right = 2*parent+2;\n        }\n    }\n    return sorted;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable) {\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    // Return the sorted vector\n    std::vector<long> v;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> sorted;\n    std::priority_queue<long> heap;\n    for (long i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "\t// Write your code here\n\tstd::vector<long> result;\n\tstd::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\tfor (long i = 0; i < iterable.size(); i++) {\n\t\tpq.push(iterable[i]);\n\t}\n\twhile (!pq.empty()) {\n\t\tresult.push_back(pq.top());\n\t\tpq.pop();\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    std::priority_queue<long> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    //return iterable;\n    std::vector<long> res;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
    "    // TODO: Write your code here\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    std::vector<long> result;\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Your code here\n    std::vector<long> v;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(int i=0;i<iterable.size();i++){\n        minHeap.push(iterable[i]);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto num : iterable)\n      min_heap.push(num);\n    while(!min_heap.empty()){\n      result.push_back(min_heap.top());\n      min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (int i = 0; i < iterable.size(); i++) {\n        heap.push_back(iterable[i]);\n        int child = heap.size() - 1;\n        int parent = (child - 1) / 2;\n        while (parent >= 0 && heap[parent] > heap[child]) {\n            std::swap(heap[parent], heap[child]);\n            child = parent;\n            parent = (child - 1) / 2;\n        }\n    }\n    std::vector<long> result;\n    while (heap.size() > 0) {\n        result.push_back(heap[0]);\n        std::swap(heap[0], heap[heap.size() - 1]);\n        heap.pop_back();\n        int parent = 0;\n        int left_child = 2 * parent + 1;\n        int right_child = 2 * parent + 2;\n        while (left_child < heap.size()) {\n            int min_index = parent;\n            if (heap[min_index] > heap[left_child]) {\n                min_index = left_child;\n            }\n            if (right_child < heap.size() && heap[min_index] > heap[right_child]) {\n                min_index = right_child;\n            }\n            if (min_index == parent) {\n                break;\n            }\n            std::swap(heap[parent], heap[min_index]);\n            parent = min_index;\n            left_child = 2 * parent + 1;\n            right_child = 2 * parent + 2;\n        }\n    }\n    return result;",
    "    // TODO: Implement heap sort.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (long i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i:iterable)\n    {\n        minHeap.push(i);\n    }\n    while(!minHeap.empty())\n    {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable)\n        minHeap.push(num);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort.\n    std::vector<long> sorted_iterable;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted_iterable.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted_iterable;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    // create a max heap\n    std::make_heap(iterable.begin(), iterable.end());\n    // pop the max element from the heap and push it to the vector\n    while(!iterable.empty()) {\n        sorted.push_back(iterable.front());\n        std::pop_heap(iterable.begin(), iterable.end());\n        iterable.pop_back();\n    }\n    return sorted;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i : iterable)\n        min_heap.push(i);\n    while(!min_heap.empty()){\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> sorted_vector;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted_vector.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_vector;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(auto i : iterable) {\n        pq.push(i);\n    }\n    while(!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (long i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable)\n    {\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> heap;\n    for (auto i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        sorted.push_back(heap.top());\n        heap.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for (auto num : iterable) {\n        minHeap.push(num);\n    }\n    while (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> heap;\n    for (long i : iterable) {\n        heap.push(i);\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i: iterable){\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()){\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // TODO: Write - Your - Code\n    std::vector<long> heap;\n    for(int i=0;i<iterable.size();i++){\n        heap.push_back(iterable[i]);\n        int index = heap.size()-1;\n        while(index>0){\n            int parent = (index-1)/2;\n            if(heap[parent]>heap[index]){\n                long temp = heap[parent];\n                heap[parent] = heap[index];\n                heap[index] = temp;\n                index = parent;\n            }\n            else{\n                break;\n            }\n        }\n    }\n    std::vector<long> result;\n    while(heap.size()>0){\n        result.push_back(heap[0]);\n        heap[0] = heap[heap.size()-1];\n        heap.pop_back();\n        int index = 0;\n        while(index<heap.size()){\n            int left = 2*index+1;\n            int right = 2*index+2;\n            if(left<heap.size() && right<heap.size()){\n                if(heap[index]>heap[left] && heap[index]>heap[right]){\n                    if(heap[left]<heap[right]){\n                        long temp = heap[left];\n                        heap[left] = heap[index];\n                        heap[index] = temp;\n                        index = left;\n                    }\n                    else{\n                        long temp = heap[right];\n                        heap[right] = heap[index];\n                        heap[index] = temp;\n                        index = right;\n                    }\n                }\n                else if(heap[index]>heap[left]){\n                    long temp = heap[left];\n                    heap[left] = heap[index];\n                    heap[index] = temp;\n                    index = left;\n                }\n                else if(heap[index]>heap[right]){\n                    long temp = heap[right];\n                    heap[right] = heap[index];\n                    heap[index] = temp;\n                    index = right;\n               ",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto item : iterable) {\n        min_heap.push(item);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Implement heap sort\n    std::vector<long> sorted_list;\n    std::vector<long> heap;\n    for(int i=0;i<iterable.size();i++){\n        heap.push_back(iterable[i]);\n        int current_index = heap.size()-1;\n        while(current_index>0){\n            int parent_index = (current_index-1)/2;\n            if(heap[parent_index]<heap[current_index]){\n                long temp = heap[parent_index];\n                heap[parent_index] = heap[current_index];\n                heap[current_index] = temp;\n                current_index = parent_index;\n            }\n            else{\n                break;\n            }\n        }\n    }\n    while(heap.size()>0){\n        sorted_list.push_back(heap[0]);\n        heap[0] = heap[heap.size()-1];\n        heap.pop_back();\n        int current_index = 0;\n        while(current_index<heap.size()){\n            int left_child_index = 2*current_index+1;\n            int right_child_index = 2*current_index+2;\n            if(left_child_index>=heap.size()){\n                break;\n            }\n            int max_index = current_index;\n            if(heap[max_index]<heap[left_child_index]){\n                max_index = left_child_index;\n            }\n            if(right_child_index<heap.size() && heap[max_index]<heap[right_child_index]){\n                max_index = right_child_index;\n            }\n            if(max_index==current_index){\n                break;\n            }\n            long temp = heap[max_index];\n            heap[max_index] = heap[current_index];\n            heap[current_index] = temp;\n            current_index = max_index;\n        }\n    }\n    return sorted_list;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> sorted;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++)\n        pq.push(iterable[i]);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable){\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> v = iterable;\n    int n = v.size();\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(v, n, i);\n    }\n    for (int i = n - 1; i >= 0; i--) {\n        std::swap(v[0], v[i]);\n        heapify(v, i, 0);\n    }\n    return v;",
    "    // TODO: Implement heap sort\n    return iterable;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long> pq;\n    for(auto i:iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    std::vector<long> heap;\n    for (auto i : iterable) {\n        heap.push_back(i);\n        std::push_heap(heap.begin(), heap.end());\n    }\n    std::sort_heap(heap.begin(), heap.end());\n    return heap;",
    "    // Write your code here\n    std::vector<long> v;\n    std::priority_queue<long> pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n        pq.pop();\n    }\n    return v;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable)\n        pq.push(i);\n    std::vector<long> res;\n    while(!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // Write your code here.\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    std::vector<long> result;\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(auto i : iterable){\n        pq.push(i);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable)\n        minHeap.push(i);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto i : iterable){\n        minHeap.push(i);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    // Write your code here\n    std::vector<long> v;\n    for(auto i:iterable){\n        v.push_back(i);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write - Your - Code\n    //return iterable;\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (auto i : iterable) {\n        pq.push(i);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v;\n    for(int i=0;i<iterable.size();i++){\n        v.push_back(iterable[i]);\n    }\n    std::make_heap(v.begin(),v.end());\n    std::sort_heap(v.begin(),v.end());\n    return v;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num: iterable){\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for(auto i: iterable) {\n        min_heap.push(i);\n    }\n    while(!min_heap.empty()) {\n        sorted_list.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_list;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i : iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    // TODO: Write - Your - Code\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i:iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for (int i = 0; i < iterable.size(); i++) {\n        pq.push(iterable[i]);\n    }\n    while (!pq.empty()) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable)\n        pq.push(i);\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> v = iterable;\n    std::make_heap(v.begin(), v.end());\n    std::sort_heap(v.begin(), v.end());\n    return v;",
    "    std::vector<long> sorted_list;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (auto i: iterable) {\n        min_heap.push(i);\n    }\n    while (!min_heap.empty()) {\n        sorted_list.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return sorted_list;",
    "    // Write your code here\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n    for(auto i: iterable)\n        pq.push(i);\n    std::vector<long> res;\n    while(!pq.empty()){\n        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num: iterable){\n        minHeap.push(num);\n    }\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here.\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n    for (long i = 0; i < iterable.size(); i++) {\n        min_heap.push(iterable[i]);\n    }\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n        min_heap.pop();\n    }\n    return result;",
    "    std::vector<long> sorted_vector;\n    std::priority_queue<long> max_heap;\n    for(auto i: iterable) {\n        max_heap.push(i);\n    }\n    while(!max_heap.empty()) {\n        sorted_vector.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    return sorted_vector;",
    "    // TODO: Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n    for(auto num : iterable)\n        minHeap.push(num);\n    while(!minHeap.empty()){\n        result.push_back(minHeap.top());\n        minHeap.pop();\n    }\n    return result;",
    "    // Write your code here\n    std::vector<long> result;\n    std::priority_queue<long, std::vector<long>, std::greater<long> > pq;\n    for(int i=0;i<iterable.size();i++){\n        pq.push(iterable[i]);\n    }\n    while(!pq.empty()){\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;"
  ]
}