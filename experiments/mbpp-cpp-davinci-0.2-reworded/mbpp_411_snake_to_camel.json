{
  "name": "mbpp_411_snake_to_camel",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to convert the given snake case string to camel case string.\nstd::string snake_to_camel(std::string word) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = snake_to_camel;\n    assert(candidate((\"android_tv\")) == (\"AndroidTv\"));\n    assert(candidate((\"google_pixel\")) == (\"GooglePixel\"));\n    assert(candidate((\"apple_watch\")) == (\"AppleWatch\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i=0;i<word.length();i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "  std::string result;\n  for (int i = 0; i < word.length(); i++) {\n    if (word[i] == '_') {\n      result += toupper(word[i + 1]);\n      i++;\n    } else {\n      result += word[i];\n    }\n  }\n  return result;",
    "    std::string result;\n    for(int i=0;i<word.size();i++) {\n        if(word[i]=='_') {\n            result+=toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result+=word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.length(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i+1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        } else {\n            result += word[i];\n        }\n    }\n    return result;",
    "    std::string result;\n    for(int i = 0; i < word.size(); i++) {\n        if(word[i] == '_') {\n            result += toupper(word[i + 1]);\n            i++;\n        }\n        else {\n            result += word[i];\n        }\n    }\n    return result;"
  ]
}