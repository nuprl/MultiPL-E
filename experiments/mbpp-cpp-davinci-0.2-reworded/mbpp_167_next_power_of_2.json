{
  "name": "mbpp_167_next_power_of_2",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the smallest power of 2 greater than or equal to n.\nlong next_power_of_2(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = next_power_of_2;\n    assert(candidate((0)) == (1));\n    assert(candidate((5)) == (8));\n    assert(candidate((17)) == (32));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;",
    "    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;",
    "    assert(n>=0);\n    if (n==0) return 1;\n    if (n&(n-1)==0) return n;\n    while (n&(n-1)>0) {\n        n &= (n-1);\n    }\n    return n<<1;",
    "    long i = 1;\n    while (i < n) {\n        i = i << 1;\n    }\n    return i;",
    "  long p = 1;\n  if (n && !(n & (n - 1)))\n    return n;\n\n  while (p < n) {\n    p <<= 1;\n  }\n  return p;",
    "    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;",
    "    if (n == 0)\n        return 1;\n    long p = ceil(log2(n));\n    return (long)pow(2, p);",
    "    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;",
    "    long p = 1;\n    if (n && !(n & (n - 1)))\n        return n;\n    while (p < n) {\n        p <<= 1;\n    }\n    return p;",
    "    assert(n >= 0);\n    if (n == 0)\n        return 1;\n    long p = 1;\n    while (p < n)\n        p <<= 1;\n    return p;",
    "    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));",
    "    // Your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;",
    "    assert(n>=0);\n    if(n==0)\n        return 1;\n    long p=1;\n    while(p<n)\n        p=p<<1;\n    return p;",
    "    // Write your code here\n    long i=1;\n    while(i<n)\n    {\n        i=i*2;\n    }\n    return i;",
    "    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));",
    "    if (n == 0)\n        return 1;\n    if (ceil(log2(n)) == floor(log2(n)))\n        return n;\n    else\n        return pow(2, ceil(log2(n)));",
    "    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;",
    "    long count = 0;\n    if (n && !(n & (n - 1)))\n        return n;\n    while( n != 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;",
    "    if (n == 0)\n        return 1;\n    if (n & (n - 1)) {\n        n = n - 1;\n        n = n | (n >> 1);\n        n = n | (n >> 2);\n        n = n | (n >> 4);\n        n = n | (n >> 8);\n        n = n | (n >> 16);\n        n = n | (n >> 32);\n        n = n + 1;\n    }\n    return n;",
    "  long count = 0;\n  if (n && !(n & (n - 1)))\n    return n;\n  while (n != 0) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;"
  ]
}