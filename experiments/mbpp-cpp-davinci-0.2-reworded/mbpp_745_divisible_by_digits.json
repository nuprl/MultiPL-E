{
  "name": "mbpp_745_divisible_by_digits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/cppthon-exercises/lambda/cppthon-lambda-exercise-24.php\nstd::vector<long> divisible_by_digits(long startnum, long endnum) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = divisible_by_digits;\n    assert(candidate((1), (22)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15, (long)22})));\n    assert(candidate((1), (15)) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)11, (long)12, (long)15})));\n    assert(candidate((20), (25)) == (std::vector<long>({(long)22, (long)24})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        std::string s = std::to_string(i);\n        bool is_divisible = true;\n        for (char c : s) {\n            int digit = c - '0';\n            if (digit == 0) {\n                is_divisible = false;\n                break;\n            }\n            if (i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        long num = i;\n        bool flag = true;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0) {\n                flag = false;\n                break;\n            }\n            if (i % digit != 0) {\n                flag = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool flag = true;\n        long temp = i;\n        while (temp > 0) {\n            long digit = temp % 10;\n            if (digit == 0 || i % digit != 0) {\n                flag = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "\tstd::vector<long> result;\n\tfor (long i = startnum; i <= endnum; i++) {\n\t\tlong num = i;\n\t\tbool is_divisible = true;\n\t\twhile (num > 0) {\n\t\t\tint digit = num % 10;\n\t\t\tif (digit != 0 && i % digit != 0) {\n\t\t\t\tis_divisible = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnum /= 10;\n\t\t}\n\t\tif (is_divisible) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        auto is_divisible = [i](long j) {\n            return i % j == 0;\n        };\n        std::string s = std::to_string(i);\n        bool divisible = true;\n        for (char c : s) {\n            if (!is_divisible(c - '0')) {\n                divisible = false;\n                break;\n            }\n        }\n        if (divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool divisible = true;\n        long n = i;\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit == 0 || i % digit != 0) {\n                divisible = false;\n                break;\n            }\n            n /= 10;\n        }\n        if (divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        std::string str = std::to_string(i);\n        bool is_divisible = true;\n        for (char c : str) {\n            if (c != '0' && i % (c - '0') != 0) {\n                is_divisible = false;\n                break;\n            }\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool flag = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                flag = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long temp = i;\n        while (temp > 0) {\n            long digit = temp % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for(long i = startnum; i <= endnum; i++) {\n        bool flag = true;\n        long num = i;\n        while(num > 0) {\n            long digit = num % 10;\n            if(digit == 0 || i % digit != 0) {\n                flag = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        long temp = i;\n        bool flag = true;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || i % digit != 0) {\n                flag = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (flag) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long temp = i;\n        while (temp > 0) {\n            int digit = temp % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long temp = i;\n        while (temp > 0) {\n            long digit = temp % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            temp /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;",
    "    std::vector<long> result;\n    for (long i = startnum; i <= endnum; i++) {\n        bool is_divisible = true;\n        long num = i;\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit == 0 || i % digit != 0) {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if (is_divisible) {\n            result.push_back(i);\n        }\n    }\n    return result;"
  ]
}