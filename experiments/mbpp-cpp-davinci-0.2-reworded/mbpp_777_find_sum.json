{
  "name": "mbpp_777_find_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of non-repeated elements in a given vector.\nlong find_sum(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto x : m) {\n        if (x.second == 1) {\n            sum += x.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_map<long, int> map;\n    for(auto i: arr) {\n        map[i]++;\n    }\n    long sum = 0;\n    for(auto i: map) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]]++;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            sum += *i;\n            s.insert(*i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;"
  ]
}