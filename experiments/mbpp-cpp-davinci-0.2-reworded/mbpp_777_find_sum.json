{
  "name": "mbpp_777_find_sum",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to find the sum of non-repeated elements in a given vector.\nlong find_sum(std::vector<long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = find_sum;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)1, (long)4, (long)5, (long)6}))) == (21));\n    assert(candidate((std::vector<long>({(long)1, (long)10, (long)9, (long)4, (long)2, (long)10, (long)10, (long)45, (long)4}))) == (71));\n    assert(candidate((std::vector<long>({(long)12, (long)10, (long)9, (long)45, (long)2, (long)10, (long)10, (long)45, (long)10}))) == (78));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto x : m) {\n        if (x.second == 1) {\n            sum += x.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_map<long, int> map;\n    for(auto i: arr) {\n        map[i]++;\n    }\n    long sum = 0;\n    for(auto i: map) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]]++;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            sum += *i;\n            s.insert(*i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    /*\n    :param arr: input array\n    :rtype: long\n    */\n    long sum = 0;\n    std::unordered_map<long, int> mp;\n    for(int i = 0; i < arr.size(); i++) {\n        if(mp.find(arr[i]) == mp.end()) {\n            sum += arr[i];\n            mp[arr[i]] = 1;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> mp;\n    for (int i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for (auto x : mp) {\n        if (x.second == 1) {\n            sum += x.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> mp;\n    for(int i=0; i<arr.size(); i++) {\n        if(mp.find(arr[i]) == mp.end()) {\n            sum += arr[i];\n            mp[arr[i]] = 1;\n        }\n    }\n    return sum;",
    "    std::sort(arr.begin(), arr.end());\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (i == 0) {\n            sum += arr[i];\n        }\n        else if (arr[i] != arr[i - 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i=0; i<arr.size(); i++) {\n        int count = 0;\n        for(int j=0; j<arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> map;\n    for (int i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "  long sum = 0;\n  std::map<long, int> m;\n  for (long i = 0; i < arr.size(); i++) {\n    m[arr[i]]++;\n  }\n  for (auto i = m.begin(); i != m.end(); i++) {\n    if (i->second == 1) {\n      sum += i->first;\n    }\n  }\n  return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> map;\n    for(long i = 0; i < arr.size(); i++) {\n        if(map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    std::vector<long>::iterator it;\n    for(it=arr.begin();it!=arr.end();it++)\n    {\n        if(std::count(arr.begin(),arr.end(),*it)==1)\n        {\n            sum+=*it;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    std::unordered_set<long> s;\n    long sum = 0;\n    for(auto i:arr){\n        if(s.find(i) == s.end()){\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    std::sort(arr.begin(),arr.end());\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    /*\n    :param arr: input array\n    :return: sum of non-repeated elements\n    TODO: complete this function to find sum of non-repeated elements\n    Do not print anything\n    Do not take input\n    */\n    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(int i=0; i<arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            m[arr[i]]++;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto itr = m.begin(); itr != m.end(); itr++) {\n        if(itr->second == 1) {\n            sum += itr->first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr){\n        if(s.find(i) == s.end()){\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    long sum = 0;\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;",
    "    std::sort(arr.begin(), arr.end());\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for(int i=0; i<arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n        } else {\n            m[arr[i]]++;\n        }\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int count=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j])\n            {\n                count++;\n            }\n        }\n        if(count==1)\n        {\n            sum=sum+arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    std::sort(arr.begin(), arr.end());\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (i == 0) {\n            sum += arr[i];\n        } else if (arr[i] != arr[i - 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n     * Return output and don't print it.\n     * Taking input and printing output is handled automatically.\n     */\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        m[*i]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        m[*i]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        int count = 0;\n        for(int j=0;j<arr.size();j++){\n            if(arr[i] == arr[j]){\n                count++;\n            }\n        }\n        if(count == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i=m.begin(); i!=m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        if (m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        if (m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto x : arr) {\n        if (s.find(x) == s.end()) {\n            sum += x;\n            s.insert(x);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    std::unordered_set<long> s;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        m[*i]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        bool flag = true;\n        for (int j = 0; j < arr.size(); j++) {\n            if (i != j && arr[i] == arr[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i = arr.begin(); i!=arr.end(); i++) {\n        if(s.find(*i) == s.end()) {\n            sum += *i;\n            s.insert(*i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n        } else {\n            m[arr[i]]++;\n        }\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i=0;i<arr.size();i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    //write your code here\n    long sum = 0;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i: arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        bool flag = false;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = true;\n                break;\n            }\n        }\n        if(!flag) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == arr[i + 1]) {\n            i++;\n        } else {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == arr[i + 1]) {\n            i++;\n        } else {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(auto i : arr)\n    {\n        m[i]++;\n    }\n    for(auto i : m)\n    {\n        if(i.second == 1)\n        {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        bool flag = true;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = false;\n                break;\n            }\n        }\n        if(flag) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> set;\n    for (int i = 0; i < arr.size(); i++) {\n        if (set.find(arr[i]) == set.end()) {\n            sum += arr[i];\n            set.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        if (s.find(*i) == s.end()) {\n            s.insert(*i);\n            sum += *i;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(int i=0;i<arr.size();i++)\n    {\n        if(s.find(arr[i])==s.end())\n        {\n            s.insert(arr[i]);\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) == map.end()) {\n            map[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> mp;\n    for(long i = 0; i < arr.size(); i++) {\n        mp[arr[i]]++;\n    }\n    for(auto i = mp.begin(); i != mp.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    long sum = 0;\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int j;\n        for(j = 0; j < arr.size(); j++) {\n            if(i != j && arr[i] == arr[j]) {\n                break;\n            }\n        }\n        if(j == arr.size()) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    long sum = 0;\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> map;\n    for (long i = 0; i < arr.size(); i++) {\n        map[arr[i]]++;\n    }\n    for (auto i : map) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        m[*i]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> mp;\n    for (long i = 0; i < arr.size(); i++) {\n        if (mp.find(arr[i]) == mp.end()) {\n            mp[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    /*\n    :param arr: input vector\n    :return: sum of non-repeated elements\n    TODO: complete this function to find sum of non-repeated elements\n    */\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size();i++)\n    {\n        if(arr[i]!=arr[i+1])\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "\tlong sum = 0;\n\tstd::sort(arr.begin(), arr.end());\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] != arr[i + 1]) {\n\t\t\tsum += arr[i];\n\t\t}\n\t}\n\treturn sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    std::sort(arr.begin(),arr.end());\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=arr[i+1]){\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == arr[i+1]) {\n            i++;\n        }\n        else {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (auto i : arr) {\n        if (s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    /*\n        Write your code here.\n    */\n    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        if (m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum=0;\n    for(int i=0;i<arr.size();i++)\n    {\n        int flag=0;\n        for(int j=0;j<arr.size();j++)\n        {\n            if(arr[i]==arr[j] && i!=j)\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0)\n        {\n            sum+=arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (auto i = arr.begin(); i != arr.end(); i++) {\n        m[*i]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(long i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (int i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (i == 0) {\n            if (arr[i] != arr[i + 1]) {\n                sum += arr[i];\n            }\n        }\n        else if (i == arr.size() - 1) {\n            if (arr[i] != arr[i - 1]) {\n                sum += arr[i];\n            }\n        }\n        else {\n            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {\n                sum += arr[i];\n            }\n        }\n    }\n    return sum;",
    "    std::unordered_set<long> s;\n    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(s.find(arr[i]) == s.end()) {\n            s.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(auto i : arr) {\n        m[i]++;\n    }\n    for(auto i : m) {\n        if(i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i+1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] != arr[i+1]){\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for(long i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if(flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (i == arr.size() - 1) {\n            sum += arr[i];\n            break;\n        }\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n        else {\n            i++;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for (long i = 0; i < arr.size(); i++) {\n        if (s.find(arr[i]) == s.end()) {\n            sum += arr[i];\n            s.insert(arr[i]);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int flag = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j] && i != j) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (i == 0) {\n            sum += arr[i];\n        }\n        else if (arr[i] != arr[i-1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr) {\n        if(s.find(i) == s.end()) {\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto i = m.begin(); i != m.end(); i++) {\n        if(i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto i = m.begin(); i != m.end(); i++) {\n        if (i->second == 1) {\n            sum += i->first;\n        }\n    }\n    return sum;",
    "    /*\n    :param - arr - input vector\n    return - sum of non-repeated elements\n    */\n    long sum = 0;\n    std::unordered_set<long> s;\n    for(auto i : arr){\n        if(s.find(i) == s.end()){\n            sum += i;\n            s.insert(i);\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : arr) {\n        if (m[i] == 1) {\n            sum += i;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for (auto x : m) {\n        if (x.second == 1) {\n            sum += x.first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, long> m;\n    for(int i = 0; i < arr.size(); i++) {\n        if(m.find(arr[i]) == m.end()) {\n            m[arr[i]] = 1;\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int count = 0;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        long count = 0;\n        for(long j = 0; j < arr.size(); j++) {\n            if(arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if(count == 1) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_set<long> set;\n    for(long i=0;i<arr.size();i++){\n        if(set.find(arr[i]) == set.end()){\n            set.insert(arr[i]);\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> count;\n    for(int i = 0; i < arr.size(); i++) {\n        if(count.find(arr[i]) == count.end()) {\n            count[arr[i]] = 1;\n            sum += arr[i];\n        }\n        else {\n            count[arr[i]] += 1;\n        }\n    }\n    return sum;",
    "    // Write your code here\n    long sum = 0;\n    std::map<long, long> m;\n    for(int i = 0; i < arr.size(); i++) {\n        m[arr[i]]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second == 1) {\n            sum += it->first;\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::sort(arr.begin(), arr.end());\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1]) {\n            sum += arr[i];\n        }\n    }\n    return sum;",
    "    long sum = 0;\n    std::unordered_map<long, int> m;\n    for (auto i : arr) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second == 1) {\n            sum += i.first;\n        }\n    }\n    return sum;"
  ]
}