{
  "name": "mbpp_265_list_split",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes in a vector and an integer n and splits a vector for every nth element, returning a vector of the resulting vectors.\nstd::any list_split(std::any S, long step) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = list_split;\n    assert(candidate((std::any({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"e\", (std::string)\"f\", (std::string)\"g\", (std::string)\"h\", (std::string)\"i\", (std::string)\"j\", (std::string)\"k\", (std::string)\"l\", (std::string)\"m\", (std::string)\"n\"})), (3)) == (std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"a\", (std::string)\"d\", (std::string)\"g\", (std::string)\"j\", (std::string)\"m\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"b\", (std::string)\"e\", (std::string)\"h\", (std::string)\"k\", (std::string)\"n\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"c\", (std::string)\"f\", (std::string)\"i\", (std::string)\"l\"})})));\n    assert(candidate((std::any({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11, (long)12, (long)13, (long)14})), (3)) == (std::any({(std::vector<long>)std::vector<long>({(long)1, (long)4, (long)7, (long)10, (long)13}), (std::vector<long>)std::vector<long>({(long)2, (long)5, (long)8, (long)11, (long)14}), (std::vector<long>)std::vector<long>({(long)3, (long)6, (long)9, (long)12})})));\n    assert(candidate((std::any({(std::string)\"python\", (std::string)\"java\", (std::string)\"C\", (std::string)\"C++\", (std::string)\"DBMS\", (std::string)\"SQL\"})), (2)) == (std::any({(std::vector<std::string>)std::vector<std::string>({(std::string)\"python\", (std::string)\"C\", (std::string)\"DBMS\"}), (std::vector<std::string>)std::vector<std::string>({(std::string)\"java\", (std::string)\"C++\", (std::string)\"SQL\"})})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    std::any result;\n    std::any temp;\n    for (int i = 0; i < S.size(); i++) {\n        if (i % step == 0) {\n            if (temp.size() > 0) {\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n        temp.push_back(S[i]);\n    }\n    if (temp.size() > 0) {\n        result.push_back(temp);\n    }\n    return result;",
    "  std::any result;\n  for (auto i = 0; i < S.size(); i += step) {\n    result.push_back(S.substr(i, step));\n  }\n  return result;",
    "  std::any result;\n  std::any temp;\n  for (long i = 0; i < S.size(); i++) {\n    if (i % step == 0) {\n      if (temp.size() > 0) {\n        result.push_back(temp);\n      }\n      temp.clear();\n    }\n    temp.push_back(S[i]);\n  }\n  if (temp.size() > 0) {\n    result.push_back(temp);\n  }\n  return result;",
    "  std::any result;\n  if (step <= 0) {\n    return result;\n  }\n  long i = 0;\n  while (i < S.size()) {\n    std::any temp;\n    for (long j = 0; j < step; j++) {\n      if (i + j < S.size()) {\n        temp.push_back(S[i + j]);\n      }\n    }\n    result.push_back(temp);\n    i += step;\n  }\n  return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  for (auto x : S) {\n    if (i % step == 0) {\n      if (temp.size() != 0) {\n        result.push_back(temp);\n      }\n      temp = {};\n    }\n    temp.push_back(x);\n    i++;\n  }\n  result.push_back(temp);\n  return result;",
    "    std::any result;\n    for (int i = 0; i < S.size(); i += step) {\n        result.push_back(S.substr(i, step));\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    for (int i = 0; i < S.size(); i++) {\n        if (i % step == 0) {\n            if (temp.size() != 0) {\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n        temp.push_back(S[i]);\n    }\n    if (temp.size() != 0) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::any res;\n    for (long i = 0; i < S.size(); i += step) {\n        res.push_back(std::any(S.begin() + i, S.begin() + i + step));\n    }\n    return res;",
    "    std::any result;\n    if (step > 0) {\n        for (int i = 0; i < S.size(); i += step) {\n            result.push_back(std::any(S.begin() + i, S.begin() + i + step));\n        }\n    } else {\n        for (int i = S.size() - 1; i >= 0; i += step) {\n            result.push_back(std::any(S.begin() + i, S.begin() + i + step));\n        }\n    }\n    return result;",
    "    std::any result;\n    long i = 0;\n    for (auto it = std::begin(S); it != std::end(S); ++it) {\n        if (i % step == 0) {\n            result.push_back(std::any());\n        }\n        result.back().push_back(*it);\n        i++;\n    }\n    return result;",
    "    std::any result;\n    long i = 0;\n    for (auto x : S) {\n        if (i % step == 0) {\n            result.push_back(std::any());\n        }\n        result[result.size() - 1].push_back(x);\n        i++;\n    }\n    return result;",
    "  std::vector<std::any> result;\n  for (long i = 0; i < S.size(); i += step) {\n    std::vector<std::any> temp;\n    for (long j = i; j < i + step; j++) {\n      temp.push_back(S[j]);\n    }\n    result.push_back(temp);\n  }\n  return result;",
    "    std::vector<std::vector<int>> result;\n    std::vector<int> temp;\n    for (int i = 0; i < S.size(); i++) {\n        if (i % step == 0 && i != 0) {\n            result.push_back(temp);\n            temp.clear();\n        }\n        temp.push_back(S[i]);\n    }\n    result.push_back(temp);\n    return result;",
    "  std::any result;\n  std::any temp;\n  for (int i = 0; i < S.size(); i++) {\n    if (i % step == 0 && i != 0) {\n      result.push_back(temp);\n      temp.clear();\n    }\n    temp.push_back(S[i]);\n  }\n  result.push_back(temp);\n  return result;",
    "    std::vector<std::any> result;\n    std::vector<std::any> temp;\n    for (int i = 0; i < S.size(); i++) {\n        if (i % step == 0 && i != 0) {\n            result.push_back(temp);\n            temp.clear();\n        }\n        temp.push_back(S[i]);\n    }\n    result.push_back(temp);\n    return result;",
    "  std::any result;\n  long i;\n  long j;\n  long k;\n  long n;\n  long v_size;\n  std::any v;\n  v = S;\n  v_size = v.size();\n  n = v_size / step;\n  if (v_size % step != 0) {\n    n = n + 1;\n  }\n  result = std::vector<std::any>(n);\n  i = 0;\n  while (i < n) {\n    result[i] = std::vector<std::any>(step);\n    j = 0;\n    while (j < step) {\n      k = i * step + j;\n      if (k < v_size) {\n        result[i][j] = v[k];\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  return result;",
    "    std::any result;\n    long i = 0;\n    for (auto it = S.begin(); it != S.end(); it++) {\n        if (i % step == 0) {\n            result.push_back(std::any());\n        }\n        result[result.size() - 1].push_back(*it);\n        i++;\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    long i = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (i % step == 0) {\n            if (temp.size() > 0) {\n                result.push_back(temp);\n            }\n            temp.clear();\n        }\n        temp.push_back(*it);\n        i++;\n    }\n    if (temp.size() > 0) {\n        result.push_back(temp);\n    }\n    return result;",
    "    std::any result;\n    std::any temp;\n    for (int i = 0; i < S.size(); i++) {\n        if (i % step == 0) {\n            if (temp.size() != 0) {\n                result.push_back(temp);\n                temp.clear();\n            }\n        }\n        temp.push_back(S[i]);\n    }\n    if (temp.size() != 0) {\n        result.push_back(temp);\n    }\n    return result;",
    "  std::any result;\n  std::any temp;\n  long i = 0;\n  while (i < S.size()) {\n    temp.push_back(S[i]);\n    if (i % step == step - 1) {\n      result.push_back(temp);\n      temp.clear();\n    }\n    i++;\n  }\n  if (temp.size() > 0) {\n    result.push_back(temp);\n  }\n  return result;"
  ]
}