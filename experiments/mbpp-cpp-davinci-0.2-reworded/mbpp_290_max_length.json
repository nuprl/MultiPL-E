{
  "name": "mbpp_290_max_length",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_std_vector_long_{\n    long f0;\n    std::vector<long> f1;    Union_long_std_vector_long_(long _f0) : f0(_f0) {}\n    Union_long_std_vector_long_(std::vector<long> _f1) : f1(_f1) {}\n    ~Union_long_std_vector_long_() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(std::vector<long> f) {\n        return f1 == f ;\n    }\n};\n// Write a function to find the vector of maximum length in a vector of vectors.\nUnion_long_std_vector_long_ max_length(std::vector<std::vector<long>> list1) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = max_length;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)9, (long)11}), (std::vector<long>)std::vector<long>({(long)13, (long)15, (long)17})}))) == std::make_tuple(3, std::vector<long>({(long)13, (long)15, (long)17})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)5, (long)7}), (std::vector<long>)std::vector<long>({(long)10, (long)12, (long)14, (long)15})}))) == std::make_tuple(4, std::vector<long>({(long)10, (long)12, (long)14, (long)15})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5}), (std::vector<long>)std::vector<long>({(long)15, (long)20, (long)25})}))) == std::make_tuple(3, std::vector<long>({(long)15, (long)20, (long)25})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vec = list1[0];\n    for (auto vec : list1) {\n        if (vec.size() > max_vec.size()) {\n            max_vec = vec;\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);",
    "    if (list1.empty()) {\n        return 0;\n    }\n    long max_length = list1[0].size();\n    std::vector<long> max_vector = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_length) {\n            max_length = list1[i].size();\n            max_vector = list1[i];\n        }\n    }\n    return max_vector;",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vector = list1[0];\n    for (std::vector<long> vector : list1) {\n        if (vector.size() > max_vector.size()) {\n            max_vector = vector;\n        }\n    }\n    return Union_long_std_vector_long_(max_vector);",
    "    Union_long_std_vector_long_ result;\n    if (list1.size() == 0) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_vec = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_vec.size()) {\n            max_vec = list1[i];\n        }\n    }\n    result = max_vec;\n    return result;",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vector = list1[0];\n    for (std::vector<long> vector : list1) {\n        if (vector.size() > max_vector.size()) {\n            max_vector = vector;\n        }\n    }\n    return Union_long_std_vector_long_(max_vector);",
    "    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    } else {\n        std::vector<long> max_list;\n        max_list = list1[0];\n        for (int i = 1; i < (list1.size()); i++) {\n            if ((list1[i].size()) > (max_list.size())) {\n                max_list = list1[i];\n            }\n        }\n        result = max_list;\n        return result;\n    }",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_list = list1[0];\n    for (auto list2 : list1) {\n        if (list2.size() > max_list.size()) {\n            max_list = list2;\n        }\n    }\n    return Union_long_std_vector_long_(max_list);",
    "    Union_long_std_vector_long_ result;\n    std::vector<long> max_list;\n    long max_length = 0;\n    for (auto list : list1) {\n        if (list.size() > max_length) {\n            max_length = list.size();\n            max_list = list;\n        }\n    }\n    result = max_list;\n    return result;",
    "    Union_long_std_vector_long_ max_len = -1;\n    for (auto list2 : list1) {\n        if (max_len.f0 < list2.size()) {\n            max_len.f1 = list2;\n            max_len.f0 = list2.size();\n        }\n    }\n    return max_len;",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vec = list1[0];\n    for (std::vector<long> vec : list1) {\n        if (vec.size() > max_vec.size()) {\n            max_vec = vec;\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);",
    "    if (list1.empty()) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_length_vector = list1[0];\n    for (auto i = list1.begin(); i != list1.end(); i++) {\n        if (i->size() > max_length_vector.size()) {\n            max_length_vector = *i;\n        }\n    }\n    return Union_long_std_vector_long_(max_length_vector);",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    long max_length = list1[0].size();\n    std::vector<long> max_vector = list1[0];\n    for (std::vector<long> vector : list1) {\n        if (vector.size() > max_length) {\n            max_length = vector.size();\n            max_vector = vector;\n        }\n    }\n    return Union_long_std_vector_long_(max_vector);",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_list = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_list.size()) {\n            max_list = list1[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_list);",
    "    Union_long_std_vector_long_ result;\n    if ((list1.size()) == (0)) {\n        result = 0;\n        return result;\n    }\n    std::vector<long> max_vector = list1[0];\n    for (int i = 1; i < (list1.size()); i++) {\n        if ((list1[i].size()) > (max_vector.size())) {\n            max_vector = list1[i];\n        }\n    }\n    result = max_vector;\n    return result;",
    "    if ((list1.size() == 0)) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        std::vector<long> list2 = list1[0];\n        for (auto i : list1) {\n            if ((i.size() > list2.size())) {\n                list2 = i;\n            }\n        }\n        return Union_long_std_vector_long_(list2);\n    }",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vector = list1[0];\n    for (auto v : list1) {\n        if (v.size() > max_vector.size()) {\n            max_vector = v;\n        }\n    }\n    return Union_long_std_vector_long_(max_vector);",
    "    if ((list1.size() == 0)) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_len_list = list1[0];\n    for (auto i = 0; (i < list1.size()); i++) {\n        if ((list1[i].size() > max_len_list.size())) {\n            max_len_list = list1[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_len_list);",
    "    if ((list1.size() == 0)) {\n        return Union_long_std_vector_long_(0);\n    } else {\n        std::vector<long> list2 = list1[0];\n        std::vector<std::vector<long>> list3 = std::vector<std::vector<long>>(list1.begin() + 1, list1.end());\n        Union_long_std_vector_long_ r = max_length(list3);\n        if ((r.f0 == 0)) {\n            return Union_long_std_vector_long_(list2);\n        } else {\n            if ((list2.size() > r.f1.size())) {\n                return Union_long_std_vector_long_(list2);\n            } else {\n                return Union_long_std_vector_long_(r.f1);\n            }\n        }\n    }",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(0);\n    }\n    std::vector<long> max_vec = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_vec.size()) {\n            max_vec = list1[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);",
    "    if (list1.size() == 0) {\n        return Union_long_std_vector_long_(-1);\n    }\n    std::vector<long> max_vec = list1[0];\n    for (int i = 1; i < list1.size(); i++) {\n        if (list1[i].size() > max_vec.size()) {\n            max_vec = list1[i];\n        }\n    }\n    return Union_long_std_vector_long_(max_vec);"
  ]
}