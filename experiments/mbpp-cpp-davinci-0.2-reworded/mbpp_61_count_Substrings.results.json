{
  "name": "mbpp_61_count_Substrings",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = s[i] - '0';\n        for (int j = i + 1; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "tmpdof8c6nu: /tmp/tmpdof8c6nu.cpp:19: int main(): Assertion `candidate((\"112112\")) == (6)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        long sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.size(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        int sum = 0;\n        for(int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\t// Write your code here\n\tlong count = 0;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.size(); j++) {\n\t\t\tsum += (s[j] - '0');\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += (s[j] - '0');\n            if(sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    // Write your code here\n    long count = 0;\n    for(int i=0;i<s.length();i++){\n        int sum = 0;\n        for(int j=i;j<s.length();j++){\n            sum += s[j] - '0';\n            if(sum == j-i+1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    // Write your code here\n    long count = 0;\n    for(int i=0;i<s.length();i++){\n        int sum = 0;\n        for(int j=i;j<s.length();j++){\n            sum += s[j]-'0';\n            if(sum == (j-i+1)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += (s[j] - '0');\n            if(sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += s[j] - '0';\n            if(sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.size();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for(int i = 0; i < n; i++) {\n        int sum = 0;\n        for(int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += (s[j] - '0');\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += (s[j]-'0');\n            if(sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                ans++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += s[j]-'0';\n            if(sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long n = s.length();\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        long sum = 0;\n        for (long j = i; j < n; j++)\n        {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i=0; i<s.length(); i++) {\n        int sum = 0;\n        for (int j=i; j<s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j-i+1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.size();\n    long count = 0;\n    for(int i = 0; i < n; i++) {\n        int sum = 0;\n        for(int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i=0;i<s.length();i++) {\n        int sum = 0;\n        for(int j=i;j<s.length();j++) {\n            sum += (s[j]-'0');\n            if(sum == (j-i+1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    int count = 0;\n    for(int i = 0; i < n; i++) {\n        int sum = 0;\n        for(int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count=0;\n    for(int i=0;i<s.length();i++){\n        int sum=0;\n        for(int j=i;j<s.length();j++){\n            sum+=s[j]-'0';\n            if(sum==(j-i+1)){\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == j - i + 1)\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n\tlong count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length(); j++) {\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        long sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.size(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    int n = s.length();\n    long ans = 0;\n    for(int i=0;i<n;i++) {\n        int sum = 0;\n        for(int j=i;j<n;j++) {\n            sum += s[j] - '0';\n            if(sum == (j-i+1)) {\n                ans++;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.size(); j++) {\n            sum += (s[j] - '0');\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for(int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if(sum == (j - i + 1)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a cppthon function to count the number of substrings with the sum of digits equal to their length.\nlong count_Substrings(std::string s) {\n    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int sum = 0;\n        for (int j = i; j < s.length(); j++) {\n            sum += s[j] - '0';\n            if (sum == (j - i + 1))\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_Substrings;\n    assert(candidate((\"112112\")) == (6));\n    assert(candidate((\"111\")) == (6));\n    assert(candidate((\"1101112\")) == (12));\n}\n",
      "timestamp": 1665517290,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}